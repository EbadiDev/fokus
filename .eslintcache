[{"/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js":"1","/home/pg07codes/Desktop/fokus/src/containers/App.js":"2","/home/pg07codes/Desktop/fokus/src/serviceWorker.js":"3","/home/pg07codes/Desktop/fokus/src/containers/counter/counterSlice.js":"4","/home/pg07codes/Desktop/fokus/src/index.js":"5","/home/pg07codes/Desktop/fokus/src/store/index.js":"6","/home/pg07codes/Desktop/fokus/src/containers/focusBoard/index.js":"7","/home/pg07codes/Desktop/fokus/src/containers/focusBoard/focusBoardSlice.js":"8","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskCard.js":"9","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/index.js":"10","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js":"11"},{"size":528,"mtime":1611252515979,"results":"12","hashOfConfig":"13"},{"size":395,"mtime":1612199237429,"results":"14","hashOfConfig":"13"},{"size":5141,"mtime":1608877484447,"results":"15","hashOfConfig":"13"},{"size":1552,"mtime":1608881410941,"results":"16","hashOfConfig":"13"},{"size":651,"mtime":1608902523877,"results":"17","hashOfConfig":"13"},{"size":327,"mtime":1612199332055,"results":"18","hashOfConfig":"13"},{"size":1017,"mtime":1612204829758,"results":"19","hashOfConfig":"13"},{"size":392,"mtime":1612079700847,"results":"20","hashOfConfig":"13"},{"size":9804,"mtime":1612204558533,"results":"21","hashOfConfig":"13"},{"size":4441,"mtime":1612199495676,"results":"22","hashOfConfig":"13"},{"size":6574,"mtime":1612199347722,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"g1paqb",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js",[],"/home/pg07codes/Desktop/fokus/src/containers/App.js",[],"/home/pg07codes/Desktop/fokus/src/serviceWorker.js",[],["50","51"],"/home/pg07codes/Desktop/fokus/src/containers/counter/counterSlice.js",[],"/home/pg07codes/Desktop/fokus/src/index.js",[],["52","53"],"/home/pg07codes/Desktop/fokus/src/store/index.js",[],"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/index.js",["54","55","56"],"import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\n\nconst FocusBoardContainer = styled.div`\n    flex: 2 1 0;\n    box-shadow: 0 4px 4px rgba(0, 0, 0, 0.2);\n    background-color: #f8f8ff;\n`;\n\nexport function FocusBoard() {\n    const focusBoard = useSelector((state) => state.focusBoard);\n    const dispatch = useDispatch();\n\n    const [isFocusON, setIsFocusON] = useState(false);\n\n    return (\n        <FocusBoardContainer>\n            {focusBoard.focussedTask != null && (\n                <div>\n                    <h1>{focusBoard.focussedTask.content}</h1>\n                    <br />\n                    <h1>{focusBoard.focussedTask.remainingTime}</h1>\n                    <br />\n                    <h1>{focusBoard.focussedTask.globalKey}</h1>\n                    <br />\n                    <input type=\"button\" value=\"PP\"/>\n                    <br />\n                </div>\n            )}\n        </FocusBoardContainer>\n    );\n}\n","/home/pg07codes/Desktop/fokus/src/containers/focusBoard/focusBoardSlice.js",[],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskCard.js",["57","58","59","60","61"],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/index.js",["62","63"],"import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { create, updateOrder, incrementGlobalKey } from \"./taskBoardSlice\";\nimport TaskCard from \"./TaskCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Flipper } from \"react-flip-toolkit\";\nimport styled from \"styled-components\";\n\nconst TaskBoardContainer = styled.div`\n    display: flex;\n    flex-direction:column;\n    align-items: center;\n    flex: 3 1 0;\n`;\n\nconst TaskInputContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: 20px;\n    width: 576px;\n    background-color: #f8f8ff;\n    border-radius: 5px;\n    height: 75px;\n`;\n\nconst TaskInputField = styled.input`\n    height: 70%;\n    width: 90%;\n    font-size: 1em;\n    font-weight: bold;\n    border: 0;\n    outline: none;\n    background-color: #f8f8ff;\n`;\n\nexport function TaskBoard() {\n    const tasks = useSelector((state) => state.tasks.taskArray);\n    const meta = useSelector((state) => state.tasks.meta);\n    const dispatch = useDispatch();\n\n    const [task, setTask] = useState(\"\");\n\n    function submitTask(e) {\n        if (e.key === \"Enter\" && task.trim().length >= 3) {\n            let temp = task.trim().split(\" \");\n            let time = 0;\n            if (temp.length !== 1 && !isNaN(parseInt(temp[temp.length - 1]))) {\n                time = parseInt(temp.pop());\n            } else {\n                time = 20;\n            }\n            temp = temp.join(\" \");\n\n            let newTask = {\n                id: Math.floor(Math.random() * 10000),\n                globalKey: meta.globalKey,\n                content: temp,\n                time: time * 60,\n                remainingTime: time * 60,\n                isRunning: false,\n                isCompleted: false,\n                createdAt: new Date().toISOString(),\n            };\n            dispatch(create(newTask));\n            dispatch(incrementGlobalKey());\n            setTask(\"\");\n            e.target.value = \"\";\n            e.target.focus();\n        }\n    }\n\n    function handleOnDragEnd(result) {\n        if (!result.destination) return;\n\n        let items = [...tasks.map((i) => ({ ...i }))];\n        //let items = [...tasks]\n        // let x = JSON.stringify(items);\n        // items = JSON.parse(x);\n\n        const [reorderedItem] = items.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorderedItem);\n\n        let i = result.source.index;\n        let direction = result.destination.index > result.source.index; // direction true means moving right & swapping\n        while (i != result.destination.index) {\n            if (direction) {\n                items[i].globalKey = tasks[i].globalKey;\n                i++;\n            } else {\n                items[i].globalKey = tasks[i].globalKey;\n                i--;\n            }\n            if (i == result.destination.index) {\n                items[i].globalKey = tasks[i].globalKey;\n            }\n        }\n\n        dispatch(updateOrder(items));\n    }\n\n    function getFlipKey() {\n        let flipKey = \"\";\n        tasks.forEach((i) => {\n            flipKey += `${i.globalKey}`;\n        });\n        return flipKey;\n    }\n\n    // input has both onChange and onKeyDown - can be optimised by using one and combining\n\n    return (\n        <TaskBoardContainer>\n            <TaskInputContainer>\n                <TaskInputField type=\"text\" onChange={(e) => setTask(e.target.value)} onKeyDown={submitTask} />\n            </TaskInputContainer>\n            <DragDropContext onDragEnd={handleOnDragEnd}>\n                <Droppable droppableId=\"dropArea\">\n                    {(provided) => (\n                        <div {...provided.droppableProps} ref={provided.innerRef}>\n                            <Flipper flipKey={getFlipKey()}>\n                                {tasks.map((i, index) => (\n                                    <Draggable key={i.id} draggableId={`${i.id}`} index={index}>\n                                        {(provided2) => <TaskCard forwardRBDProvided={provided2} task={i} />}\n                                    </Draggable>\n                                ))}\n                                {provided.placeholder}\n                            </Flipper>\n                        </div>\n                    )}\n                </Droppable>\n            </DragDropContext>\n        </TaskBoardContainer>\n    );\n}\n","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js",["64","65","66","67"],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"68","replacedBy":"72"},{"ruleId":"70","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":13,"column":11,"nodeType":"76","messageId":"77","endLine":13,"endColumn":19},{"ruleId":"74","severity":1,"message":"78","line":15,"column":12,"nodeType":"76","messageId":"77","endLine":15,"endColumn":21},{"ruleId":"74","severity":1,"message":"79","line":15,"column":23,"nodeType":"76","messageId":"77","endLine":15,"endColumn":35},{"ruleId":"74","severity":1,"message":"80","line":3,"column":26,"nodeType":"76","messageId":"77","endLine":3,"endColumn":30},{"ruleId":"74","severity":1,"message":"81","line":5,"column":8,"nodeType":"76","messageId":"77","endLine":5,"endColumn":16},{"ruleId":"82","severity":1,"message":"83","line":18,"column":17,"nodeType":"84","messageId":"85","endLine":18,"endColumn":19},{"ruleId":"82","severity":1,"message":"83","line":23,"column":17,"nodeType":"84","messageId":"85","endLine":23,"endColumn":19},{"ruleId":"74","severity":1,"message":"86","line":235,"column":17,"nodeType":"76","messageId":"77","endLine":235,"endColumn":21},{"ruleId":"82","severity":1,"message":"87","line":86,"column":18,"nodeType":"84","messageId":"85","endLine":86,"endColumn":20},{"ruleId":"82","severity":1,"message":"83","line":94,"column":19,"nodeType":"84","messageId":"85","endLine":94,"endColumn":21},{"ruleId":"82","severity":1,"message":"87","line":15,"column":52,"nodeType":"84","messageId":"85","endLine":15,"endColumn":54},{"ruleId":"82","severity":1,"message":"87","line":22,"column":64,"nodeType":"84","messageId":"85","endLine":22,"endColumn":66},{"ruleId":"82","severity":1,"message":"83","line":117,"column":56,"nodeType":"84","messageId":"85","endLine":117,"endColumn":58},{"ruleId":"82","severity":1,"message":"83","line":163,"column":54,"nodeType":"84","messageId":"85","endLine":163,"endColumn":56},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],["88"],["89"],"no-unused-vars","'dispatch' is assigned a value but never used.","Identifier","unusedVar","'isFocusON' is assigned a value but never used.","'setIsFocusON' is assigned a value but never used.","'tick' is defined but never used.","'useTimer' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'time' is assigned a value but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]