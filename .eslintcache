[{"/home/pg07codes/Desktop/fokus/src/containers/App.js":"1","/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js":"2","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js":"3","/home/pg07codes/Desktop/fokus/src/serviceWorker.js":"4","/home/pg07codes/Desktop/fokus/src/index.js":"5","/home/pg07codes/Desktop/fokus/src/helpers/index.js":"6","/home/pg07codes/Desktop/fokus/src/store/index.js":"7","/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js":"8","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js":"9","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js":"10","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js":"11","/home/pg07codes/Desktop/fokus/src/components/customIcons/Globe.js":"12","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/Divider.js":"13"},{"size":416,"mtime":1612589662552,"results":"14","hashOfConfig":"15"},{"size":528,"mtime":1611252515979,"results":"16","hashOfConfig":"15"},{"size":7885,"mtime":1612791341906,"results":"17","hashOfConfig":"15"},{"size":5141,"mtime":1608877484447,"results":"18","hashOfConfig":"15"},{"size":651,"mtime":1608902523877,"results":"19","hashOfConfig":"15"},{"size":340,"mtime":1612282841002,"results":"20","hashOfConfig":"15"},{"size":214,"mtime":1612760411462,"results":"21","hashOfConfig":"15"},{"size":5729,"mtime":1612800960899,"results":"22","hashOfConfig":"15"},{"size":5025,"mtime":1612799152660,"results":"23","hashOfConfig":"15"},{"size":3771,"mtime":1612800620568,"results":"24","hashOfConfig":"15"},{"size":10995,"mtime":1612800167293,"results":"25","hashOfConfig":"15"},{"size":576,"mtime":1612677540821,"results":"26","hashOfConfig":"15"},{"size":859,"mtime":1612757785493,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"g1paqb",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pg07codes/Desktop/fokus/src/containers/App.js",[],"/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js",[],["60","61"],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js",["62","63","64","65","66"],"import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        taskArray: [],\n        meta: {\n            globalKey: 0,\n            completedTaskStartIndex: -1,\n            focussedTaskIndex: -1,\n        },\n    },\n    reducers: {\n        create: (tasks, { payload }) => {\n            tasks.taskArray.unshift(payload);\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\n        },\n        remove: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.filter((i) => {\n                if (i.id !== payload) return true;\n                else {\n                    if (!i.isCompleted) {\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\n                    } else if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length - 1) {\n                        tasks.meta.completedTaskStartIndex = -1;\n                    }\n                    return false;\n                }\n            });\n        },\n        updateTask: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.map((i) => (i.id === payload.id ? payload : i));\n        },\n        updateTaskContent: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.content = payload.updatedTaskContent;\n                }\n            });\n        },\n        updateTaskTime: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.remainingTime = payload.updatedTime * 60;\n                    i.time = payload.updatedTime * 60;\n                }\n            });\n        },\n        updateTaskTimeByVal:(tasks, { payload }) => {\n            tasks.taskArray[payload.focussedTaskIndex].remainingTime+=payload.val*60;\n            tasks.taskArray[payload.focussedTaskIndex].time+=payload.val*60;\n            if(tasks.taskArray[payload.focussedTaskIndex].remainingTime<0){\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime=0;\n            }\n            if(tasks.taskArray[payload.focussedTaskIndex].time<0){\n                tasks.taskArray[payload.focussedTaskIndex].time=0;\n            }\n        },\n        updateOrder: (tasks, { payload }) => {\n            tasks.taskArray = payload;\n        },\n\n        focusOnTask: (tasks, { payload }) => {\n            tasks.meta.focussedTaskIndex = payload;\n        },\n        resetFocussedTask: (tasks) => {\n            tasks.meta.focussedTaskIndex = -1;\n        },\n        tick: (tasks, { payload }) => {\n            --tasks.taskArray[payload].remainingTime;\n        },\n        resetTaskTimer: (tasks, { payload }) => {\n            tasks.taskArray[payload].isRunning = false;\n            tasks.taskArray[payload].remainingTime = tasks.taskArray[payload].time;\n        },\n        toggleIsRunning: (tasks, { payload }) => {\n            tasks.taskArray[payload].isRunning = !tasks.taskArray[payload].isRunning;\n        },\n\n        toggleIsCompleted: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.isCompleted = !i.isCompleted;\n                }\n            });\n        },\n        incrementGlobalKey: ({ meta }) => {\n            ++meta.globalKey;\n        },\n        rearrange: (tasks, { payload }) => {\n            let id = payload.id;\n\n            if (payload.markedAsComplete) {\n                if (tasks.meta.completedTaskStartIndex === -1) {\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                    let found = false;\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\n                        if (found) {\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        } else if (tasks.taskArray[i].id === id) {\n                            found = true;\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }\n                    }\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                } else {\n                    let task, idx;\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n                    let pos = -1;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    if (pos === -1) {\n                        tasks.taskArray.push(task);\n                    } else {\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.meta.completedTaskStartIndex -= 1;\n                }\n            } else {\n                if (tasks.meta.completedTaskStartIndex == 0) {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.taskArray.unshift(task);\n                    tasks.meta.completedTaskStartIndex = 1;\n                } else {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    let start = tasks.meta.completedTaskStartIndex - 1;\n                    let pos = -1;\n                    for (let i = start; i >= 0; i--) {\n                        if (tasks.taskArray[i].globalKey < task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    if (pos === -1) {\n                        tasks.taskArray.unshift(task);\n                    } else {\n                        pos++;\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.meta.completedTaskStartIndex += 1;\n                }\n\n                if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length) {\n                    tasks.meta.completedTaskStartIndex = -1;\n                }\n            }\n        },\n    },\n});\n\nexport const {\n    create,\n    remove,\n    updateTask,\n    updateTaskContent,\n    updateTaskTime,\n    updateTaskTimeByVal,\n    focusOnTask,\n    resetFocussedTask,\n    resetTaskTimer,\n    toggleIsRunning,\n    tick,\n    toggleIsCompleted,\n    updateOrder,\n    incrementGlobalKey,\n    rearrange,\n} = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n","/home/pg07codes/Desktop/fokus/src/serviceWorker.js",[],["67","68"],"/home/pg07codes/Desktop/fokus/src/index.js",[],"/home/pg07codes/Desktop/fokus/src/helpers/index.js",["69","70"],"export function formattedTimeString(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}:${secs}`;\n}\n\n","/home/pg07codes/Desktop/fokus/src/store/index.js",[],["71","72"],"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js",["73"],"import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { toggleIsRunning, resetTaskTimer, tick, updateTask, updateTaskTimeByVal } from \"../taskBoard/taskBoardSlice\";\nimport useTimer from \"../../hooks/useTimer\";\nimport { formattedTimeString } from \"../../helpers\";\nimport { CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { BsFillPlayFill, BsFillPauseFill } from \"react-icons/bs\";\nimport { ImLoop2 } from \"react-icons/im\";\nimport dingSound from \"./../../sounds/ding.mp3\";\n\nlet dingSoundElement = new Audio(dingSound);\n\nconst FocusBoardContainer = styled.div`\n    flex: 3 1 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    box-shadow: 0 4px 4px rgba(0, 0, 0, 0.2);\n    /* background-color: #f8f8ff; */\n`;\n\nconst FocussedTaskDiv = styled.div`\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    justify-content: space-around;\n    width: 400px;\n    height: 400px;\n    margin: 20px;\n    box-shadow: 0 0 6px rgba(0, 0, 2, 0.3);\n    /* background-color: #fffccc; */\n`;\n\nconst FocussedTaskTimer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 90%;\n    height: 40%;\n    /* background-color: #ffeaca; */\n`;\n\nconst TimerDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 100px;\n    height: 100px;\n    /* background-color: #ff1c1c; */\n    box-shadow: 0 0 6px rgba(0, 0, 0, 0.4);\n    border-radius: 50%;\n`;\n\nconst ButtonContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 40px;\n    height: 40px;\n    /* background-color: #ffaa1c; */\n    box-shadow: 0 0 2px rgba(0, 0, 0, 0.4);\n    border-radius: 50%;\n    margin: 15px;\n`;\n\nconst FocussedTaskContent = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n    width: 90%;\n    height: 30%;\n    word-wrap: break-word;\n    /* background-color: #ffea1c; */\n`;\n\nconst FocussedTaskController = styled.div`\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n    width: 90%;\n    height: 20%;\n    /* background-color: #efaaa1; */\n`;\n\nexport function FocusBoard() {\n    const focussedTaskIndex = useSelector((state) => state.tasks.meta.focussedTaskIndex);\n    let focussedTask = useSelector((state) => (focussedTaskIndex !== -1 ? state.tasks.taskArray[focussedTaskIndex] : null));\n    const dispatch = useDispatch();\n    const delay = 1000;\n    useTimer(\n        () => {\n            if (focussedTask === null) return;\n            else if (focussedTask.remainingTime > 0) {\n                dispatch(tick(focussedTaskIndex));\n            } else if (focussedTask.remainingTime === 0) {\n                dispatch(toggleIsRunning(focussedTaskIndex));\n                dingSoundElement.play();\n            }\n        },\n        focussedTask !== null && focussedTask.isRunning ? delay : null\n    );\n\n    function updateTaskTimeHandler(val) {\n        if (focussedTask.isCompleted) return;\n        if (focussedTask.isRunning) dispatch(toggleIsRunning(focussedTaskIndex));\n        dispatch(updateTaskTimeByVal({ focussedTaskIndex, val }));\n    }\n\n    return (\n        <FocusBoardContainer>\n            {focussedTask != null && (\n                <div>\n                    <FocussedTaskDiv>\n                        <FocussedTaskTimer>\n                            <ButtonContainer onClick={() => updateTaskTimeHandler(-5)}>\n                                <h4>-5</h4>\n                            </ButtonContainer>\n                            <div style={{ width: 140, height: 140 }}>\n                                <CircularProgressbarWithChildren\n                                    value={focussedTask.time !== 0 ? Math.floor((focussedTask.remainingTime / focussedTask.time) * 100) : 0}\n                                    styles={buildStyles({\n                                        strokeLinecap: \"butt\",\n                                        pathColor: \"black\",\n                                        trailColor: \"white\",\n                                    })}\n                                >\n                                    <TimerDiv>\n                                        <h3>{formattedTimeString(focussedTask.remainingTime)}</h3>\n                                    </TimerDiv>\n                                </CircularProgressbarWithChildren>\n                            </div>\n                            <ButtonContainer onClick={() => updateTaskTimeHandler(5)}>\n                                <h4>+5</h4>\n                            </ButtonContainer>\n                        </FocussedTaskTimer>\n                        <FocussedTaskContent>\n                            <h4 style={{ minWidth: 0 }}>{focussedTask.content}</h4>\n                        </FocussedTaskContent>\n                        <FocussedTaskController>\n                            <ButtonContainer onClick={() => dispatch(toggleIsRunning(focussedTaskIndex))} style={{ fontSize: \"1.5em\" }}>\n                                {focussedTask.isRunning ? <BsFillPauseFill /> : <BsFillPlayFill />}\n                            </ButtonContainer>\n                            <ButtonContainer onClick={() => dispatch(resetTaskTimer(focussedTaskIndex))}>\n                                <ImLoop2 />\n                            </ButtonContainer>\n                        </FocussedTaskController>\n                    </FocussedTaskDiv>\n                </div>\n            )}\n        </FocusBoardContainer>\n    );\n}\n","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js",["74","75","76"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js",["77","78"],"/home/pg07codes/Desktop/fokus/src/components/customIcons/Globe.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/Divider.js",[],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":16,"column":52,"nodeType":"85","messageId":"86","endLine":16,"endColumn":54},{"ruleId":"83","severity":1,"message":"84","line":23,"column":64,"nodeType":"85","messageId":"86","endLine":23,"endColumn":66},{"ruleId":"83","severity":1,"message":"87","line":24,"column":67,"nodeType":"85","messageId":"86","endLine":24,"endColumn":69},{"ruleId":"83","severity":1,"message":"87","line":137,"column":56,"nodeType":"85","messageId":"86","endLine":137,"endColumn":58},{"ruleId":"83","severity":1,"message":"87","line":180,"column":56,"nodeType":"85","messageId":"86","endLine":180,"endColumn":58},{"ruleId":"79","replacedBy":"88"},{"ruleId":"81","replacedBy":"89"},{"ruleId":"83","severity":1,"message":"87","line":5,"column":14,"nodeType":"85","messageId":"86","endLine":5,"endColumn":16},{"ruleId":"83","severity":1,"message":"87","line":10,"column":14,"nodeType":"85","messageId":"86","endLine":10,"endColumn":16},{"ruleId":"79","replacedBy":"90"},{"ruleId":"81","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":4,"column":49,"nodeType":"94","messageId":"95","endLine":4,"endColumn":59},{"ruleId":"92","severity":1,"message":"96","line":1,"column":17,"nodeType":"94","messageId":"95","endLine":1,"endColumn":25},{"ruleId":"83","severity":1,"message":"84","line":35,"column":18,"nodeType":"85","messageId":"86","endLine":35,"endColumn":20},{"ruleId":"83","severity":1,"message":"87","line":43,"column":19,"nodeType":"85","messageId":"86","endLine":43,"endColumn":21},{"ruleId":"92","severity":1,"message":"97","line":2,"column":23,"nodeType":"94","messageId":"95","endLine":2,"endColumn":34},{"ruleId":"92","severity":1,"message":"98","line":175,"column":17,"nodeType":"94","messageId":"95","endLine":175,"endColumn":21},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.",["99"],["100"],["99"],["100"],"no-unused-vars","'updateTask' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useSelector' is defined but never used.","'temp' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]