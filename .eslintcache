[{"/home/pg07codes/Desktop/fokus/src/containers/App.js":"1","/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js":"2","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js":"3","/home/pg07codes/Desktop/fokus/src/serviceWorker.js":"4","/home/pg07codes/Desktop/fokus/src/index.js":"5","/home/pg07codes/Desktop/fokus/src/helpers/index.js":"6","/home/pg07codes/Desktop/fokus/src/store/index.js":"7","/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js":"8","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js":"9","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js":"10","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js":"11","/home/pg07codes/Desktop/fokus/src/components/customIcons/Globe.js":"12","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/Divider.js":"13"},{"size":416,"mtime":1612589662552,"results":"14","hashOfConfig":"15"},{"size":528,"mtime":1611252515979,"results":"16","hashOfConfig":"15"},{"size":7318,"mtime":1612760511657,"results":"17","hashOfConfig":"15"},{"size":5141,"mtime":1608877484447,"results":"18","hashOfConfig":"15"},{"size":651,"mtime":1608902523877,"results":"19","hashOfConfig":"15"},{"size":340,"mtime":1612282841002,"results":"20","hashOfConfig":"15"},{"size":214,"mtime":1612760411462,"results":"21","hashOfConfig":"15"},{"size":5779,"mtime":1612754854487,"results":"22","hashOfConfig":"15"},{"size":5070,"mtime":1612755272144,"results":"23","hashOfConfig":"15"},{"size":3813,"mtime":1612753829504,"results":"24","hashOfConfig":"15"},{"size":11184,"mtime":1612771668125,"results":"25","hashOfConfig":"15"},{"size":576,"mtime":1612677540821,"results":"26","hashOfConfig":"15"},{"size":859,"mtime":1612757785493,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"g1paqb",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pg07codes/Desktop/fokus/src/containers/App.js",[],"/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js",[],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js",["58","59","60","61","62"],"/home/pg07codes/Desktop/fokus/src/serviceWorker.js",[],["63","64"],"/home/pg07codes/Desktop/fokus/src/index.js",[],["65","66"],"/home/pg07codes/Desktop/fokus/src/helpers/index.js",["67","68"],"export function formattedTimeString(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}:${secs}`;\n}\n\n","/home/pg07codes/Desktop/fokus/src/store/index.js",[],"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js",[],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js",["69","70","71","72"],"import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateOrder } from \"./taskBoardSlice\";\nimport TaskCard from \"./../../components/TaskBoard/TaskCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Flipper } from \"react-flip-toolkit\";\nimport { focusOnTask } from \"./taskBoardSlice\";\nimport styled from \"styled-components\";\nimport TaskInput from \"./../../components/TaskBoard/TaskInput\";\nimport Divider from \"./../../components/TaskBoard/Divider\";\nimport { BsSubtract } from \"react-icons/bs\";\n\nconst TaskBoardContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    flex: 3 1 0;\n`;\n\nexport function TaskBoard() {\n    const tasks = useSelector((state) => state.tasks.taskArray);\n    const meta = useSelector((state) => state.tasks.meta);\n    let focussedTask = meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex] : null;\n    const dispatch = useDispatch();\n\n    function handleOnDragEnd(result) {\n        if (!result.destination) return;\n\n        let items = [...tasks.map((i) => ({ ...i }))];\n        const [reorderedItem] = items.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorderedItem);\n\n        let i = result.source.index;\n        let direction = result.destination.index > result.source.index; // direction true means moving right & swapping\n        // below is logic to reset globalKeys to maintain correct sort order.\n        while (i != result.destination.index) {\n            if (direction) {\n                items[i].globalKey = tasks[i].globalKey;\n                i++;\n            } else {\n                items[i].globalKey = tasks[i].globalKey;\n                i--;\n            }\n            if (i == result.destination.index) {\n                items[i].globalKey = tasks[i].globalKey;\n            }\n        }\n\n        if (meta.focussedTaskIndex !== -1) {\n            let greaterIndex = Math.max(result.destination.index, result.source.index);\n            let smallerIndex = Math.min(result.destination.index, result.source.index);\n\n            if (result.source.index === meta.focussedTaskIndex) {\n                dispatch(focusOnTask(result.destination.index));\n            } else if (meta.focussedTaskIndex >= smallerIndex && meta.focussedTaskIndex <= greaterIndex) {\n                if (result.destination.index > result.source.index) {\n                    dispatch(focusOnTask(meta.focussedTaskIndex - 1)); // -1\n                } else {\n                    dispatch(focusOnTask(meta.focussedTaskIndex + 1)); // +1\n                }\n            }\n        }\n\n        dispatch(updateOrder(items)); // order is imp. focus then updateOrder\n    }\n\n    function getFlipKey() {\n        let flipKey = \"\";\n        tasks.forEach((i) => {\n            flipKey += `${i.globalKey}`;\n        });\n        flipKey += `${meta.completedTaskStartIndex}`;\n        return flipKey;\n    }\n\n    function isFocussed(id) {\n        if (focussedTask !== null && focussedTask.id === id) return true;\n        return false;\n    }\n\n    // input has both onChange and onKeyDown - can be optimised by using one and combining\n\n    return (\n        <TaskBoardContainer>\n            <TaskInput focussedTaskIndex={meta.focussedTaskIndex}/>\n\n            <Flipper flipKey={getFlipKey()}>\n                <DragDropContext onDragEnd={handleOnDragEnd}>\n                    <Droppable droppableId=\"dropArea\">\n                        {(provided) => (\n                            <div {...provided.droppableProps} ref={provided.innerRef}>\n                                {tasks.map((i, index) =>\n                                    !i.isCompleted ? (\n                                        <Draggable isDragDisabled={i.isCompleted} key={i.id} draggableId={`${i.id}`} index={index}>\n                                            {(provided2) => (\n                                                <TaskCard focussedTaskIndex={meta.focussedTaskIndex} taskIndex={index} forwardRBDProvided={provided2} task={i} isFocussed={isFocussed(i.id)} />\n                                            )}\n                                        </Draggable>\n                                    ) : (\n                                        \"\"\n                                    )\n                                )}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n\n                {meta.completedTaskStartIndex !== -1 && meta.completedTaskStartIndex !== 0 && <Divider />}\n\n                {tasks.map((i, index) =>\n                    i.isCompleted ? (\n                        <TaskCard focussedTaskIndex={meta.focussedTaskIndex} taskIndex={index} key={i.id} forwardRBDProvided={{ innerRef: null }} task={i} isFocussed={isFocussed(i.id)} />\n                    ) : (\n                        \"\"\n                    )\n                )}\n            </Flipper>\n        </TaskBoardContainer>\n    );\n}\n","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js",["73","74"],"/home/pg07codes/Desktop/fokus/src/components/customIcons/Globe.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/Divider.js",[],{"ruleId":"75","severity":1,"message":"76","line":16,"column":52,"nodeType":"77","messageId":"78","endLine":16,"endColumn":54},{"ruleId":"75","severity":1,"message":"76","line":23,"column":64,"nodeType":"77","messageId":"78","endLine":23,"endColumn":66},{"ruleId":"75","severity":1,"message":"79","line":24,"column":67,"nodeType":"77","messageId":"78","endLine":24,"endColumn":69},{"ruleId":"75","severity":1,"message":"79","line":127,"column":56,"nodeType":"77","messageId":"78","endLine":127,"endColumn":58},{"ruleId":"75","severity":1,"message":"79","line":170,"column":56,"nodeType":"77","messageId":"78","endLine":170,"endColumn":58},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"80","replacedBy":"84"},{"ruleId":"82","replacedBy":"85"},{"ruleId":"75","severity":1,"message":"79","line":5,"column":14,"nodeType":"77","messageId":"78","endLine":5,"endColumn":16},{"ruleId":"75","severity":1,"message":"79","line":10,"column":14,"nodeType":"77","messageId":"78","endLine":10,"endColumn":16},{"ruleId":"86","severity":1,"message":"87","line":1,"column":17,"nodeType":"88","messageId":"89","endLine":1,"endColumn":25},{"ruleId":"86","severity":1,"message":"90","line":11,"column":10,"nodeType":"88","messageId":"89","endLine":11,"endColumn":20},{"ruleId":"75","severity":1,"message":"76","line":36,"column":18,"nodeType":"77","messageId":"78","endLine":36,"endColumn":20},{"ruleId":"75","severity":1,"message":"79","line":44,"column":19,"nodeType":"77","messageId":"78","endLine":44,"endColumn":21},{"ruleId":"86","severity":1,"message":"91","line":2,"column":23,"nodeType":"88","messageId":"89","endLine":2,"endColumn":34},{"ruleId":"86","severity":1,"message":"92","line":176,"column":17,"nodeType":"88","messageId":"89","endLine":176,"endColumn":21},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-native-reassign",["93"],"no-negated-in-lhs",["94"],["93"],["94"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'BsSubtract' is defined but never used.","'useSelector' is defined but never used.","'temp' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]