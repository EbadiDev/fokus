[{"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js":"1","/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js":"2","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/FocussedTask.js":"3","/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js":"4","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/TaskSummary.js":"5","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyFocusBox.js":"6","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyTaskSummary.js":"7","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js":"8","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskLabelSelect.js":"9","/home/pg07codes/Desktop/fokus/src/containers/App.js":"10","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js":"11","/home/pg07codes/Desktop/fokus/src/helpers/index.js":"12","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js":"13","/home/pg07codes/Desktop/fokus/src/serviceWorker.js":"14","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js":"15","/home/pg07codes/Desktop/fokus/src/containers/menu/Menu.js":"16","/home/pg07codes/Desktop/fokus/src/index.js":"17"},{"size":1850,"mtime":1613219133677,"results":"18","hashOfConfig":"19"},{"size":1009,"mtime":1613033460357,"results":"20","hashOfConfig":"19"},{"size":5825,"mtime":1613113489381,"results":"21","hashOfConfig":"19"},{"size":528,"mtime":1611252515979,"results":"22","hashOfConfig":"19"},{"size":2564,"mtime":1613218557372,"results":"23","hashOfConfig":"19"},{"size":2990,"mtime":1613063915917,"results":"24","hashOfConfig":"19"},{"size":1046,"mtime":1613072484728,"results":"25","hashOfConfig":"19"},{"size":13958,"mtime":1613218060868,"results":"26","hashOfConfig":"19"},{"size":1304,"mtime":1613218352233,"results":"27","hashOfConfig":"19"},{"size":483,"mtime":1613049239140,"results":"28","hashOfConfig":"19"},{"size":5157,"mtime":1613212541884,"results":"29","hashOfConfig":"19"},{"size":1129,"mtime":1613069072186,"results":"30","hashOfConfig":"19"},{"size":9796,"mtime":1613212366212,"results":"31","hashOfConfig":"19"},{"size":5141,"mtime":1608877484447,"results":"32","hashOfConfig":"19"},{"size":6215,"mtime":1613219128909,"results":"33","hashOfConfig":"19"},{"size":899,"mtime":1613220617334,"results":"34","hashOfConfig":"19"},{"size":651,"mtime":1608902523877,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},"g1paqb",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js",["76"],"import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { FocussedTask } from \"./../../components/FocusBoard/FocussedTask\";\nimport { EmptyFocusBox } from \"./../../components/FocusBoard/EmptyFocusBox\";\nimport { TaskSummary } from \"./../../components/FocusBoard/TaskSummary\";\nimport { EmptyTaskSummary } from \"../../components/FocusBoard/EmptyTaskSummary\";\n\nconst FocusBoardContainer = styled.div`\n    flex: 1 1 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content:center;\n`;\nconst TaskSummaryContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    position: relative;\n    width: 276px;\n    height: 90px;\n    margin: 20px;\n    border-radius: 10px;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    background-color: #fff;\n`;\n\nconst FocussedTaskContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    position: relative;\n    width: 276px;\n    height: 346px;\n    margin: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.5);\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.5);\n    background-color: #f7f7fa;\n`;\n\n\nexport function FocusBoard() {\n    const focussedTaskIndex = useSelector((state) => state.tasks.meta.focussedTaskIndex);\n    const totalTasksCount = useSelector((s) => s.tasks.taskArray.length);\n    return (\n        <FocusBoardContainer>\n            <TaskSummaryContainer>{totalTasksCount !== 0 ? <TaskSummary /> : <EmptyTaskSummary />}</TaskSummaryContainer>\n            <FocussedTaskContainer>{focussedTaskIndex !== -1 ? <FocussedTask /> : <EmptyFocusBox />}</FocussedTaskContainer>\n        </FocusBoardContainer>\n    );\n}\n",["77","78"],"/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js",[],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/FocussedTask.js",["79"],"import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled, { css } from \"styled-components\";\nimport { toggleIsRunning, tick, updateTaskTimeByVal, resetTaskTimer } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport useTimer from \"../../hooks/useTimer\";\nimport { CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { ResetIcon } from \"./../../components/customIcons\";\nimport dingSound from \"./../../sounds/ding.mp3\";\nimport { BsFillPauseFill, BsFillPlayFill } from \"react-icons/bs\";\nimport { formattedTimeStringv2 } from \"./../../helpers\";\n\nlet dingSoundElement = new Audio(dingSound);\n\nconst FocussedTaskDiv = styled.div`\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n`;\n\nconst FocussedTaskTimer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 50%;\n`;\n\nconst CountdownTimerDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 90px;\n    height: 90px;\n    background-color: #fff;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    border-radius: 50%;\n    & > p {\n        font-size: 0.9em;\n        font-weight: bold;\n        color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#000\")};\n    }\n`;\n\nconst PlayPauseButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 55px;\n    height: 55px;\n    background-color: #0000cd;\n    border-radius: 50%;\n    margin: 10px 20px;\n    box-shadow: 0 1px 7px rgba(0, 0, 0, 0.4);\n    -webkit-box-shadow: 0 1px 7px rgba(0, 0, 0, 0.4);\n    svg {\n        color: #fff;\n        font-size: 1.8em;\n        margin-left:${p=>p.isPlayBtn?\"3px\":\"0\"};\n    }\n    cursor: pointer;\n`;\n\nconst UpdateTimeButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 30px;\n    height: 30px;\n    cursor: pointer;\n`;\n\nconst ResetButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    background-color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#0000cd\")};\n    border-radius: 50%;\n    width: 30px;\n    height: 30px;\n    top: 7px;\n    right: 7px;\n    cursor: ${(p) => (p.isDisabled ? \"default\" : \"pointer\")};\n    svg {\n        color: #fff;\n        width:20px;\n    }\n`;\n\nconst FocussedTaskContent = styled.div`\n    display: flex;\n    justify-content: center;\n    text-align: center;\n    margin: 5px;\n    height: 30%;\n    width: 90%;\n    word-wrap: break-word;\n    p {\n        min-width: 0;\n        font-weight: bold;\n        margin: 3px;\n    }\n`;\n\nconst FocussedTaskController = styled.div`\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n    height: 20%;\n    margin-bottom: 10px;\n`;\n\nexport function FocussedTask() {\n    const focussedTaskIndex = useSelector((state) => state.tasks.meta.focussedTaskIndex);\n    let focussedTask = useSelector((state) => (focussedTaskIndex !== -1 ? state.tasks.taskArray[focussedTaskIndex] : null));\n    const dispatch = useDispatch();\n    const delay = 1000;\n    useTimer(\n        () => {\n            if (focussedTask === null) return;\n            else if (focussedTask.remainingTime > 0) {\n                dispatch(tick(focussedTaskIndex));\n            } else if (focussedTask.remainingTime === 0) {\n                dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n                dingSoundElement.play();\n            }\n        },\n        focussedTask !== null && focussedTask.isRunning ? delay : null\n    );\n\n    function updateTaskTimeHandler(val) {\n        if (focussedTask.isCompleted) return;\n        if (focussedTask.isRunning) dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n        dispatch(updateTaskTimeByVal({ focussedTaskIndex, val }));\n    }\n\n    return (\n        <FocussedTaskDiv>\n            <FocussedTaskTimer>\n                <div style={{ width: 120, height: 120 }}>\n                    <CircularProgressbarWithChildren\n                        value={focussedTask.time !== 0 ? Math.floor((focussedTask.remainingTime / focussedTask.time) * 100) : 0}\n                        styles={buildStyles({\n                            strokeLinecap: \"butt\",\n                            pathColor: \"#0000cd\",\n                            trailColor: \"#EFF7FF\",\n                        })}\n                        strokeWidth={7}\n                    >\n                        <CountdownTimerDiv>\n                            <p>{formattedTimeStringv2(focussedTask.remainingTime)}</p>\n                        </CountdownTimerDiv>\n                    </CircularProgressbarWithChildren>\n                </div>\n            </FocussedTaskTimer>\n            <FocussedTaskContent>\n                <p>{focussedTask.content}</p>\n            </FocussedTaskContent>\n            <FocussedTaskController>\n                <UpdateTimeButtonDiv onClick={() => updateTaskTimeHandler(-5)}>\n                    <h4>-5</h4>\n                </UpdateTimeButtonDiv>\n                <PlayPauseButtonDiv isPlayBtn={!focussedTask.isRunning} onClick={() => dispatch(toggleIsRunning({ idx: focussedTaskIndex }))}>\n                    {focussedTask.isRunning ? <BsFillPauseFill /> : <BsFillPlayFill />}\n                </PlayPauseButtonDiv>\n\n                <UpdateTimeButtonDiv onClick={() => updateTaskTimeHandler(5)}>\n                    <h4>+5</h4>\n                </UpdateTimeButtonDiv>\n            </FocussedTaskController>\n            <ResetButtonDiv onClick={() => dispatch(resetTaskTimer(focussedTaskIndex))}>\n                <ResetIcon />\n            </ResetButtonDiv>\n        </FocussedTaskDiv>\n    );\n}\n",["80","81"],"/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js",[],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/TaskSummary.js",["82"],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyFocusBox.js",[],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyTaskSummary.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js",["83"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskLabelSelect.js",["84"],"/home/pg07codes/Desktop/fokus/src/containers/App.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js",[],"/home/pg07codes/Desktop/fokus/src/helpers/index.js",["85","86","87","88"],"export function formattedTimeString(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}:${secs}`;\n}\n\nexport function formattedTimeStringv2(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}m ${secs}s`;\n}\n\nexport function getFormattedDate() {\n    let d = new Date();\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    return {\n        day: days[d.getDay()],\n        month: months[d.getMonth()],\n        date: d.getDate(),\n        year: d.getFullYear(),\n    };\n}\n","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js",["89","90","91","92","93"],"import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        taskArray: [],\n        labels: {\n            work:{\n                color:\"#de1738\",\n                count:0,\n            },\n            personal:{\n                color:\"#89CFF0\",\n                count:0\n            },\n            fitness:{\n                color:\"#76ff7a\",\n                count:0\n            },\n            metime:{\n                color:\"#7442c8\",\n                count:0\n            },\n            explore:{\n                color:\"#efc0fe\",\n                count:0\n            }\n        },\n        meta: {\n            globalKey: 0,\n            completedTaskStartIndex: -1,\n            focussedTaskIndex: -1,\n            showCompletedTasks: true,\n            completedTasksCount: 0,\n        },\n    },\n    reducers: {\n        create: (tasks, { payload }) => {\n            tasks.taskArray.unshift(payload);\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\n        },\n        remove: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.filter((i) => {\n                if (i.id !== payload) return true;\n                else {\n                    if (!i.isCompleted) {\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\n                    } else {\n                        tasks.meta.completedTasksCount--;\n                        if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length - 1) {\n                            tasks.meta.completedTaskStartIndex = -1;\n                        }\n                    }\n                    return false;\n                }\n            });\n        },\n        updateTask: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.map((i) => (i.id === payload.id ? payload : i));\n        },\n        updateTaskContent: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.content = payload.updatedTaskContent;\n                }\n            });\n        },\n        updateTaskLabel:({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.label = payload.label;\n                }\n            });\n        },\n        updateTaskTime: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.remainingTime = payload.updatedTime * 60;\n                    i.time = payload.updatedTime * 60;\n                }\n            });\n        },\n        updateTaskTimeByVal: (tasks, { payload }) => {\n            tasks.taskArray[payload.focussedTaskIndex].remainingTime += payload.val * 60;\n            tasks.taskArray[payload.focussedTaskIndex].time += payload.val * 60;\n            if (tasks.taskArray[payload.focussedTaskIndex].remainingTime < 0) {\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\n            }\n            if (tasks.taskArray[payload.focussedTaskIndex].time < 0) {\n                tasks.taskArray[payload.focussedTaskIndex].time = 0;\n            }\n        },\n        updateOrder: (tasks, { payload }) => {\n            tasks.taskArray = payload;\n        },\n\n        focusOnTask: (tasks, { payload }) => {\n            tasks.meta.focussedTaskIndex = payload;\n        },\n        resetFocussedTask: (tasks) => {\n            tasks.meta.focussedTaskIndex = -1;\n        },\n        tick: (tasks, { payload }) => {\n            --tasks.taskArray[payload].remainingTime;\n        },\n        resetTaskTimer: (tasks, { payload }) => {\n            tasks.taskArray[payload].isRunning = false;\n            tasks.taskArray[payload].remainingTime = tasks.taskArray[payload].time;\n        },\n        toggleIsRunning: (tasks, { payload }) => {\n            if (payload.val !== undefined) tasks.taskArray[payload.idx].isRunning = payload.val;\n            else tasks.taskArray[payload.idx].isRunning = !tasks.taskArray[payload.idx].isRunning;\n        },\n        toggleShowCompletedTasks: (tasks) => {\n            tasks.meta.showCompletedTasks = !tasks.meta.showCompletedTasks;\n        },\n        toggleIsCompleted: (tasks, { payload }) => {\n            tasks.taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.isCompleted ? --tasks.meta.completedTasksCount : ++tasks.meta.completedTasksCount;\n                    i.isCompleted = !i.isCompleted;\n                }\n            });\n        },\n        clearCompletedTasks: (tasks) => {\n            if (tasks.meta.completedTaskStartIndex !== -1) {\n                tasks.taskArray.length = tasks.meta.completedTaskStartIndex;\n                tasks.meta.completedTaskStartIndex = -1;\n                tasks.meta.completedTasksCount = 0;\n            }\n        },\n        updateLabelCount:(tasks, {payload}) => {\n            if(payload.oldLabel!==null)tasks.labels[payload.oldLabel].count--;\n            if(payload.newLabel!==null)tasks.labels[payload.newLabel].count++;\n        },\n        incrementGlobalKey: ({ meta }) => {\n            ++meta.globalKey;\n        },\n        rearrange: (tasks, { payload }) => {\n            let id = payload.id;\n\n            if (payload.markedAsComplete) {\n                if (tasks.meta.completedTaskStartIndex === -1) {\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                    let found = false;\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\n                        if (found) {\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        } else if (tasks.taskArray[i].id === id) {\n                            found = true;\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }\n                    }\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                } else {\n                    let task, idx;\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n                    let pos = -1;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    if (pos === -1) {\n                        tasks.taskArray.push(task);\n                    } else {\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.meta.completedTaskStartIndex -= 1;\n                }\n            } else {\n                if (tasks.meta.completedTaskStartIndex == 0) {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.taskArray.unshift(task);\n                    tasks.meta.completedTaskStartIndex = 1;\n                } else {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    let start = tasks.meta.completedTaskStartIndex - 1;\n                    let pos = -1;\n                    for (let i = start; i >= 0; i--) {\n                        if (tasks.taskArray[i].globalKey < task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    if (pos === -1) {\n                        tasks.taskArray.unshift(task);\n                    } else {\n                        pos++;\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.meta.completedTaskStartIndex += 1;\n                }\n\n                if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length) {\n                    tasks.meta.completedTaskStartIndex = -1;\n                }\n            }\n        },\n    },\n});\n\nexport const {\n    create,\n    remove,\n    updateTask,\n    updateTaskContent,\n    updateTaskLabel,\n    updateTaskTime,\n    updateTaskTimeByVal,\n    focusOnTask,\n    resetFocussedTask,\n    tick,\n    resetTaskTimer,\n    toggleIsRunning,\n    toggleShowCompletedTasks,\n    toggleIsCompleted,\n    clearCompletedTasks,\n    updateOrder,\n    updateLabelCount,\n    incrementGlobalKey,\n    rearrange,\n} = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n","/home/pg07codes/Desktop/fokus/src/serviceWorker.js",[],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js",["94","95","96"],"/home/pg07codes/Desktop/fokus/src/containers/menu/Menu.js",[],"/home/pg07codes/Desktop/fokus/src/index.js",[],{"ruleId":"97","severity":1,"message":"98","line":2,"column":23,"nodeType":"99","messageId":"100","endLine":2,"endColumn":34},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"97","severity":1,"message":"105","line":3,"column":18,"nodeType":"99","messageId":"100","endLine":3,"endColumn":21},{"ruleId":"101","replacedBy":"106"},{"ruleId":"103","replacedBy":"107"},{"ruleId":"97","severity":1,"message":"98","line":2,"column":23,"nodeType":"99","messageId":"100","endLine":2,"endColumn":34},{"ruleId":"97","severity":1,"message":"108","line":210,"column":17,"nodeType":"99","messageId":"100","endLine":210,"endColumn":21},{"ruleId":"97","severity":1,"message":"98","line":2,"column":23,"nodeType":"99","messageId":"100","endLine":2,"endColumn":34},{"ruleId":"109","severity":1,"message":"110","line":5,"column":14,"nodeType":"111","messageId":"112","endLine":5,"endColumn":16},{"ruleId":"109","severity":1,"message":"110","line":10,"column":14,"nodeType":"111","messageId":"112","endLine":10,"endColumn":16},{"ruleId":"109","severity":1,"message":"110","line":23,"column":14,"nodeType":"111","messageId":"112","endLine":23,"endColumn":16},{"ruleId":"109","severity":1,"message":"110","line":28,"column":14,"nodeType":"111","messageId":"112","endLine":28,"endColumn":16},{"ruleId":"109","severity":1,"message":"113","line":40,"column":52,"nodeType":"111","messageId":"112","endLine":40,"endColumn":54},{"ruleId":"109","severity":1,"message":"113","line":47,"column":64,"nodeType":"111","messageId":"112","endLine":47,"endColumn":66},{"ruleId":"109","severity":1,"message":"110","line":50,"column":64,"nodeType":"111","messageId":"112","endLine":50,"endColumn":66},{"ruleId":"109","severity":1,"message":"110","line":186,"column":56,"nodeType":"111","messageId":"112","endLine":186,"endColumn":58},{"ruleId":"109","severity":1,"message":"110","line":229,"column":56,"nodeType":"111","messageId":"112","endLine":229,"endColumn":58},{"ruleId":"97","severity":1,"message":"114","line":1,"column":17,"nodeType":"99","messageId":"100","endLine":1,"endColumn":25},{"ruleId":"109","severity":1,"message":"113","line":39,"column":18,"nodeType":"111","messageId":"112","endLine":39,"endColumn":20},{"ruleId":"109","severity":1,"message":"110","line":47,"column":19,"nodeType":"111","messageId":"112","endLine":47,"endColumn":21},"no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","no-native-reassign",["115"],"no-negated-in-lhs",["116"],"'css' is defined but never used.",["115"],["116"],"'temp' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]