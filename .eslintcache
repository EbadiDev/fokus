[{"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js":"1","/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js":"2","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/FocussedTask.js":"3","/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js":"4","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/TaskSummary.js":"5","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyFocusBox.js":"6","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyTaskSummary.js":"7","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js":"8","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskLabelSelect.js":"9","/home/pg07codes/Desktop/fokus/src/containers/App.js":"10","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js":"11","/home/pg07codes/Desktop/fokus/src/helpers/index.js":"12","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js":"13","/home/pg07codes/Desktop/fokus/src/serviceWorker.js":"14","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js":"15","/home/pg07codes/Desktop/fokus/src/containers/menu/Menu.js":"16"},{"size":1822,"mtime":1613157224159,"results":"17","hashOfConfig":"18"},{"size":1009,"mtime":1613033460357,"results":"19","hashOfConfig":"18"},{"size":5825,"mtime":1613113489381,"results":"20","hashOfConfig":"18"},{"size":528,"mtime":1611252515979,"results":"21","hashOfConfig":"18"},{"size":2563,"mtime":1613071971307,"results":"22","hashOfConfig":"18"},{"size":2990,"mtime":1613063915917,"results":"23","hashOfConfig":"18"},{"size":1046,"mtime":1613072484728,"results":"24","hashOfConfig":"18"},{"size":13906,"mtime":1613212870699,"results":"25","hashOfConfig":"18"},{"size":1330,"mtime":1613209366121,"results":"26","hashOfConfig":"18"},{"size":483,"mtime":1613049239140,"results":"27","hashOfConfig":"18"},{"size":5157,"mtime":1613212541884,"results":"28","hashOfConfig":"18"},{"size":1129,"mtime":1613069072186,"results":"29","hashOfConfig":"18"},{"size":9796,"mtime":1613212366212,"results":"30","hashOfConfig":"18"},{"size":5141,"mtime":1608877484447,"results":"31","hashOfConfig":"18"},{"size":6215,"mtime":1613071737031,"results":"32","hashOfConfig":"18"},{"size":328,"mtime":1612977328497,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"g1paqb",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js",["69"],"/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js",[],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/FocussedTask.js",["70"],"import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled, { css } from \"styled-components\";\nimport { toggleIsRunning, tick, updateTaskTimeByVal, resetTaskTimer } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport useTimer from \"../../hooks/useTimer\";\nimport { CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { ResetIcon } from \"./../../components/customIcons\";\nimport dingSound from \"./../../sounds/ding.mp3\";\nimport { BsFillPauseFill, BsFillPlayFill } from \"react-icons/bs\";\nimport { formattedTimeStringv2 } from \"./../../helpers\";\n\nlet dingSoundElement = new Audio(dingSound);\n\nconst FocussedTaskDiv = styled.div`\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n`;\n\nconst FocussedTaskTimer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 50%;\n`;\n\nconst CountdownTimerDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 90px;\n    height: 90px;\n    background-color: #fff;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    border-radius: 50%;\n    & > p {\n        font-size: 0.9em;\n        font-weight: bold;\n        color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#000\")};\n    }\n`;\n\nconst PlayPauseButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 55px;\n    height: 55px;\n    background-color: #0000cd;\n    border-radius: 50%;\n    margin: 10px 20px;\n    box-shadow: 0 1px 7px rgba(0, 0, 0, 0.4);\n    -webkit-box-shadow: 0 1px 7px rgba(0, 0, 0, 0.4);\n    svg {\n        color: #fff;\n        font-size: 1.8em;\n        margin-left:${p=>p.isPlayBtn?\"3px\":\"0\"};\n    }\n    cursor: pointer;\n`;\n\nconst UpdateTimeButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 30px;\n    height: 30px;\n    cursor: pointer;\n`;\n\nconst ResetButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    background-color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#0000cd\")};\n    border-radius: 50%;\n    width: 30px;\n    height: 30px;\n    top: 7px;\n    right: 7px;\n    cursor: ${(p) => (p.isDisabled ? \"default\" : \"pointer\")};\n    svg {\n        color: #fff;\n        width:20px;\n    }\n`;\n\nconst FocussedTaskContent = styled.div`\n    display: flex;\n    justify-content: center;\n    text-align: center;\n    margin: 5px;\n    height: 30%;\n    width: 90%;\n    word-wrap: break-word;\n    p {\n        min-width: 0;\n        font-weight: bold;\n        margin: 3px;\n    }\n`;\n\nconst FocussedTaskController = styled.div`\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n    height: 20%;\n    margin-bottom: 10px;\n`;\n\nexport function FocussedTask() {\n    const focussedTaskIndex = useSelector((state) => state.tasks.meta.focussedTaskIndex);\n    let focussedTask = useSelector((state) => (focussedTaskIndex !== -1 ? state.tasks.taskArray[focussedTaskIndex] : null));\n    const dispatch = useDispatch();\n    const delay = 1000;\n    useTimer(\n        () => {\n            if (focussedTask === null) return;\n            else if (focussedTask.remainingTime > 0) {\n                dispatch(tick(focussedTaskIndex));\n            } else if (focussedTask.remainingTime === 0) {\n                dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n                dingSoundElement.play();\n            }\n        },\n        focussedTask !== null && focussedTask.isRunning ? delay : null\n    );\n\n    function updateTaskTimeHandler(val) {\n        if (focussedTask.isCompleted) return;\n        if (focussedTask.isRunning) dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n        dispatch(updateTaskTimeByVal({ focussedTaskIndex, val }));\n    }\n\n    return (\n        <FocussedTaskDiv>\n            <FocussedTaskTimer>\n                <div style={{ width: 120, height: 120 }}>\n                    <CircularProgressbarWithChildren\n                        value={focussedTask.time !== 0 ? Math.floor((focussedTask.remainingTime / focussedTask.time) * 100) : 0}\n                        styles={buildStyles({\n                            strokeLinecap: \"butt\",\n                            pathColor: \"#0000cd\",\n                            trailColor: \"#EFF7FF\",\n                        })}\n                        strokeWidth={7}\n                    >\n                        <CountdownTimerDiv>\n                            <p>{formattedTimeStringv2(focussedTask.remainingTime)}</p>\n                        </CountdownTimerDiv>\n                    </CircularProgressbarWithChildren>\n                </div>\n            </FocussedTaskTimer>\n            <FocussedTaskContent>\n                <p>{focussedTask.content}</p>\n            </FocussedTaskContent>\n            <FocussedTaskController>\n                <UpdateTimeButtonDiv onClick={() => updateTaskTimeHandler(-5)}>\n                    <h4>-5</h4>\n                </UpdateTimeButtonDiv>\n                <PlayPauseButtonDiv isPlayBtn={!focussedTask.isRunning} onClick={() => dispatch(toggleIsRunning({ idx: focussedTaskIndex }))}>\n                    {focussedTask.isRunning ? <BsFillPauseFill /> : <BsFillPlayFill />}\n                </PlayPauseButtonDiv>\n\n                <UpdateTimeButtonDiv onClick={() => updateTaskTimeHandler(5)}>\n                    <h4>+5</h4>\n                </UpdateTimeButtonDiv>\n            </FocussedTaskController>\n            <ResetButtonDiv onClick={() => dispatch(resetTaskTimer(focussedTaskIndex))}>\n                <ResetIcon />\n            </ResetButtonDiv>\n        </FocussedTaskDiv>\n    );\n}\n",["71","72"],"/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js",[],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/TaskSummary.js",["73"],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyFocusBox.js",[],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyTaskSummary.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js",["74"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskLabelSelect.js",["75"],"/home/pg07codes/Desktop/fokus/src/containers/App.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js",[],"/home/pg07codes/Desktop/fokus/src/helpers/index.js",["76","77","78","79"],"export function formattedTimeString(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}:${secs}`;\n}\n\nexport function formattedTimeStringv2(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}m ${secs}s`;\n}\n\nexport function getFormattedDate() {\n    let d = new Date();\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    return {\n        day: days[d.getDay()],\n        month: months[d.getMonth()],\n        date: d.getDate(),\n        year: d.getFullYear(),\n    };\n}\n","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js",["80","81","82","83","84"],"/home/pg07codes/Desktop/fokus/src/serviceWorker.js",[],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js",["85","86","87"],"/home/pg07codes/Desktop/fokus/src/containers/menu/Menu.js",[],{"ruleId":"88","severity":1,"message":"89","line":2,"column":23,"nodeType":"90","messageId":"91","endLine":2,"endColumn":34},{"ruleId":"88","severity":1,"message":"92","line":3,"column":18,"nodeType":"90","messageId":"91","endLine":3,"endColumn":21},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"88","severity":1,"message":"89","line":2,"column":23,"nodeType":"90","messageId":"91","endLine":2,"endColumn":34},{"ruleId":"88","severity":1,"message":"97","line":210,"column":17,"nodeType":"90","messageId":"91","endLine":210,"endColumn":21},{"ruleId":"88","severity":1,"message":"89","line":2,"column":23,"nodeType":"90","messageId":"91","endLine":2,"endColumn":34},{"ruleId":"98","severity":1,"message":"99","line":5,"column":14,"nodeType":"100","messageId":"101","endLine":5,"endColumn":16},{"ruleId":"98","severity":1,"message":"99","line":10,"column":14,"nodeType":"100","messageId":"101","endLine":10,"endColumn":16},{"ruleId":"98","severity":1,"message":"99","line":23,"column":14,"nodeType":"100","messageId":"101","endLine":23,"endColumn":16},{"ruleId":"98","severity":1,"message":"99","line":28,"column":14,"nodeType":"100","messageId":"101","endLine":28,"endColumn":16},{"ruleId":"98","severity":1,"message":"102","line":40,"column":52,"nodeType":"100","messageId":"101","endLine":40,"endColumn":54},{"ruleId":"98","severity":1,"message":"102","line":47,"column":64,"nodeType":"100","messageId":"101","endLine":47,"endColumn":66},{"ruleId":"98","severity":1,"message":"99","line":50,"column":64,"nodeType":"100","messageId":"101","endLine":50,"endColumn":66},{"ruleId":"98","severity":1,"message":"99","line":186,"column":56,"nodeType":"100","messageId":"101","endLine":186,"endColumn":58},{"ruleId":"98","severity":1,"message":"99","line":229,"column":56,"nodeType":"100","messageId":"101","endLine":229,"endColumn":58},{"ruleId":"88","severity":1,"message":"103","line":1,"column":17,"nodeType":"90","messageId":"91","endLine":1,"endColumn":25},{"ruleId":"98","severity":1,"message":"102","line":39,"column":18,"nodeType":"100","messageId":"101","endLine":39,"endColumn":20},{"ruleId":"98","severity":1,"message":"99","line":47,"column":19,"nodeType":"100","messageId":"101","endLine":47,"endColumn":21},"no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","'css' is defined but never used.","no-native-reassign",["104"],"no-negated-in-lhs",["105"],"'temp' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]