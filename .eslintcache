[{"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js":"1","/home/pg07codes/Desktop/fokus/src/helpers/index.js":"2","/home/pg07codes/Desktop/fokus/src/index.js":"3","/home/pg07codes/Desktop/fokus/src/store/index.js":"4","/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js":"5","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js":"6","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js":"7","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js":"8","/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js":"9","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyTaskSummary.js":"10"},{"size":6215,"mtime":1613071737031,"results":"11","hashOfConfig":"12"},{"size":1129,"mtime":1613069072186,"results":"13","hashOfConfig":"12"},{"size":651,"mtime":1608902523877,"results":"14","hashOfConfig":"12"},{"size":214,"mtime":1612760411462,"results":"15","hashOfConfig":"12"},{"size":1009,"mtime":1613033460357,"results":"16","hashOfConfig":"12"},{"size":4695,"mtime":1613140264276,"results":"17","hashOfConfig":"12"},{"size":9096,"mtime":1613139223918,"results":"18","hashOfConfig":"12"},{"size":13922,"mtime":1613144496719,"results":"19","hashOfConfig":"12"},{"size":1866,"mtime":1613072311678,"results":"20","hashOfConfig":"12"},{"size":1046,"mtime":1613072484728,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},"g1paqb",{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js",["47","48","49"],"import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateOrder } from \"./taskBoardSlice\";\nimport TaskCard from \"./../../components/TaskBoard/TaskCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Flipper } from \"react-flip-toolkit\";\nimport { focusOnTask } from \"./taskBoardSlice\";\nimport styled from \"styled-components\";\nimport TaskInput from \"./../../components/TaskBoard/TaskInput\";\nimport Divider from \"./../../components/TaskBoard/Divider\";\nimport NoTasks from \"../../components/TaskBoard/NoTasks\";\n\nconst TaskBoardContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-color: #f7f7fa;\n    flex: 2 1 0;\n    -webkit-box-shadow: inset -3px 0 10px rgba(166, 173, 201, 0.3);\n    box-shadow: inset -3px 0 10px rgba(166, 173, 201, 0.3);\n`;\n\nexport function TaskBoard() {\n    const tasks = useSelector((state) => state.tasks.taskArray);\n    const meta = useSelector((state) => state.tasks.meta);\n    let focussedTask = meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex] : null;\n    const dispatch = useDispatch();\n\n    function handleOnDragEnd(result) {\n        if (!result.destination) return;\n\n        let items = [...tasks.map((i) => ({ ...i }))];\n        const [reorderedItem] = items.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorderedItem);\n\n        let i = result.source.index;\n        let direction = result.destination.index > result.source.index; // direction true means moving right & swapping\n        // below is logic to reset globalKeys to maintain correct sort order.\n        while (i != result.destination.index) {\n            if (direction) {\n                items[i].globalKey = tasks[i].globalKey;\n                i++;\n            } else {\n                items[i].globalKey = tasks[i].globalKey;\n                i--;\n            }\n            if (i == result.destination.index) {\n                items[i].globalKey = tasks[i].globalKey;\n            }\n        }\n\n        if (meta.focussedTaskIndex !== -1) {\n            let greaterIndex = Math.max(result.destination.index, result.source.index);\n            let smallerIndex = Math.min(result.destination.index, result.source.index);\n\n            if (result.source.index === meta.focussedTaskIndex) {\n                dispatch(focusOnTask(result.destination.index));\n            } else if (meta.focussedTaskIndex >= smallerIndex && meta.focussedTaskIndex <= greaterIndex) {\n                if (result.destination.index > result.source.index) {\n                    dispatch(focusOnTask(meta.focussedTaskIndex - 1)); // -1\n                } else {\n                    dispatch(focusOnTask(meta.focussedTaskIndex + 1)); // +1\n                }\n            }\n        }\n\n        dispatch(updateOrder(items)); // order is imp. focus then updateOrder\n    }\n\n    function getFlipKey() {\n        let flipKey = \"\";\n        tasks.forEach((i) => {\n            flipKey += `${i.globalKey}`;\n        });\n        flipKey += `${meta.completedTaskStartIndex}`;\n        return flipKey;\n    }\n\n    function isFocussed(id) {\n        if (focussedTask !== null && focussedTask.id === id) return true;\n        return false;\n    }\n\n    // input has both onChange and onKeyDown - can be optimised by using one and combining\n\n    return (\n        <TaskBoardContainer>\n            <TaskInput focussedTaskIndex={meta.focussedTaskIndex} />\n            {tasks.length === 0 ? <NoTasks /> : tasks.length === meta.completedTasksCount && <NoTasks allCompleted={true} />}\n            <Flipper flipKey={getFlipKey()}>\n                <DragDropContext onDragEnd={handleOnDragEnd}>\n                    <Droppable droppableId=\"dropArea\">\n                        {(provided) => (\n                            <div {...provided.droppableProps} ref={provided.innerRef}>\n                                {tasks.map((i, index) =>\n                                    !i.isCompleted ? (\n                                        <Draggable isDragDisabled={i.isCompleted} key={i.id} draggableId={`${i.id}`} index={index}>\n                                            {(provided2) => (\n                                                <TaskCard\n                                                    focussedTaskIndex={meta.focussedTaskIndex}\n                                                    focussedTaskGlobalKey={meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1}\n                                                    taskIndex={index}\n                                                    forwardRBDProvided={provided2}\n                                                    task={i}\n                                                    isFocussed={isFocussed(i.id)}\n                                                />\n                                            )}\n                                        </Draggable>\n                                    ) : (\n                                        \"\"\n                                    )\n                                )}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n\n                {meta.completedTaskStartIndex !== -1 && <Divider />}\n\n                {meta.showCompletedTasks &&\n                    tasks.map((i, index) =>\n                        i.isCompleted ? (\n                            <TaskCard\n                                focussedTaskIndex={meta.focussedTaskIndex}\n                                focussedTaskGlobalKey={meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1}\n                                taskIndex={index}\n                                key={i.id}\n                                forwardRBDProvided={{ innerRef: null }}\n                                task={i}\n                                isFocussed={isFocussed(i.id)}\n                            />\n                        ) : (\n                            \"\"\n                        )\n                    )}\n            </Flipper>\n        </TaskBoardContainer>\n    );\n}\n",["50","51"],"/home/pg07codes/Desktop/fokus/src/helpers/index.js",["52","53","54","55"],"export function formattedTimeString(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}:${secs}`;\n}\n\nexport function formattedTimeStringv2(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}m ${secs}s`;\n}\n\nexport function getFormattedDate() {\n    let d = new Date();\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    return {\n        day: days[d.getDay()],\n        month: months[d.getMonth()],\n        date: d.getDate(),\n        year: d.getFullYear(),\n    };\n}\n","/home/pg07codes/Desktop/fokus/src/index.js",[],"/home/pg07codes/Desktop/fokus/src/store/index.js",[],"/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js",[],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js",["56","57","58","59","60"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js",["61","62","63","64"],"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js",["65"],"import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { FocussedTask } from \"./../../components/FocusBoard/FocussedTask\";\nimport { EmptyFocusBox } from \"./../../components/FocusBoard/EmptyFocusBox\";\nimport { TaskSummary } from \"./../../components/FocusBoard/TaskSummary\";\nimport { EmptyTaskSummary } from \"../../components/FocusBoard/EmptyTaskSummary\";\n\nconst FocusBoardContainer = styled.div`\n    flex: 3 1 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\nconst TaskSummaryContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    position: relative;\n    width: 276px;\n    height: 90px;\n    margin: 20px;\n    border-radius: 10px;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    background-color: #fff;\n`;\n\nconst FocussedTaskContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    position: relative;\n    width: 276px;\n    height: 346px;\n    margin: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.5);\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.5);\n    background-color: #f7f7fa;\n`;\n\nexport function FocusBoard() {\n    const focussedTaskIndex = useSelector((state) => state.tasks.meta.focussedTaskIndex);\n    const totalTasksCount = useSelector(s=>s.tasks.taskArray.length);\n    return (\n        <FocusBoardContainer>\n            <TaskSummaryContainer>\n                {totalTasksCount!==0?<TaskSummary/>:<EmptyTaskSummary/>}\n            </TaskSummaryContainer>\n            <FocussedTaskContainer>\n                {focussedTaskIndex !== -1? <FocussedTask />:<EmptyFocusBox />}\n            </FocussedTaskContainer>\n        </FocusBoardContainer>\n    );\n}\n",["66","67"],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyTaskSummary.js",[],{"ruleId":"68","severity":1,"message":"69","line":1,"column":17,"nodeType":"70","messageId":"71","endLine":1,"endColumn":25},{"ruleId":"72","severity":1,"message":"73","line":39,"column":18,"nodeType":"74","messageId":"75","endLine":39,"endColumn":20},{"ruleId":"72","severity":1,"message":"76","line":47,"column":19,"nodeType":"74","messageId":"75","endLine":47,"endColumn":21},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"72","severity":1,"message":"76","line":5,"column":14,"nodeType":"74","messageId":"75","endLine":5,"endColumn":16},{"ruleId":"72","severity":1,"message":"76","line":10,"column":14,"nodeType":"74","messageId":"75","endLine":10,"endColumn":16},{"ruleId":"72","severity":1,"message":"76","line":23,"column":14,"nodeType":"74","messageId":"75","endLine":23,"endColumn":16},{"ruleId":"72","severity":1,"message":"76","line":28,"column":14,"nodeType":"74","messageId":"75","endLine":28,"endColumn":16},{"ruleId":"72","severity":1,"message":"73","line":19,"column":52,"nodeType":"74","messageId":"75","endLine":19,"endColumn":54},{"ruleId":"72","severity":1,"message":"73","line":26,"column":64,"nodeType":"74","messageId":"75","endLine":26,"endColumn":66},{"ruleId":"72","severity":1,"message":"76","line":29,"column":64,"nodeType":"74","messageId":"75","endLine":29,"endColumn":66},{"ruleId":"72","severity":1,"message":"76","line":161,"column":56,"nodeType":"74","messageId":"75","endLine":161,"endColumn":58},{"ruleId":"72","severity":1,"message":"76","line":204,"column":56,"nodeType":"74","messageId":"75","endLine":204,"endColumn":58},{"ruleId":"68","severity":1,"message":"81","line":15,"column":8,"nodeType":"70","messageId":"71","endLine":15,"endColumn":23},{"ruleId":"68","severity":1,"message":"82","line":186,"column":7,"nodeType":"70","messageId":"71","endLine":186,"endColumn":28},{"ruleId":"68","severity":1,"message":"83","line":212,"column":12,"nodeType":"70","messageId":"71","endLine":212,"endColumn":26},{"ruleId":"68","severity":1,"message":"84","line":218,"column":17,"nodeType":"70","messageId":"71","endLine":218,"endColumn":21},{"ruleId":"68","severity":1,"message":"85","line":2,"column":23,"nodeType":"70","messageId":"71","endLine":2,"endColumn":34},{"ruleId":"77","replacedBy":"86"},{"ruleId":"79","replacedBy":"87"},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-native-reassign",["88"],"no-negated-in-lhs",["89"],"'CreatableSelect' is defined but never used.","'customTaskLabelStyles' is assigned a value but never used.","'labelUnderEdit' is assigned a value but never used.","'temp' is assigned a value but never used.","'useDispatch' is defined but never used.",["88"],["89"],"no-global-assign","no-unsafe-negation"]