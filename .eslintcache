[{"/home/pg07codes/Desktop/fokus/src/store/index.js":"1","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/TaskSummary.js":"2","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/LabelPie.js":"3","/home/pg07codes/Desktop/fokus/src/helpers/index.js":"4","/home/pg07codes/Desktop/fokus/src/containers/App.js":"5","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js":"6","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/FocussedTask.js":"7","/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js":"8","/home/pg07codes/Desktop/fokus/src/containers/miscBoard/MiscBoard.js":"9","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyFocusBox.js":"10","/home/pg07codes/Desktop/fokus/src/index.js":"11","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js":"12","/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js":"13","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyTaskSummary.js":"14","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js":"15","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskLabelSelect.js":"16","/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js":"17","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js":"18","/home/pg07codes/Desktop/fokus/src/serviceWorker.js":"19","/home/pg07codes/Desktop/fokus/src/components/MusicBox/MusicVolumeControl.js":"20","/home/pg07codes/Desktop/fokus/src/components/MusicBox/musicUtils.js":"21","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/ProgressRings.js":"22","/home/pg07codes/Desktop/fokus/src/components/MusicBox/Soundscapes.js":"23","/home/pg07codes/Desktop/fokus/src/containers/menu/Menu.js":"24","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TimeProgressCard.js":"25","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TaskProgressCard.js":"26","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/NoTasks.js":"27","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/Divider.js":"28"},{"size":214,"mtime":1612760411462,"results":"29","hashOfConfig":"30"},{"size":2564,"mtime":1613326554228,"results":"31","hashOfConfig":"30"},{"size":2554,"mtime":1613635862199,"results":"32","hashOfConfig":"30"},{"size":1658,"mtime":1613681536034,"results":"33","hashOfConfig":"30"},{"size":562,"mtime":1613280812733,"results":"34","hashOfConfig":"30"},{"size":14377,"mtime":1613677731335,"results":"35","hashOfConfig":"30"},{"size":7760,"mtime":1613682151096,"results":"36","hashOfConfig":"30"},{"size":1839,"mtime":1613636104237,"results":"37","hashOfConfig":"30"},{"size":2905,"mtime":1613670945509,"results":"38","hashOfConfig":"30"},{"size":2990,"mtime":1613063915917,"results":"39","hashOfConfig":"30"},{"size":651,"mtime":1613628682348,"results":"40","hashOfConfig":"30"},{"size":12281,"mtime":1613674345312,"results":"41","hashOfConfig":"30"},{"size":528,"mtime":1611252515979,"results":"42","hashOfConfig":"30"},{"size":1046,"mtime":1613072484728,"results":"43","hashOfConfig":"30"},{"size":6301,"mtime":1613668844412,"results":"44","hashOfConfig":"30"},{"size":1304,"mtime":1613218352233,"results":"45","hashOfConfig":"30"},{"size":2194,"mtime":1613682138978,"results":"46","hashOfConfig":"30"},{"size":5220,"mtime":1613657866321,"results":"47","hashOfConfig":"30"},{"size":5141,"mtime":1608877484447,"results":"48","hashOfConfig":"30"},{"size":1695,"mtime":1613676335073,"results":"49","hashOfConfig":"30"},{"size":1143,"mtime":1613675294381,"results":"50","hashOfConfig":"30"},{"size":4132,"mtime":1613671237949,"results":"51","hashOfConfig":"30"},{"size":3650,"mtime":1613676646260,"results":"52","hashOfConfig":"30"},{"size":664,"mtime":1613657734395,"results":"53","hashOfConfig":"30"},{"size":2701,"mtime":1613671139368,"results":"54","hashOfConfig":"30"},{"size":1796,"mtime":1613671134724,"results":"55","hashOfConfig":"30"},{"size":1023,"mtime":1613156000628,"results":"56","hashOfConfig":"30"},{"size":2621,"mtime":1613070042728,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"g1paqb",{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},"/home/pg07codes/Desktop/fokus/src/store/index.js",[],["127","128"],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/TaskSummary.js",["129"],"import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { Line } from \"rc-progress\";\n\nconst TaskSummaryDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    position: relative;\n    width: 100%;\n    height: 100%;\n`;\n\nconst SummaryDataContainer = styled.div`\n    display: flex;\n    /* justify-content: space-evenly; */\n    align-items: center;\n    width: 90%;\n    height: 60%;\n    /* background-color: #f5f5fa; */\n`;\n\nconst ColorDot = styled.div`\n    width: 18px;\n    height: 18px;\n    background-color: ${(p) => p.color};\n    border-radius: 50%;\n    margin-right: 10px;\n`;\n\nconst SummaryDataDiv = styled.div`\n    display: flex;\n    align-items: center;\n    width: 40%;\n    margin-top: 5px;\n    margin-left: 3px;\n    /* background-color: #c1c1c1; */\n    p {\n        font-size: 1.2em;\n        font-weight: bold;\n        margin: 0;\n        margin-right: 3px;\n    }\n    span {\n        font-size: 0.5em;\n    }\n`;\n\nconst CompletionPercentContainer = styled.div`\n    display: flex;\n    align-items: center;\n    position: absolute;\n    bottom: 10px;\n    right: 15px;\n    p {\n        font-weight: bold;\n    }\n    span {\n        font-size: 0.5em;\n    }\n`;\n\nexport function TaskSummary() {\n    const completedTasksCount = useSelector((s) => s.tasks.meta.completedTasksCount);\n    const totalTasksCount = useSelector((s) => s.tasks.taskArray.length);\n    let completionPercent = totalTasksCount !== 0 ? Math.floor((completedTasksCount / totalTasksCount) * 100) : 100;\n    return (\n        <TaskSummaryDiv>\n            <SummaryDataContainer>\n                <SummaryDataDiv>\n                    <ColorDot color={\"#0000cd\"} />\n                    <p>{completedTasksCount}</p>\n                    <span>done</span>\n                </SummaryDataDiv>\n                <SummaryDataDiv>\n                    <ColorDot color={\"#c1c1d7\"} />\n                    <p>{totalTasksCount}</p>\n                    <span>tasks</span>\n                </SummaryDataDiv>\n                <CompletionPercentContainer>\n                    <p>{completionPercent}</p>\n                    <span>%</span>\n                </CompletionPercentContainer>\n            </SummaryDataContainer>\n            <div style={{ width: \"90%\" }}>\n                <Line percent={completionPercent} strokeWidth=\"5\" trailWidth=\"5\" trailColor=\"#C1C1D7\" strokeColor=\"#0000CD\" />\n            </div>\n        </TaskSummaryDiv>\n    );\n}\n",["130","131"],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/LabelPie.js",[],"/home/pg07codes/Desktop/fokus/src/helpers/index.js",["132","133","134","135","136","137"],"export function formattedTimeString(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}:${secs}`;\n}\n\nexport function formattedTimeStringv2(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return {mins,secs};\n}\n\nexport function getFormattedDate() {\n    let d = new Date();\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    return {\n        day: days[d.getDay()],\n        month: months[d.getMonth()],\n        date: d.getDate(),\n        year: d.getFullYear(),\n    };\n}\n\nexport function getFormattedListTimeSummary(x){\n    let mins = Math.floor(x % 3600 / 60);\n    let hours = Math.floor(x / 3600);\n\n    if (mins == 0) {\n        mins = `0`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n    if (hours == 0) {\n        hours = `0`;\n    } else if (hours < 10) {\n        hours = `${hours}`;\n    }\n\n    return {hours,mins};\n}\n\nexport function debounce(fn, wait) {\n    let t;\n    return function () {\n        clearTimeout(t);\n        t = setTimeout(() => fn.apply(this, arguments), wait);\n    };\n}\n","/home/pg07codes/Desktop/fokus/src/containers/App.js",[],["138","139"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js",["140"],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/FocussedTask.js",["141","142"],"/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js",[],"/home/pg07codes/Desktop/fokus/src/containers/miscBoard/MiscBoard.js",["143","144"],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyFocusBox.js",[],["145","146"],"/home/pg07codes/Desktop/fokus/src/index.js",[],["147","148"],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js",["149","150","151","152","153"],"/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js",[],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyTaskSummary.js",[],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js",["154","155","156"],"import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateOrder } from \"./taskBoardSlice\";\nimport TaskCard from \"./../../components/TaskBoard/TaskCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Flipper } from \"react-flip-toolkit\";\nimport { focusOnTask } from \"./taskBoardSlice\";\nimport styled from \"styled-components\";\nimport TaskInput from \"./../../components/TaskBoard/TaskInput\";\nimport Divider from \"./../../components/TaskBoard/Divider\";\nimport NoTasks from \"../../components/TaskBoard/NoTasks\";\n\nconst TaskBoardContainer = styled.div`\n    flex: 2 1 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    overflow-y:scroll; // to enable scrolling by default for this flex-container only\n    background-color: #f7f7fa;\n    -webkit-box-shadow: inset -3px 0 10px rgba(166, 173, 201, 0.3);\n    box-shadow: inset -3px 0 10px rgba(166, 173, 201, 0.3);\n`;\n\nexport function TaskBoard() {\n    const tasks = useSelector((state) => state.tasks.taskArray);\n    const meta = useSelector((state) => state.tasks.meta);\n    let focussedTask = meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex] : null;\n    const dispatch = useDispatch();\n\n    function handleOnDragEnd(result) {\n        if (!result.destination) return;\n\n        let items = [...tasks.map((i) => ({ ...i }))];\n        const [reorderedItem] = items.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorderedItem);\n\n        let i = result.source.index;\n        let direction = result.destination.index > result.source.index; // direction true means moving right & swapping\n        // below is logic to reset globalKeys to maintain correct sort order.\n        while (i != result.destination.index) {\n            if (direction) {\n                items[i].globalKey = tasks[i].globalKey;\n                i++;\n            } else {\n                items[i].globalKey = tasks[i].globalKey;\n                i--;\n            }\n            if (i == result.destination.index) {\n                items[i].globalKey = tasks[i].globalKey;\n            }\n        }\n\n        if (meta.focussedTaskIndex !== -1) {\n            let greaterIndex = Math.max(result.destination.index, result.source.index);\n            let smallerIndex = Math.min(result.destination.index, result.source.index);\n\n            if (result.source.index === meta.focussedTaskIndex) {\n                dispatch(focusOnTask(result.destination.index));\n            } else if (meta.focussedTaskIndex >= smallerIndex && meta.focussedTaskIndex <= greaterIndex) {\n                if (result.destination.index > result.source.index) {\n                    dispatch(focusOnTask(meta.focussedTaskIndex - 1)); // -1\n                } else {\n                    dispatch(focusOnTask(meta.focussedTaskIndex + 1)); // +1\n                }\n            }\n        }\n\n        dispatch(updateOrder(items)); // order is imp. focus then updateOrder\n    }\n\n    function getFlipKey() {\n        let flipKey = \"\";\n        tasks.forEach((i) => {\n            flipKey += `${i.globalKey}`;\n        });\n        flipKey += `${meta.completedTaskStartIndex}`;\n        return flipKey;\n    }\n\n    function isFocussed(id) {\n        if (focussedTask !== null && focussedTask.id === id) return true;\n        return false;\n    }\n\n    // input has both onChange and onKeyDown - can be optimised by using one and combining\n\n    return (\n        <TaskBoardContainer>\n            <TaskInput focussedTaskIndex={meta.focussedTaskIndex} />\n            {tasks.length === 0 ? <NoTasks /> : tasks.length === meta.completedTasksCount && <NoTasks allCompleted={true} />}\n            <Flipper flipKey={getFlipKey()}>\n                <DragDropContext onDragEnd={handleOnDragEnd}>\n                    <Droppable droppableId=\"dropArea\">\n                        {(provided) => (\n                            <div {...provided.droppableProps} ref={provided.innerRef}>\n                                {tasks.map((i, index) =>\n                                    !i.isCompleted ? (\n                                        <Draggable isDragDisabled={i.isCompleted} key={i.id} draggableId={`${i.id}`} index={index}>\n                                            {(provided2) => (\n                                                <TaskCard\n                                                    focussedTaskIndex={meta.focussedTaskIndex}\n                                                    focussedTaskGlobalKey={meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1}\n                                                    taskIndex={index}\n                                                    forwardRBDProvided={provided2}\n                                                    task={i}\n                                                    isFocussed={isFocussed(i.id)}\n                                                />\n                                            )}\n                                        </Draggable>\n                                    ) : (\n                                        \"\"\n                                    )\n                                )}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n\n                {meta.completedTaskStartIndex !== -1 && <Divider />}\n\n                {meta.showCompletedTasks &&\n                    tasks.map((i, index) =>\n                        i.isCompleted ? (\n                            <TaskCard\n                                focussedTaskIndex={meta.focussedTaskIndex}\n                                focussedTaskGlobalKey={meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1}\n                                taskIndex={index}\n                                key={i.id}\n                                forwardRBDProvided={{ innerRef: null }}\n                                task={i}\n                                isFocussed={isFocussed(i.id)}\n                            />\n                        ) : (\n                            \"\"\n                        )\n                    )}\n            </Flipper>\n        </TaskBoardContainer>\n    );\n}\n",["157","158"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskLabelSelect.js",["159"],"import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\n\nconst TaskSelectInput = styled.select`\n    font-weight: bold;\n    text-align: center;\n    border:0;\n    background-color:#fff;\n    option{\n        font-weight:bold;\n    }\n`;\n\nexport default function TaskLabel(p) {\n    const labels = useSelector((s) => s.tasks.labels);\n    const [updatedLabel, setUpdatedLabel] = useState(p.taskLabel);\n\n    return (\n        // <div style={{ height: \"100%\", width: 80 }}>\n        <TaskSelectInput\n        autoFocus\n            name=\"labels\"\n            onBlur={() => p.onBlur(p.taskId,p.taskLabel, updatedLabel)}\n            defaultValue={updatedLabel}\n            onChange={(e) => setUpdatedLabel(e.target.value)}\n            onKeyDown={(e) => (e.key === \"Enter\" ? p.onBlur(p.taskId,p.taskLabel, updatedLabel) : null)}\n        >\n            <option value=\"none\">none</option> \n            {/* keeping option:none at top makes it show up if taskLabel is null which is desired */}\n            {Object.keys(labels).map((e, idx) => (\n                <option style={{color:`${labels[e].color}`}} key={idx} value={e}>\n                    {e}\n                </option>\n            ))}\n        </TaskSelectInput>\n        // </div>\n    );\n}\n","/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js",["160","161","162"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js",[],"/home/pg07codes/Desktop/fokus/src/serviceWorker.js",[],"/home/pg07codes/Desktop/fokus/src/components/MusicBox/MusicVolumeControl.js",["163"],"/home/pg07codes/Desktop/fokus/src/components/MusicBox/musicUtils.js",[],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/ProgressRings.js",[],"/home/pg07codes/Desktop/fokus/src/components/MusicBox/Soundscapes.js",["164"],"import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { soundOptions, generateAudioElement } from \"./musicUtils\";\nimport { changeSoundscapeTrack } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport { MusicVolumeControl } from \"./MusicVolumeControl\";\n\nconst SoundscapesContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n    /* background-color: #000; */\n`;\n\nconst SoundscapesDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    width: 100%;\n    height: 70%;\n    /* background-color: #df15ad; */\n    color: #0000cd;\n    p {\n        margin: 0;\n        font-weight: bold;\n    }\n`;\n\nconst SoundOptionsDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 85%;\n    /* background-color: #f8faaa; */\n`;\n\nconst SoundOptionsInput = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    flex-direction: column;\n    /* background-color: #b16afa; */\n    height: 80%;\n    margin: 0 5px;\n    img {\n        width: 50px;\n        cursor:pointer;\n        transition: transform .2s;\n        &:hover{\n            transform: scale(1.1);\n        }\n    }\n    span {\n        margin: 0;\n        font-size: 0.8em;\n        font-weight: bold;\n        color: ${(p) => (p.isSelectedSound ? \"#0000cd\" : \"#c1c1d7\")};\n        cursor:pointer;\n    }\n`;\n\nconst SoundVolumeControl = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    /* background-color: #cad1ff; */\n    width: 95%;\n    height: 15%;\n`;\n\nexport function Soundscapes() {\n    const soundscape = useSelector((s) => s.tasks.soundscape);\n    const dispatch = useDispatch();\n\n    const [soundscapeAudioElement, setSoundscapeAudioElement] = useState(() => generateAudioElement(soundscape.track, soundscape.volume));\n\n    // ---- danger zone: don't change without full surety , this code is prone to issues ---///\n\n    useEffect(() => {\n        console.log(\"ran\");\n        soundscapeAudioElement.src = soundOptions[soundscape.track].src;\n    }, [soundscape.track, soundscapeAudioElement, soundscape.isPlaying]);\n\n    soundscapeAudioElement.volume = soundscape.volume;\n    soundscapeAudioElement.addEventListener(\"canplay\", () => {\n        if (soundscape.isPlaying) {\n            console.log(\"playing sir\");\n            soundscapeAudioElement.play();\n        } else {\n            soundscapeAudioElement.pause();\n        }\n    });\n\n    // ---- danger zone: this might be due to my lack of knowledge of useEffect or weird Audio element behaviour ---///\n\n    function isSelectedSound(track) {\n        return soundscape.track === track;\n    }\n\n    return (\n        <SoundscapesContainer>\n            <SoundscapesDiv>\n                <p>Soundscapes</p>\n                <SoundOptionsDiv>\n                    {Object.keys(soundOptions).map((i) => (\n                        <SoundOptionsInput key={i} onClick={() => dispatch(changeSoundscapeTrack(i))} isSelectedSound={isSelectedSound(i)}>\n                            <img src={soundOptions[i].img} alt={i} />\n                            <span>{soundOptions[i].label}</span>\n                        </SoundOptionsInput>\n                    ))}\n                </SoundOptionsDiv>\n            </SoundscapesDiv>\n            <SoundVolumeControl>\n                <MusicVolumeControl />\n            </SoundVolumeControl>\n        </SoundscapesContainer>\n    );\n}\n","/home/pg07codes/Desktop/fokus/src/containers/menu/Menu.js",[],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TimeProgressCard.js",[],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TaskProgressCard.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/NoTasks.js",[],["165","166"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/Divider.js",[],["167","168"],{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","severity":1,"message":"174","line":2,"column":23,"nodeType":"175","messageId":"176","endLine":2,"endColumn":34},{"ruleId":"169","replacedBy":"177"},{"ruleId":"171","replacedBy":"178"},{"ruleId":"179","severity":1,"message":"180","line":5,"column":14,"nodeType":"181","messageId":"182","endLine":5,"endColumn":16},{"ruleId":"179","severity":1,"message":"180","line":10,"column":14,"nodeType":"181","messageId":"182","endLine":10,"endColumn":16},{"ruleId":"179","severity":1,"message":"180","line":23,"column":14,"nodeType":"181","messageId":"182","endLine":23,"endColumn":16},{"ruleId":"179","severity":1,"message":"180","line":28,"column":14,"nodeType":"181","messageId":"182","endLine":28,"endColumn":16},{"ruleId":"179","severity":1,"message":"180","line":53,"column":14,"nodeType":"181","messageId":"182","endLine":53,"endColumn":16},{"ruleId":"179","severity":1,"message":"180","line":58,"column":15,"nodeType":"181","messageId":"182","endLine":58,"endColumn":17},{"ruleId":"169","replacedBy":"183"},{"ruleId":"171","replacedBy":"184"},{"ruleId":"173","severity":1,"message":"185","line":211,"column":17,"nodeType":"175","messageId":"176","endLine":211,"endColumn":21},{"ruleId":"173","severity":1,"message":"186","line":3,"column":18,"nodeType":"175","messageId":"176","endLine":3,"endColumn":21},{"ruleId":"173","severity":1,"message":"187","line":11,"column":33,"nodeType":"175","messageId":"176","endLine":11,"endColumn":49},{"ruleId":"173","severity":1,"message":"188","line":2,"column":10,"nodeType":"175","messageId":"176","endLine":2,"endColumn":21},{"ruleId":"173","severity":1,"message":"174","line":2,"column":23,"nodeType":"175","messageId":"176","endLine":2,"endColumn":34},{"ruleId":"169","replacedBy":"189"},{"ruleId":"171","replacedBy":"190"},{"ruleId":"169","replacedBy":"191"},{"ruleId":"171","replacedBy":"192"},{"ruleId":"179","severity":1,"message":"193","line":49,"column":52,"nodeType":"181","messageId":"182","endLine":49,"endColumn":54},{"ruleId":"179","severity":1,"message":"193","line":60,"column":64,"nodeType":"181","messageId":"182","endLine":60,"endColumn":66},{"ruleId":"179","severity":1,"message":"180","line":63,"column":64,"nodeType":"181","messageId":"182","endLine":63,"endColumn":66},{"ruleId":"179","severity":1,"message":"180","line":238,"column":56,"nodeType":"181","messageId":"182","endLine":238,"endColumn":58},{"ruleId":"179","severity":1,"message":"180","line":281,"column":56,"nodeType":"181","messageId":"182","endLine":281,"endColumn":58},{"ruleId":"173","severity":1,"message":"194","line":1,"column":17,"nodeType":"175","messageId":"176","endLine":1,"endColumn":25},{"ruleId":"179","severity":1,"message":"193","line":40,"column":18,"nodeType":"181","messageId":"182","endLine":40,"endColumn":20},{"ruleId":"179","severity":1,"message":"180","line":48,"column":19,"nodeType":"181","messageId":"182","endLine":48,"endColumn":21},{"ruleId":"169","replacedBy":"195"},{"ruleId":"171","replacedBy":"196"},{"ruleId":"173","severity":1,"message":"174","line":2,"column":23,"nodeType":"175","messageId":"176","endLine":2,"endColumn":34},{"ruleId":"173","severity":1,"message":"174","line":2,"column":23,"nodeType":"175","messageId":"176","endLine":2,"endColumn":34},{"ruleId":"173","severity":1,"message":"197","line":16,"column":7,"nodeType":"175","messageId":"176","endLine":16,"endColumn":27},{"ruleId":"173","severity":1,"message":"198","line":56,"column":11,"nodeType":"175","messageId":"176","endLine":56,"endColumn":26},{"ruleId":"173","severity":1,"message":"199","line":8,"column":7,"nodeType":"175","messageId":"176","endLine":8,"endColumn":25},{"ruleId":"173","severity":1,"message":"200","line":80,"column":36,"nodeType":"175","messageId":"176","endLine":80,"endColumn":61},{"ruleId":"169","replacedBy":"201"},{"ruleId":"171","replacedBy":"202"},{"ruleId":"169","replacedBy":"203"},{"ruleId":"171","replacedBy":"204"},"no-native-reassign",["205"],"no-negated-in-lhs",["206"],"no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar",["205"],["206"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["205"],["206"],"'temp' is assigned a value but never used.","'css' is defined but never used.","'getFormattedDate' is defined but never used.","'useSelector' is defined but never used.",["205"],["206"],["205"],["206"],"Expected '!==' and instead saw '!='.","'useState' is defined but never used.",["205"],["206"],"'TaskSummaryContainer' is assigned a value but never used.","'totalTasksCount' is assigned a value but never used.","'VolumeFeedbackText' is assigned a value but never used.","'setSoundscapeAudioElement' is assigned a value but never used.",["205"],["206"],["205"],["206"],"no-global-assign","no-unsafe-negation"]