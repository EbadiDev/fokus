[{"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js":"1","/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js":"2","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/FocussedTask.js":"3","/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js":"4","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/TaskSummary.js":"5","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyFocusBox.js":"6","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyTaskSummary.js":"7","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js":"8","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskLabelSelect.js":"9","/home/pg07codes/Desktop/fokus/src/containers/App.js":"10","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js":"11","/home/pg07codes/Desktop/fokus/src/helpers/index.js":"12","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js":"13","/home/pg07codes/Desktop/fokus/src/serviceWorker.js":"14","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js":"15","/home/pg07codes/Desktop/fokus/src/containers/menu/Menu.js":"16","/home/pg07codes/Desktop/fokus/src/index.js":"17","/home/pg07codes/Desktop/fokus/src/containers/miscBoard/MiscBoard.js":"18","/home/pg07codes/Desktop/fokus/src/components/musicBox/Soundscapes.js":"19","/home/pg07codes/Desktop/fokus/src/components/musicBox/musicUtils.js":"20","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/Divider.js":"21","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/LabelPie.js":"22"},{"size":1850,"mtime":1613326639191,"results":"23","hashOfConfig":"24"},{"size":1009,"mtime":1613033460357,"results":"25","hashOfConfig":"24"},{"size":6311,"mtime":1613304930157,"results":"26","hashOfConfig":"24"},{"size":528,"mtime":1611252515979,"results":"27","hashOfConfig":"24"},{"size":2564,"mtime":1613326554228,"results":"28","hashOfConfig":"24"},{"size":2990,"mtime":1613063915917,"results":"29","hashOfConfig":"24"},{"size":1046,"mtime":1613072484728,"results":"30","hashOfConfig":"24"},{"size":13958,"mtime":1613218060868,"results":"31","hashOfConfig":"24"},{"size":1304,"mtime":1613218352233,"results":"32","hashOfConfig":"24"},{"size":562,"mtime":1613280812733,"results":"33","hashOfConfig":"24"},{"size":5157,"mtime":1613212541884,"results":"34","hashOfConfig":"24"},{"size":1129,"mtime":1613069072186,"results":"35","hashOfConfig":"24"},{"size":10273,"mtime":1613324755850,"results":"36","hashOfConfig":"24"},{"size":5141,"mtime":1608877484447,"results":"37","hashOfConfig":"24"},{"size":6215,"mtime":1613219128909,"results":"38","hashOfConfig":"24"},{"size":899,"mtime":1613220617334,"results":"39","hashOfConfig":"24"},{"size":651,"mtime":1608902523877,"results":"40","hashOfConfig":"24"},{"size":1448,"mtime":1613327048164,"results":"41","hashOfConfig":"24"},{"size":3474,"mtime":1613322205354,"results":"42","hashOfConfig":"24"},{"size":873,"mtime":1613305666450,"results":"43","hashOfConfig":"24"},{"size":2621,"mtime":1613070042728,"results":"44","hashOfConfig":"24"},{"size":1373,"mtime":1613326723688,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"g1paqb",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js",["98"],"/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js",[],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/FocussedTask.js",["99","100"],"/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js",[],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/TaskSummary.js",["101"],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyFocusBox.js",[],["102","103"],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyTaskSummary.js",[],["104","105"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js",["106"],"import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { remove, updateTaskContent, toggleIsCompleted, rearrange, updateTaskTime } from \"../../containers/taskBoard/taskBoardSlice\";\nimport { focusOnTask, resetFocussedTask, toggleIsRunning, updateTaskLabel, updateLabelCount } from \"../../containers/taskBoard/taskBoardSlice\";\nimport styled from \"styled-components\";\nimport { BsTrash } from \"react-icons/bs\";\nimport { Flipped } from \"react-flip-toolkit\";\nimport { GrDrag } from \"react-icons/gr\";\nimport { formattedTimeString } from \"../../helpers\";\nimport bulb from \"./../../images/bulb.svg\";\nimport glowBulb from \"./../../images/glowBulb.svg\";\nimport tickmark from \"./../../images/tickmark.svg\";\nimport TaskLabelSelect from \"./../../components/TaskBoard/TaskLabelSelect\";\n\nconst TaskCardContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    width: 420px;\n    height: 100px;\n    margin-top: 15px;\n    /* background-color: #fff4e1; */\n`;\n\nconst TaskCardDragIcon = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    width: 25px;\n    height: 100%;\n    /* background-color: #ff09ac; */\n    svg {\n        cursor: url(\"https://ssl.gstatic.com/ui/v1/icons/mail/images/2/openhand.cur\"), default !important;\n        opacity: 0.7;\n    }\n`;\n\nconst getTaskCardDivBorderLabelColor = (labelColor) => (labelColor !== null ? `7px solid ${labelColor}` : \"none\");\n\nconst TaskCardDiv = styled.div`\n    display: flex;\n    justify-content: space-around;\n    flex-direction: row;\n    height: 100%;\n    width: 376px;\n    border-radius: 10px;\n    border-right: ${(p) => getTaskCardDivBorderLabelColor(p.labelColor)};\n    background-color: #fff;\n    -webkit-box-shadow: ${(p) => (p.isFocussed ? \"0 1px 8px rgb(248,185,23,0.8)\" : \"0 5px 10px rgba(166,173,201,0.2)\")};\n    box-shadow: ${(p) => (p.isFocussed ? \"0 1px 8px rgb(248,185,23,0.8)\" : \"0 5px 10px rgba(166,173,201,0.2)\")};\n`;\n\nconst TaskStatusDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    width: 15%;\n    /* background-color: #f8f8ff; */\n    position: relative;\n    p {\n        margin: 5px;\n        font-weight: bold;\n        font-size: 0.7em;\n    }\n    img {\n        width: ${(p) => (p.isCompleted ? \"35px\" : \"60px\")};\n    }\n`;\n\nconst TaskDetailsDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    height: 100%;\n    width: 75%;\n    margin: 0 0 0 10px;\n    /* background-color: #fff1fc; */\n`;\n\nconst TaskContentDiv = styled.div`\n    display: flex;\n    align-items: center;\n    height: 65%;\n    margin: 0 0 0 5px;\n    word-wrap: break-word;\n    /* background-color: #fffcec; */\n    p {\n        font-size: 0.9em;\n        font-weight: bold;\n        min-width: 0;\n        &:hover {\n            cursor: text;\n        }\n    }\n`;\n\nconst TaskEditInput = styled.textarea`\n    resize: none;\n    height: 90%;\n    width: 100%;\n    font-size: 0.9em;\n    overflow: hidden;\n    vertical-align: center;\n    font-weight: bold;\n    &:focus {\n        outline: none;\n        border: 2px #0000cd dashed;\n        border-radius: 5px;\n    }\n`;\n\nconst TimeEditInput = styled.input`\n    height: 15px;\n    width: 30px;\n    margin-top: 5px;\n    text-align: center;\n    font-weight: bold;\n    &:focus {\n        outline: none;\n        border: 2px #0000cd dashed;\n        border-radius: 2px;\n    }\n`;\n\nconst TaskActionButton = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    border-radius: 5px;\n    margin: 4px;\n    cursor: pointer;\n    &:hover {\n        background-color: #0000cd;\n        p {\n            color: #fff;\n        }\n    }\n    p {\n        margin: 5px;\n        font-weight: bold;\n        font-size: 0.65em;\n    }\n`;\n\nconst TaskLabelContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    border-radius: 5px;\n    margin: 4px;\n    cursor: pointer;\n    &:hover {\n        background-color: #f7f7fa;\n    }\n    p {\n        margin: 5px;\n        color: ${(p) => (p.labelColor !== null ? p.labelColor : \"#c1c1d7\")};\n        font-weight: bold;\n        font-size: 0.65em;\n    }\n`;\n\nconst TaskDeleteButton = styled.div`\n    height: 80%;\n    cursor: pointer;\n    margin-left: auto;\n    color: #0000cd;\n    &:hover {\n        color: red;\n    }\n`;\n\nconst TaskControllerDiv = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    height: 25%;\n    /* background-color: #fffa91; */\n    svg {\n        font-size: 0.8em;\n        margin: 5px;\n    }\n`;\n\nfunction previewTask(str) {\n    if (str.length <= 60) return str;\n    else return str.substring(0, 60) + \"...\";\n}\n\nexport default function TaskCard({ task, taskIndex, focussedTaskGlobalKey, forwardRBDProvided, isFocussed, focussedTaskIndex }) {\n    const dispatch = useDispatch();\n\n    const [taskUnderEdit, setTaskUnderEdit] = useState(false);\n    const [updatedTaskContent, setUpdatedTaskContent] = useState(task.content);\n    const [timeUnderEdit, setTimeUnderEdit] = useState(false);\n    const [labelUnderEdit, setLabelUnderEdit] = useState(false);\n    const [updatedTime, setUpdatedTime] = useState(Math.floor(task.time / 60));\n    const [showDragIcon, setShowDragIcon] = useState(false);\n\n    const labels = useSelector((s) => s.tasks.labels);\n\n    function submitUpdatedTaskContent(e) {\n        if (e.key === \"Enter\" && updatedTaskContent.trim().length >= 3) {\n            let temp = updatedTaskContent.trim().split(\" \");\n            // let time = 0;\n            // if (temp.length !== 1 && !isNaN(parseInt(temp[temp.length - 1]))) {\n            //     time = parseInt(temp.pop());\n            // }\n            // temp = temp.join(\" \");\n            // wont be managing to update time here also\n            dispatch(updateTaskContent({ id: task.id, updatedTaskContent }));\n            setTaskUnderEdit(false);\n        }\n    }\n    function submitUpdatedTime(e) {\n        if (e.key === \"Enter\") {\n            dispatch(updateTaskTime({ id: task.id, updatedTime }));\n            setTimeUnderEdit(false);\n        }\n    }\n\n    function labelSelectOnBlurHandler(taskId, taskLabel, updatedLabel) {\n        setLabelUnderEdit(false);\n        updatedLabel = updatedLabel === \"none\" ? null : updatedLabel;\n        dispatch(updateTaskLabel({ id: taskId, label: updatedLabel }));\n        if (taskLabel !== updatedLabel) dispatch(updateLabelCount({ oldLabel: taskLabel, newLabel: updatedLabel }));\n    }\n\n    return (\n        <Flipped flipId={`${task.id}`}>\n            <TaskCardContainer\n                ref={forwardRBDProvided.innerRef}\n                {...forwardRBDProvided.draggableProps}\n                {...forwardRBDProvided.dragHandleProps}\n                onMouseEnter={() => setShowDragIcon(!task.isCompleted && true)}\n                onMouseLeave={() => setShowDragIcon(!task.isCompleted && false)}\n            >\n                <TaskCardDragIcon>{showDragIcon && <GrDrag />}</TaskCardDragIcon>\n\n                <TaskCardDiv isFocussed={isFocussed} labelColor={task.label !== null ? labels[task.label].color : null}>\n                    <TaskStatusDiv isFocussed={isFocussed} isCompleted={task.isCompleted}>\n                        {task.isCompleted ? (\n                            <img src={tickmark} alt=\"Done\" />\n                        ) : isFocussed ? (\n                            <img src={glowBulb} alt=\"Focussed\" />\n                        ) : (\n                            <img src={bulb} alt=\"Unfocussed\" />\n                        )}\n                        {!task.isCompleted &&\n                            (timeUnderEdit ? (\n                                <TimeEditInput\n                                    autoFocus\n                                    value={updatedTime}\n                                    onBlur={() => {\n                                        dispatch(updateTaskTime({ id: task.id, updatedTime }));\n                                        setTimeUnderEdit(false);\n                                    }}\n                                    onKeyDown={submitUpdatedTime}\n                                    onChange={(e) => setUpdatedTime(e.target.value)}\n                                />\n                            ) : (\n                                <p onDoubleClick={() => setTimeUnderEdit(true)}>{formattedTimeString(task.remainingTime)}</p>\n                            ))}\n                    </TaskStatusDiv>\n\n                    <TaskDetailsDiv>\n                        <TaskContentDiv>\n                            {taskUnderEdit ? (\n                                <TaskEditInput\n                                    autoFocus\n                                    value={updatedTaskContent}\n                                    onBlur={() => {\n                                        dispatch(updateTaskContent({ id: task.id, updatedTaskContent }));\n                                        setTaskUnderEdit(false);\n                                    }}\n                                    onKeyDown={submitUpdatedTaskContent}\n                                    onChange={(e) => setUpdatedTaskContent(e.target.value)}\n                                />\n                            ) : (\n                                <p onDoubleClick={() => setTaskUnderEdit(true)}>{previewTask(task.content)}</p>\n                            )}\n                        </TaskContentDiv>\n\n                        <TaskControllerDiv>\n                            {!task.isCompleted && (\n                                <TaskActionButton\n                                    isDoneBtn={false}\n                                    onClick={\n                                        isFocussed\n                                            ? () => {\n                                                  if (task.isRunning) dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n                                                  dispatch(resetFocussedTask());\n                                              }\n                                            : () => {\n                                                  if (focussedTaskIndex !== -1) dispatch(toggleIsRunning({ idx: focussedTaskIndex, val: false }));\n                                                  dispatch(focusOnTask(taskIndex));\n                                              }\n                                    }\n                                >\n                                    <p>{isFocussed ? \"Unfocus\" : \"Focus\"}</p>\n                                </TaskActionButton>\n                            )}\n\n                            <TaskActionButton\n                                isDoneBtn={true}\n                                onClick={\n                                    task.isCompleted\n                                        ? (e) => {\n                                              if (focussedTaskIndex !== -1 && focussedTaskGlobalKey < task.globalKey) {\n                                                  dispatch(focusOnTask(focussedTaskIndex + 1));\n                                              }\n                                              dispatch(toggleIsCompleted(task.id));\n                                              dispatch(rearrange({ id: task.id, markedAsComplete: false }));\n                                              e.stopPropagation();\n                                          }\n                                        : (e) => {\n                                              if (taskIndex < focussedTaskIndex) dispatch(focusOnTask(focussedTaskIndex - 1));\n                                              if (task.isRunning) dispatch(toggleIsRunning({ idx: taskIndex }));\n                                              if (isFocussed) dispatch(resetFocussedTask());\n                                              dispatch(toggleIsCompleted(task.id));\n                                              dispatch(rearrange({ id: task.id, markedAsComplete: true }));\n                                              e.stopPropagation();\n                                          }\n                                }\n                            >\n                                <p>{task.isCompleted ? \"Undone\" : \"Done\"}</p>\n                            </TaskActionButton>\n\n                            <TaskLabelContainer onClick={() => setLabelUnderEdit(true)} labelColor={task.label !== null ? labels[task.label].color : null}>\n                                {labelUnderEdit ? (\n                                    <TaskLabelSelect onBlur={labelSelectOnBlurHandler} taskId={task.id} taskLabel={task.label} />\n                                ) : task.label !== null ? (\n                                    <p>#{task.label}</p>\n                                ) : (\n                                    <p>Add label</p>\n                                )}\n                            </TaskLabelContainer>\n\n                            {!isFocussed && (\n                                <TaskDeleteButton\n                                    onClick={(e) => {\n                                        if (taskIndex < focussedTaskIndex) dispatch(focusOnTask(focussedTaskIndex - 1));\n                                        dispatch(remove(task.id));\n                                        if (task.label !== null) dispatch(updateLabelCount({ oldLabel: task.label, newLabel: null }));\n                                        e.stopPropagation();\n                                    }}\n                                >\n                                    <BsTrash />\n                                </TaskDeleteButton>\n                            )}\n                        </TaskControllerDiv>\n                    </TaskDetailsDiv>\n                </TaskCardDiv>\n            </TaskCardContainer>\n        </Flipped>\n    );\n}\n","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskLabelSelect.js",["107"],"/home/pg07codes/Desktop/fokus/src/containers/App.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js",[],["108","109"],"/home/pg07codes/Desktop/fokus/src/helpers/index.js",["110","111","112","113"],"export function formattedTimeString(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}:${secs}`;\n}\n\nexport function formattedTimeStringv2(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}m ${secs}s`;\n}\n\nexport function getFormattedDate() {\n    let d = new Date();\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    return {\n        day: days[d.getDay()],\n        month: months[d.getMonth()],\n        date: d.getDate(),\n        year: d.getFullYear(),\n    };\n}\n","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js",["114","115","116","117","118"],"/home/pg07codes/Desktop/fokus/src/serviceWorker.js",[],["119","120"],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js",["121","122","123"],"/home/pg07codes/Desktop/fokus/src/containers/menu/Menu.js",[],["124","125"],"/home/pg07codes/Desktop/fokus/src/index.js",[],["126","127"],"/home/pg07codes/Desktop/fokus/src/containers/miscBoard/MiscBoard.js",["128","129"],"/home/pg07codes/Desktop/fokus/src/components/musicBox/Soundscapes.js",[],"/home/pg07codes/Desktop/fokus/src/components/musicBox/musicUtils.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/Divider.js",[],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/LabelPie.js",[],{"ruleId":"130","severity":1,"message":"131","line":2,"column":23,"nodeType":"132","messageId":"133","endLine":2,"endColumn":34},{"ruleId":"130","severity":1,"message":"134","line":3,"column":18,"nodeType":"132","messageId":"133","endLine":3,"endColumn":21},{"ruleId":"130","severity":1,"message":"135","line":12,"column":10,"nodeType":"132","messageId":"133","endLine":12,"endColumn":19},{"ruleId":"130","severity":1,"message":"131","line":2,"column":23,"nodeType":"132","messageId":"133","endLine":2,"endColumn":34},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"136","replacedBy":"140"},{"ruleId":"138","replacedBy":"141"},{"ruleId":"130","severity":1,"message":"142","line":210,"column":17,"nodeType":"132","messageId":"133","endLine":210,"endColumn":21},{"ruleId":"130","severity":1,"message":"131","line":2,"column":23,"nodeType":"132","messageId":"133","endLine":2,"endColumn":34},{"ruleId":"136","replacedBy":"143"},{"ruleId":"138","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":5,"column":14,"nodeType":"147","messageId":"148","endLine":5,"endColumn":16},{"ruleId":"145","severity":1,"message":"146","line":10,"column":14,"nodeType":"147","messageId":"148","endLine":10,"endColumn":16},{"ruleId":"145","severity":1,"message":"146","line":23,"column":14,"nodeType":"147","messageId":"148","endLine":23,"endColumn":16},{"ruleId":"145","severity":1,"message":"146","line":28,"column":14,"nodeType":"147","messageId":"148","endLine":28,"endColumn":16},{"ruleId":"145","severity":1,"message":"149","line":46,"column":52,"nodeType":"147","messageId":"148","endLine":46,"endColumn":54},{"ruleId":"145","severity":1,"message":"149","line":53,"column":64,"nodeType":"147","messageId":"148","endLine":53,"endColumn":66},{"ruleId":"145","severity":1,"message":"146","line":56,"column":64,"nodeType":"147","messageId":"148","endLine":56,"endColumn":66},{"ruleId":"145","severity":1,"message":"146","line":192,"column":56,"nodeType":"147","messageId":"148","endLine":192,"endColumn":58},{"ruleId":"145","severity":1,"message":"146","line":235,"column":56,"nodeType":"147","messageId":"148","endLine":235,"endColumn":58},{"ruleId":"136","replacedBy":"150"},{"ruleId":"138","replacedBy":"151"},{"ruleId":"130","severity":1,"message":"152","line":1,"column":17,"nodeType":"132","messageId":"133","endLine":1,"endColumn":25},{"ruleId":"145","severity":1,"message":"149","line":39,"column":18,"nodeType":"147","messageId":"148","endLine":39,"endColumn":20},{"ruleId":"145","severity":1,"message":"146","line":47,"column":19,"nodeType":"147","messageId":"148","endLine":47,"endColumn":21},{"ruleId":"136","replacedBy":"153"},{"ruleId":"138","replacedBy":"154"},{"ruleId":"136","replacedBy":"155"},{"ruleId":"138","replacedBy":"156"},{"ruleId":"130","severity":1,"message":"157","line":2,"column":10,"nodeType":"132","messageId":"133","endLine":2,"endColumn":21},{"ruleId":"130","severity":1,"message":"131","line":2,"column":23,"nodeType":"132","messageId":"133","endLine":2,"endColumn":34},"no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","'css' is defined but never used.","'playSound' is defined but never used.","no-native-reassign",["158"],"no-negated-in-lhs",["159"],["158"],["159"],"'temp' is assigned a value but never used.",["158"],["159"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.",["158"],["159"],"'useState' is defined but never used.",["158"],["159"],["158"],["159"],"'useSelector' is defined but never used.","no-global-assign","no-unsafe-negation"]