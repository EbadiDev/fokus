[{"/home/pg07codes/Desktop/fokus/src/store/index.js":"1","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/TaskSummary.js":"2","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/LabelPie.js":"3","/home/pg07codes/Desktop/fokus/src/helpers/index.js":"4","/home/pg07codes/Desktop/fokus/src/containers/App.js":"5","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js":"6","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/FocussedTask.js":"7","/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js":"8","/home/pg07codes/Desktop/fokus/src/components/musicBox/musicUtils.js":"9","/home/pg07codes/Desktop/fokus/src/containers/miscBoard/MiscBoard.js":"10","/home/pg07codes/Desktop/fokus/src/components/musicBox/MusicVolumeControl.js":"11","/home/pg07codes/Desktop/fokus/src/components/musicBox/Soundscapes.js":"12","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyFocusBox.js":"13","/home/pg07codes/Desktop/fokus/src/index.js":"14","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js":"15","/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js":"16","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyTaskSummary.js":"17","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js":"18","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskLabelSelect.js":"19","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/ListTimeSummary.js":"20","/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js":"21","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js":"22"},{"size":214,"mtime":1612760411462,"results":"23","hashOfConfig":"24"},{"size":2564,"mtime":1613326554228,"results":"25","hashOfConfig":"24"},{"size":2931,"mtime":1613399787690,"results":"26","hashOfConfig":"24"},{"size":1677,"mtime":1613476811199,"results":"27","hashOfConfig":"24"},{"size":562,"mtime":1613280812733,"results":"28","hashOfConfig":"24"},{"size":14311,"mtime":1613481336182,"results":"29","hashOfConfig":"24"},{"size":6495,"mtime":1613389490292,"results":"30","hashOfConfig":"24"},{"size":1009,"mtime":1613033460357,"results":"31","hashOfConfig":"24"},{"size":1107,"mtime":1613413100147,"results":"32","hashOfConfig":"24"},{"size":1448,"mtime":1613414475290,"results":"33","hashOfConfig":"24"},{"size":1524,"mtime":1613415365940,"results":"34","hashOfConfig":"24"},{"size":3678,"mtime":1613415321216,"results":"35","hashOfConfig":"24"},{"size":2990,"mtime":1613063915917,"results":"36","hashOfConfig":"24"},{"size":651,"mtime":1608902523877,"results":"37","hashOfConfig":"24"},{"size":12281,"mtime":1613482494755,"results":"38","hashOfConfig":"24"},{"size":528,"mtime":1611252515979,"results":"39","hashOfConfig":"24"},{"size":1046,"mtime":1613072484728,"results":"40","hashOfConfig":"24"},{"size":6215,"mtime":1613476169132,"results":"41","hashOfConfig":"24"},{"size":1304,"mtime":1613218352233,"results":"42","hashOfConfig":"24"},{"size":695,"mtime":1613481644269,"results":"43","hashOfConfig":"24"},{"size":2228,"mtime":1613481720038,"results":"44","hashOfConfig":"24"},{"size":5220,"mtime":1613479901409,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"g1paqb",{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"48"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/home/pg07codes/Desktop/fokus/src/store/index.js",[],["100","101"],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/TaskSummary.js",["102"],"import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { Line } from \"rc-progress\";\n\nconst TaskSummaryDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    position: relative;\n    width: 100%;\n    height: 100%;\n`;\n\nconst SummaryDataContainer = styled.div`\n    display: flex;\n    /* justify-content: space-evenly; */\n    align-items: center;\n    width: 90%;\n    height: 60%;\n    /* background-color: #f5f5fa; */\n`;\n\nconst ColorDot = styled.div`\n    width: 18px;\n    height: 18px;\n    background-color: ${(p) => p.color};\n    border-radius: 50%;\n    margin-right: 10px;\n`;\n\nconst SummaryDataDiv = styled.div`\n    display: flex;\n    align-items: center;\n    width: 40%;\n    margin-top: 5px;\n    margin-left: 3px;\n    /* background-color: #c1c1c1; */\n    p {\n        font-size: 1.2em;\n        font-weight: bold;\n        margin: 0;\n        margin-right: 3px;\n    }\n    span {\n        font-size: 0.5em;\n    }\n`;\n\nconst CompletionPercentContainer = styled.div`\n    display: flex;\n    align-items: center;\n    position: absolute;\n    bottom: 10px;\n    right: 15px;\n    p {\n        font-weight: bold;\n    }\n    span {\n        font-size: 0.5em;\n    }\n`;\n\nexport function TaskSummary() {\n    const completedTasksCount = useSelector((s) => s.tasks.meta.completedTasksCount);\n    const totalTasksCount = useSelector((s) => s.tasks.taskArray.length);\n    let completionPercent = totalTasksCount !== 0 ? Math.floor((completedTasksCount / totalTasksCount) * 100) : 100;\n    return (\n        <TaskSummaryDiv>\n            <SummaryDataContainer>\n                <SummaryDataDiv>\n                    <ColorDot color={\"#0000cd\"} />\n                    <p>{completedTasksCount}</p>\n                    <span>done</span>\n                </SummaryDataDiv>\n                <SummaryDataDiv>\n                    <ColorDot color={\"#c1c1d7\"} />\n                    <p>{totalTasksCount}</p>\n                    <span>tasks</span>\n                </SummaryDataDiv>\n                <CompletionPercentContainer>\n                    <p>{completionPercent}</p>\n                    <span>%</span>\n                </CompletionPercentContainer>\n            </SummaryDataContainer>\n            <div style={{ width: \"90%\" }}>\n                <Line percent={completionPercent} strokeWidth=\"5\" trailWidth=\"5\" trailColor=\"#C1C1D7\" strokeColor=\"#0000CD\" />\n            </div>\n        </TaskSummaryDiv>\n    );\n}\n","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/LabelPie.js",[],["103","104"],"/home/pg07codes/Desktop/fokus/src/helpers/index.js",["105","106","107","108","109","110"],"export function formattedTimeString(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}:${secs}`;\n}\n\nexport function formattedTimeStringv2(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}m ${secs}s`;\n}\n\nexport function getFormattedDate() {\n    let d = new Date();\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    return {\n        day: days[d.getDay()],\n        month: months[d.getMonth()],\n        date: d.getDate(),\n        year: d.getFullYear(),\n    };\n}\n\nexport function getFormattedListTimeSummary(x){\n    let mins = Math.floor(x % 3600 / 60);\n    let hours = Math.floor(x / 3600);\n\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n    if (hours == 0) {\n        hours = `00`;\n    } else if (hours < 10) {\n        hours = `0${hours}`;\n    }\n\n    return `${hours}h ${mins}m`;\n}\n\nexport function debounce(fn, wait) {\n    let t;\n    return function () {\n        clearTimeout(t);\n        t = setTimeout(() => fn.apply(this, arguments), wait);\n    };\n}\n","/home/pg07codes/Desktop/fokus/src/containers/App.js",[],["111","112"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js",["113"],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/FocussedTask.js",["114"],"import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled, { css } from \"styled-components\";\nimport { toggleIsRunning, tick, updateTaskTimeByVal, resetTaskTimer, toggleSoundscapeState } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport useTimer from \"../../hooks/useTimer\";\nimport { CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { ResetIcon } from \"./../../components/customIcons\";\nimport dingSound from \"./../../sounds/ding.mp3\";\nimport { BsFillPauseFill, BsFillPlayFill } from \"react-icons/bs\";\nimport { formattedTimeStringv2 } from \"./../../helpers\";\n\nlet dingSoundElement = new Audio(dingSound);\n\nconst FocussedTaskDiv = styled.div`\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n`;\n\nconst FocussedTaskTimer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 50%;\n`;\n\nconst CountdownTimerDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 90px;\n    height: 90px;\n    background-color: #fff;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    border-radius: 50%;\n    & > p {\n        font-size: 0.9em;\n        font-weight: bold;\n        color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#000\")};\n    }\n`;\n\nconst PlayPauseButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 55px;\n    height: 55px;\n    background-color: #0000cd;\n    border-radius: 50%;\n    margin: 10px 20px;\n    box-shadow: 0 1px 7px rgba(0, 0, 0, 0.4);\n    -webkit-box-shadow: 0 1px 7px rgba(0, 0, 0, 0.4);\n    svg {\n        color: #fff;\n        font-size: 1.8em;\n        margin-left: ${(p) => (p.isPlayBtn ? \"3px\" : \"0\")};\n    }\n    cursor: pointer;\n`;\n\nconst UpdateTimeButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 30px;\n    height: 30px;\n    cursor: pointer;\n`;\n\nconst ResetButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    background-color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#0000cd\")};\n    border-radius: 50%;\n    width: 30px;\n    height: 30px;\n    top: 7px;\n    right: 7px;\n    cursor: ${(p) => (p.isDisabled ? \"default\" : \"pointer\")};\n    svg {\n        color: #fff;\n        width: 20px;\n    }\n`;\n\nconst FocussedTaskContent = styled.div`\n    display: flex;\n    justify-content: center;\n    text-align: center;\n    margin: 5px;\n    height: 30%;\n    width: 90%;\n    word-wrap: break-word;\n    p {\n        min-width: 0;\n        font-weight: bold;\n        margin: 3px;\n    }\n`;\n\nconst FocussedTaskController = styled.div`\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n    height: 20%;\n    margin-bottom: 10px;\n`;\n\nexport function FocussedTask() {\n    const focussedTaskIndex = useSelector((state) => state.tasks.meta.focussedTaskIndex);\n    let focussedTask = useSelector((state) => (focussedTaskIndex !== -1 ? state.tasks.taskArray[focussedTaskIndex] : null));\n    const dispatch = useDispatch();\n    const delay = 1000;\n    useTimer(\n        () => {\n            if (focussedTask === null) return;\n            else if (focussedTask.remainingTime > 0) {\n                dispatch(tick(focussedTaskIndex));\n            } else if (focussedTask.remainingTime === 0) {\n                dispatch(toggleSoundscapeState(false));\n                dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n                dingSoundElement.play();\n            }\n        },\n        focussedTask !== null && focussedTask.isRunning ? delay : null\n    );\n\n    function updateTaskTimeHandler(val) {\n        if (focussedTask.isCompleted) return;\n        if (focussedTask.isRunning) dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n        dispatch(updateTaskTimeByVal({ focussedTaskIndex, val }));\n        dispatch(toggleSoundscapeState(false));\n    }\n\n    function playPauseHandler(focussedTaskIndex, wasTaskRunning) {\n        dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n        if (wasTaskRunning) {\n            console.log(\"set to pausing sound\");\n            dispatch(toggleSoundscapeState(false));\n        } else {\n            console.log(\"set to playing sound\");\n            dispatch(toggleSoundscapeState(true));\n        }\n    }\n\n    return (\n        <FocussedTaskDiv>\n            <FocussedTaskTimer>\n                <div style={{ width: 120, height: 120 }}>\n                    <CircularProgressbarWithChildren\n                        value={focussedTask.time !== 0 ? Math.floor((focussedTask.remainingTime / focussedTask.time) * 100) : 0}\n                        styles={buildStyles({\n                            strokeLinecap: \"butt\",\n                            pathColor: \"#0000cd\",\n                            trailColor: \"#EFF7FF\",\n                        })}\n                        strokeWidth={7}\n                    >\n                        <CountdownTimerDiv>\n                            <p>{formattedTimeStringv2(focussedTask.remainingTime)}</p>\n                        </CountdownTimerDiv>\n                    </CircularProgressbarWithChildren>\n                </div>\n            </FocussedTaskTimer>\n            <FocussedTaskContent>\n                <p>{focussedTask.content}</p>\n            </FocussedTaskContent>\n            <FocussedTaskController>\n                <UpdateTimeButtonDiv onClick={() => updateTaskTimeHandler(-5)}>\n                    <h4>-5</h4>\n                </UpdateTimeButtonDiv>\n                <PlayPauseButtonDiv isPlayBtn={!focussedTask.isRunning} onClick={() => playPauseHandler(focussedTaskIndex, focussedTask.isRunning)}>\n                    {focussedTask.isRunning ? <BsFillPauseFill /> : <BsFillPlayFill />}\n                </PlayPauseButtonDiv>\n\n                <UpdateTimeButtonDiv onClick={() => updateTaskTimeHandler(5)}>\n                    <h4>+5</h4>\n                </UpdateTimeButtonDiv>\n            </FocussedTaskController>\n            <ResetButtonDiv\n                onClick={() => {\n                    dispatch(toggleSoundscapeState(false));\n                    dispatch(resetTaskTimer(focussedTaskIndex));\n                }}\n            >\n                <ResetIcon />\n            </ResetButtonDiv>\n        </FocussedTaskDiv>\n    );\n}\n",["115","116"],"/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js",[],"/home/pg07codes/Desktop/fokus/src/components/musicBox/musicUtils.js",[],"/home/pg07codes/Desktop/fokus/src/containers/miscBoard/MiscBoard.js",["117","118"],"import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { Soundscapes } from \"../../components/musicBox/Soundscapes\";\nimport { LabelPie } from \"./../../components/FocusBoard/LabelPie\";\n\nconst MiscBoardContainer = styled.div`\n    flex: 1 1 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`;\nconst MusicBoxContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    position: relative;\n    width: 320px;\n    height: 180px;\n    margin: 20px;\n    border-radius: 10px;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    background-color: #f7f7fa;\n`;\n\nconst LabelPieContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    width: 160px;\n    height: 160px;\n    margin: 20px;\n    border-radius: 10px;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    background-color: #f7f7fa;\n`;\n\nexport function MiscBoard() {\n    return (\n        <MiscBoardContainer>\n            <LabelPieContainer>\n                <div style={{ width: 120 }}>\n                    <LabelPie />\n                </div>\n            </LabelPieContainer>\n            <MusicBoxContainer>\n                <Soundscapes />\n            </MusicBoxContainer>\n        </MiscBoardContainer>\n    );\n}\n","/home/pg07codes/Desktop/fokus/src/components/musicBox/MusicVolumeControl.js",[],"/home/pg07codes/Desktop/fokus/src/components/musicBox/Soundscapes.js",["119"],"import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { soundOptions, generateAudioElement } from \"./../../components/musicBox/musicUtils\";\nimport { changeSoundscapeTrack } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport { MusicVolumeControl } from \"./MusicVolumeControl\";\n\nconst SoundscapesContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n    border-radius:10px;\n    /* background-color: #000; */\n`;\n\nconst SoundscapesDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    width: 100%;\n    height: 70%;\n    /* background-color: #df15ad; */\n    color:#c1c1d7;\n    p {\n        margin: 0;\n        font-weight:bold;\n    }\n`;\n\nconst SoundOptionsDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 80%;\n    /* background-color: #f8faaa; */\n`;\n\nconst SoundOptionsInput = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    flex-direction: column;\n    /* background-color: #b16afa; */\n    height:70%;\n    margin: 0 5px;\n    color:${(p) => (p.isSelectedSound ? \"#0000cd\" : \"#c1c1d7\")};\n    img {\n        width: 40px;\n        margin-bottom:8px;\n        border-radius:50%;\n        border:${(p) => (p.isSelectedSound ? \"3px solid #0000cd\" : \"none\")};\n    }\n    span {\n        margin: 0;\n        font-size:0.9em;\n        font-weight:bold;\n        font-style:italic;\n    }\n`;\n\nconst SoundVolumeControl = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    /* background-color: #cad1ff; */\n    width:85%;\n    height: 20%;\n`;\n\nexport function Soundscapes() {\n    const soundscape = useSelector((s) => s.tasks.soundscape);\n    const dispatch = useDispatch();\n\n    const [soundscapeAudioElement, setSoundscapeAudioElement] = useState(() => generateAudioElement(soundscape.track, soundscape.volume));\n\n    // ---- danger zone: don't change without full surety , this code is prone to issues ---///\n\n    useEffect(() => {\n        soundscapeAudioElement.src = soundOptions[soundscape.track].src;\n    }, [soundscape.track, soundscapeAudioElement, soundscape.isPlaying]);\n\n    soundscapeAudioElement.volume = soundscape.volume;\n    soundscapeAudioElement.addEventListener(\"canplay\", () => {\n        if (soundscape.isPlaying) {\n            soundscapeAudioElement.play();\n        } else {\n            soundscapeAudioElement.pause();\n        }\n    });\n\n    // ---- danger zone: this might be due to my lack of knowledge of useEffect or weird Audio element behaviour ---///\n\n    function isSelectedSound(track) {\n        return soundscape.track === track;\n    }\n\n    return (\n        <SoundscapesContainer>\n            <SoundscapesDiv>\n                <p>Soundscapes</p>\n                <SoundOptionsDiv>\n                    {Object.keys(soundOptions).map((i) => (\n                        <SoundOptionsInput key={i} onClick={() => dispatch(changeSoundscapeTrack(i))} isSelectedSound={isSelectedSound(i)}>\n                            <img src={soundOptions[i].img} alt={i} />\n                            <span>{soundOptions[i].label}</span>\n                        </SoundOptionsInput>\n                    ))}\n                </SoundOptionsDiv>\n            </SoundscapesDiv>\n            <SoundVolumeControl>\n                <MusicVolumeControl isDisabled={soundscape.track===\"none\"}/>\n            </SoundVolumeControl>\n        </SoundscapesContainer>\n    );\n}\n",["120","121"],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyFocusBox.js",[],"/home/pg07codes/Desktop/fokus/src/index.js",[],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js",["122","123","124","125","126"],"/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js",[],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyTaskSummary.js",[],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js",["127","128","129"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskLabelSelect.js",["130"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/ListTimeSummary.js",[],"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js",["131"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js",[],{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":2,"column":23,"nodeType":"138","messageId":"139","endLine":2,"endColumn":34},{"ruleId":"132","replacedBy":"140"},{"ruleId":"134","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":5,"column":14,"nodeType":"144","messageId":"145","endLine":5,"endColumn":16},{"ruleId":"142","severity":1,"message":"143","line":10,"column":14,"nodeType":"144","messageId":"145","endLine":10,"endColumn":16},{"ruleId":"142","severity":1,"message":"143","line":23,"column":14,"nodeType":"144","messageId":"145","endLine":23,"endColumn":16},{"ruleId":"142","severity":1,"message":"143","line":28,"column":14,"nodeType":"144","messageId":"145","endLine":28,"endColumn":16},{"ruleId":"142","severity":1,"message":"143","line":53,"column":14,"nodeType":"144","messageId":"145","endLine":53,"endColumn":16},{"ruleId":"142","severity":1,"message":"143","line":58,"column":15,"nodeType":"144","messageId":"145","endLine":58,"endColumn":17},{"ruleId":"132","replacedBy":"146"},{"ruleId":"134","replacedBy":"147"},{"ruleId":"136","severity":1,"message":"148","line":211,"column":17,"nodeType":"138","messageId":"139","endLine":211,"endColumn":21},{"ruleId":"136","severity":1,"message":"149","line":3,"column":18,"nodeType":"138","messageId":"139","endLine":3,"endColumn":21},{"ruleId":"132","replacedBy":"150"},{"ruleId":"134","replacedBy":"151"},{"ruleId":"136","severity":1,"message":"152","line":2,"column":10,"nodeType":"138","messageId":"139","endLine":2,"endColumn":21},{"ruleId":"136","severity":1,"message":"137","line":2,"column":23,"nodeType":"138","messageId":"139","endLine":2,"endColumn":34},{"ruleId":"136","severity":1,"message":"153","line":79,"column":36,"nodeType":"138","messageId":"139","endLine":79,"endColumn":61},{"ruleId":"132","replacedBy":"154"},{"ruleId":"134","replacedBy":"155"},{"ruleId":"142","severity":1,"message":"156","line":49,"column":52,"nodeType":"144","messageId":"145","endLine":49,"endColumn":54},{"ruleId":"142","severity":1,"message":"156","line":60,"column":64,"nodeType":"144","messageId":"145","endLine":60,"endColumn":66},{"ruleId":"142","severity":1,"message":"143","line":63,"column":64,"nodeType":"144","messageId":"145","endLine":63,"endColumn":66},{"ruleId":"142","severity":1,"message":"143","line":238,"column":56,"nodeType":"144","messageId":"145","endLine":238,"endColumn":58},{"ruleId":"142","severity":1,"message":"143","line":281,"column":56,"nodeType":"144","messageId":"145","endLine":281,"endColumn":58},{"ruleId":"136","severity":1,"message":"157","line":1,"column":17,"nodeType":"138","messageId":"139","endLine":1,"endColumn":25},{"ruleId":"142","severity":1,"message":"156","line":39,"column":18,"nodeType":"144","messageId":"145","endLine":39,"endColumn":20},{"ruleId":"142","severity":1,"message":"143","line":47,"column":19,"nodeType":"144","messageId":"145","endLine":47,"endColumn":21},{"ruleId":"136","severity":1,"message":"137","line":2,"column":23,"nodeType":"138","messageId":"139","endLine":2,"endColumn":34},{"ruleId":"136","severity":1,"message":"137","line":2,"column":23,"nodeType":"138","messageId":"139","endLine":2,"endColumn":34},"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar",["158"],["159"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["158"],["159"],"'temp' is assigned a value but never used.","'css' is defined but never used.",["158"],["159"],"'useSelector' is defined but never used.","'setSoundscapeAudioElement' is assigned a value but never used.",["158"],["159"],"Expected '!==' and instead saw '!='.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]