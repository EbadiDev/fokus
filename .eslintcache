[{"/home/pg07codes/Desktop/fokus/src/components/notes/NoteCard.js":"1","/home/pg07codes/Desktop/fokus/src/helpers/themeStyles.js":"2","/home/pg07codes/Desktop/fokus/src/components/notes/NewNoteButton.js":"3","/home/pg07codes/Desktop/fokus/src/components/notes/NotesPreview.js":"4","/home/pg07codes/Desktop/fokus/src/containers/notes/notesSlice.js":"5","/home/pg07codes/Desktop/fokus/src/components/notes/NotesListArea.js":"6","/home/pg07codes/Desktop/fokus/src/serviceWorker.js":"7","/home/pg07codes/Desktop/fokus/src/containers/settings/settingsSlice.js":"8","/home/pg07codes/Desktop/fokus/src/containers/dashboard/index.js":"9","/home/pg07codes/Desktop/fokus/src/containers/mobileView/index.js":"10","/home/pg07codes/Desktop/fokus/src/containers/settings/index.js":"11","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js":"12","/home/pg07codes/Desktop/fokus/src/containers/dashboard/DashboardHero.js":"13","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskLabelSelect.js":"14","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/LabelPie.js":"15","/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js":"16","/home/pg07codes/Desktop/fokus/src/containers/App.js":"17","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js":"18","/home/pg07codes/Desktop/fokus/src/components/dashBoard/DayDate.js":"19","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/ProgressRings.js":"20","/home/pg07codes/Desktop/fokus/src/containers/dashboard/DashboardMain.js":"21","/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js":"22","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TimeProgressCard.js":"23","/home/pg07codes/Desktop/fokus/src/components/notes/NoteSearchInput.js":"24","/home/pg07codes/Desktop/fokus/src/containers/notes/index.js":"25","/home/pg07codes/Desktop/fokus/src/index.js":"26","/home/pg07codes/Desktop/fokus/src/store/index.js":"27","/home/pg07codes/Desktop/fokus/src/helpers/index.js":"28","/home/pg07codes/Desktop/fokus/src/helpers/constants.js":"29","/home/pg07codes/Desktop/fokus/src/helpers/quotes.js":"30","/home/pg07codes/Desktop/fokus/src/components/MusicBox/musicUtils.js":"31","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/NoTasks.js":"32","/home/pg07codes/Desktop/fokus/src/containers/settings/DefaultTaskTime.js":"33","/home/pg07codes/Desktop/fokus/src/components/MusicBox/Soundscapes.js":"34","/home/pg07codes/Desktop/fokus/src/components/MusicBox/MusicVolumeControl.js":"35","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js":"36","/home/pg07codes/Desktop/fokus/src/containers/settings/DefaultTaskLabel.js":"37","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/FocussedTask.js":"38","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/EmptyLabelPie.js":"39","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TaskProgressCard.js":"40","/home/pg07codes/Desktop/fokus/src/containers/miscBoard/MiscBoard.js":"41","/home/pg07codes/Desktop/fokus/src/store/localStorageUtils.js":"42","/home/pg07codes/Desktop/fokus/src/containers/settings/AutoMarkDone.js":"43","/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js":"44","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyFocusBox.js":"45","/home/pg07codes/Desktop/fokus/src/containers/menu/Menu.js":"46","/home/pg07codes/Desktop/fokus/src/containers/settings/NotesViewToggle.js":"47","/home/pg07codes/Desktop/fokus/src/containers/settings/DarkThemeToggle.js":"48","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/Divider.js":"49"},{"size":2232,"mtime":1649965646983,"results":"50","hashOfConfig":"51"},{"size":620,"mtime":1629743469883,"results":"52","hashOfConfig":"53"},{"size":1772,"mtime":1630463534123,"results":"54","hashOfConfig":"53"},{"size":7450,"mtime":1629799739137,"results":"55","hashOfConfig":"53"},{"size":1416,"mtime":1649965646983,"results":"56","hashOfConfig":"51"},{"size":2448,"mtime":1630462622861,"results":"57","hashOfConfig":"53"},{"size":5141,"mtime":1608877484447,"results":"58","hashOfConfig":"53"},{"size":1312,"mtime":1630462081787,"results":"59","hashOfConfig":"53"},{"size":664,"mtime":1614781857782,"results":"60","hashOfConfig":"53"},{"size":968,"mtime":1630464600484,"results":"61","hashOfConfig":"53"},{"size":2006,"mtime":1630333361157,"results":"62","hashOfConfig":"53"},{"size":17173,"mtime":1618149920633,"results":"63","hashOfConfig":"53"},{"size":1974,"mtime":1615295646894,"results":"64","hashOfConfig":"53"},{"size":1370,"mtime":1649965646983,"results":"65","hashOfConfig":"51"},{"size":2823,"mtime":1615018247500,"results":"66","hashOfConfig":"53"},{"size":1528,"mtime":1649965646987,"results":"67","hashOfConfig":"51"},{"size":2007,"mtime":1649965646983,"results":"68","hashOfConfig":"51"},{"size":6842,"mtime":1615020414264,"results":"69","hashOfConfig":"53"},{"size":1423,"mtime":1629914008511,"results":"70","hashOfConfig":"53"},{"size":4224,"mtime":1649965646983,"results":"71","hashOfConfig":"51"},{"size":520,"mtime":1629791668673,"results":"72","hashOfConfig":"53"},{"size":2090,"mtime":1614846944899,"results":"73","hashOfConfig":"53"},{"size":3090,"mtime":1615028877261,"results":"74","hashOfConfig":"53"},{"size":1795,"mtime":1630461072783,"results":"75","hashOfConfig":"53"},{"size":652,"mtime":1630332340814,"results":"76","hashOfConfig":"53"},{"size":651,"mtime":1613628682348,"results":"77","hashOfConfig":"53"},{"size":810,"mtime":1629271202035,"results":"78","hashOfConfig":"53"},{"size":2950,"mtime":1629702473159,"results":"79","hashOfConfig":"53"},{"size":113,"mtime":1615292874104,"results":"80","hashOfConfig":"53"},{"size":20133,"mtime":1619969647808,"results":"81","hashOfConfig":"53"},{"size":1285,"mtime":1615025359945,"results":"82","hashOfConfig":"53"},{"size":687,"mtime":1614690761432,"results":"83","hashOfConfig":"53"},{"size":2216,"mtime":1615050262617,"results":"84","hashOfConfig":"53"},{"size":4547,"mtime":1615026159385,"results":"85","hashOfConfig":"53"},{"size":1577,"mtime":1615026301342,"results":"86","hashOfConfig":"53"},{"size":14646,"mtime":1616219146229,"results":"87","hashOfConfig":"53"},{"size":2205,"mtime":1615050256705,"results":"88","hashOfConfig":"53"},{"size":10297,"mtime":1615052869195,"results":"89","hashOfConfig":"53"},{"size":683,"mtime":1614777868937,"results":"90","hashOfConfig":"53"},{"size":2050,"mtime":1615028874437,"results":"91","hashOfConfig":"53"},{"size":4704,"mtime":1619969656668,"results":"92","hashOfConfig":"53"},{"size":2228,"mtime":1615293995903,"results":"93","hashOfConfig":"53"},{"size":1025,"mtime":1615050268205,"results":"94","hashOfConfig":"53"},{"size":2280,"mtime":1614853424304,"results":"95","hashOfConfig":"53"},{"size":6209,"mtime":1615018632983,"results":"96","hashOfConfig":"53"},{"size":3438,"mtime":1629096189675,"results":"97","hashOfConfig":"53"},{"size":1745,"mtime":1649965646987,"results":"98","hashOfConfig":"51"},{"size":913,"mtime":1615050476184,"results":"99","hashOfConfig":"53"},{"size":2654,"mtime":1649965646983,"results":"100","hashOfConfig":"51"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"owqxi",{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"g1paqb",{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"119"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"129"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"164"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"198"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pg07codes/Desktop/fokus/src/components/notes/NoteCard.js",[],"/home/pg07codes/Desktop/fokus/src/helpers/themeStyles.js",[],"/home/pg07codes/Desktop/fokus/src/components/notes/NewNoteButton.js",[],"/home/pg07codes/Desktop/fokus/src/components/notes/NotesPreview.js",["215","216"],"import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { AnimatePresence } from \"framer-motion\";\nimport { FaArrowRight, FaTrash, FaClipboard } from \"react-icons/fa\";\nimport { colorOptions, create, update, remove } from \"../../containers/notes/notesSlice\";\nimport { motion } from \"framer-motion\";\nimport ReactMarkdown from \"react-markdown\";\nimport { AiFillEye } from \"react-icons/ai\";\nimport { RiFileEditFill } from \"react-icons/ri\";\nimport { debounce } from \"./../../helpers\";\nimport ReactTooltip from \"react-tooltip\";\n\nconst NotesPreviewContainer = styled(motion.div)`\n    display: flex;\n    flex-direction: column;\n    flex: 0 1 0;\n    position: relative;\n    border-left: solid 1px #fabb18;\n    background-color: ${(p) => p.theme.backgroundSecondary};\n`;\n\nconst NoteContentDiv = styled.div`\n    width: 100%;\n    height: 95%;\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n`;\n\nconst EditNoteInput = styled.textarea`\n    resize: none;\n    height: 100%;\n    padding: 20px 0 0 25px;\n    font-size: 1em;\n    font-family: monospace;\n    vertical-align: center;\n    border: none;\n    outline: none;\n    background-color: ${(p) => p.theme.backgroundSecondary};\n    color: ${(p) => p.theme.primaryText};\n    &::placeholder {\n        color: #c1c1d7;\n    }\n    &:focus {\n        outline: none;\n    }\n`;\n\nconst MarkdownWrapper = styled.div`\n    padding: 20px 0 0 25px;\n    color: ${(p) => p.theme.primaryText};\n`;\n\nconst NoteActionMenu = styled.div`\n    width: 100%;\n    height: 5%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background-color: #fabb18;\n`;\n\nconst MenuActionButtonGroup = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n`;\n\nconst MenuActionButton = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    cursor: pointer;\n    svg {\n        padding: 1px 10px;\n        color: ${(p) => p.theme.primaryText};\n        font-size: 1em;\n    }\n    &:hover {\n        background-color: ${(p) => p.theme.backgroundSecondary};\n    }\n`;\n\nconst NoteColorSelectionBox = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 8px;\n    height: 100%;\n    width: 180px;\n    margin: 4px;\n`;\n\nconst ColorOption = styled.div`\n    display: inline-block;\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    cursor: pointer;\n    background-color: ${(p) => p.color};\n    background-clip: content-box;\n    padding: 2px;\n    margin: 0 3px;\n    border: ${(p) => (p.isSelected ? \"3px solid black\" : \"\")};\n`;\n\nconst debouncedUpdateNoteContent = debounce((dispatch, id, updatedNoteContent) => {\n    dispatch(update({ id: id, noteContent: updatedNoteContent.trim() }));\n}, 1000);\n\nexport default function NotesPreview({ note, setNoteInPreview }) {\n    const dispatch = useDispatch();\n    const [editNote, setEditNote] = useState();\n    const [noteContent, setNoteContent] = useState();\n    const [noteColor, setNoteColor] = useState();\n\n    useEffect(() => {\n        if (note !== null) {\n            setNoteContent(note.content);\n            setNoteColor(note.color);\n            setEditNote(true);\n        }\n    }, [note]);\n\n    const handleContentChange = (updatedNoteContent) => {\n        setNoteContent(updatedNoteContent);\n        debouncedUpdateNoteContent(dispatch, note.id, updatedNoteContent);\n    };\n\n    const handleColorUpdate = (note, noteColor) => {\n        let updatePayload = {\n            id: note.id,\n            noteColor,\n        };\n        dispatch(update(updatePayload));\n        setNoteColor(noteColor);\n    };\n\n    const handleDeleteNoteAction = (id) => {\n        dispatch(remove(id));\n        setNoteInPreview(null);\n    };\n\n    const handleCloseAction = () => {\n        dispatch(remove(null)); // clears all empty body notes\n        setNoteInPreview(null);\n    };\n\n    return (\n        <AnimatePresence>\n            <NotesPreviewContainer\n                initial={{\n                    flex: note === null ? \"0 1 0\" : \"2 1 0\",\n                }}\n                animate={{\n                    flex: note === null ? \"0 1 0\" : \"2 1 0\",\n                }}\n            >\n                {note !== null && (\n                    <>\n                        <NoteActionMenu>\n                            <MenuActionButtonGroup>\n                                <MenuActionButton onClick={() => handleCloseAction()}>\n                                    <FaArrowRight data-for=\"closeAction\" data-tip=\"\" />\n                                    <ReactTooltip id=\"closeAction\" getContent={() => \"Close Note\"} />\n                                </MenuActionButton>\n                                <MenuActionButton data-for=\"viewOrEditAction\" data-tip=\"\" onClick={() => setEditNote(!editNote)}>\n                                    {editNote ? <AiFillEye /> : <RiFileEditFill />}\n                                    <ReactTooltip id=\"viewOrEditAction\" getContent={() => (editNote ? \"View Markdown\" : \"Edit Note\")} />\n                                </MenuActionButton>\n                                <MenuActionButton onClick={() => navigator.clipboard.writeText(noteContent)}>\n                                    <FaClipboard data-for=\"copyAction\" data-tip=\"\" />\n                                    <ReactTooltip id=\"copyAction\" getContent={() => \"Copy Note\"} />\n                                </MenuActionButton>\n\n                                <MenuActionButton onClick={() => handleDeleteNoteAction(note.id)}>\n                                    <FaTrash data-for=\"deleteAction\" data-tip=\"\" />\n                                    <ReactTooltip id=\"deleteAction\" getContent={() => \"Delete Note\"} />\n                                </MenuActionButton>\n                            </MenuActionButtonGroup>\n                            <NoteColorSelectionBox>\n                                {Object.keys(colorOptions).map((color, idx) => (\n                                    <ColorOption\n                                        key={idx}\n                                        onClick={() => handleColorUpdate(note, colorOptions[color])}\n                                        isSelected={noteColor === colorOptions[color]}\n                                        color={colorOptions[color]}\n                                    />\n                                ))}\n                            </NoteColorSelectionBox>\n                        </NoteActionMenu>\n                        <NoteContentDiv>\n                            {editNote ? (\n                                <EditNoteInput\n                                    placeholder=\"Type note here..\"\n                                    autoFocus\n                                    type=\"text\"\n                                    value={noteContent}\n                                    onChange={(e) => handleContentChange(e.target.value)}\n                                />\n                            ) : (\n                                <MarkdownWrapper>\n                                    <ReactMarkdown children={noteContent} />\n                                </MarkdownWrapper>\n                            )}\n                        </NoteContentDiv>\n                    </>\n                )}\n            </NotesPreviewContainer>\n        </AnimatePresence>\n    );\n}\n",["217","218"],"/home/pg07codes/Desktop/fokus/src/containers/notes/notesSlice.js",[],"/home/pg07codes/Desktop/fokus/src/components/notes/NotesListArea.js",[],"/home/pg07codes/Desktop/fokus/src/serviceWorker.js",[],"/home/pg07codes/Desktop/fokus/src/containers/settings/settingsSlice.js",[],["219","220"],"/home/pg07codes/Desktop/fokus/src/containers/dashboard/index.js",[],["221","222"],"/home/pg07codes/Desktop/fokus/src/containers/mobileView/index.js",[],"/home/pg07codes/Desktop/fokus/src/containers/settings/index.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js",[],["223","224"],"/home/pg07codes/Desktop/fokus/src/containers/dashboard/DashboardHero.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskLabelSelect.js",["225"],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/LabelPie.js",[],["226","227"],"/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js",[],"/home/pg07codes/Desktop/fokus/src/containers/App.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js",["228"],"import React, { useCallback, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { create, incrementGlobalKey, focusOnTask, updateLabelCount } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport styled from \"styled-components\";\nimport { AiFillPlusCircle, AiFillClockCircle } from \"react-icons/ai\";\nimport { TaskFeedback } from \"./TaskFeedback\";\nimport { debounce } from \"../../helpers\";\n\nconst TaskInputContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin: 20px 0 10px 0;\n    width: 90%;\n    max-width: 396px;\n    border-radius: 10px;\n    background-color: ${(p) => p.theme.backgroundSecondary};\n    height: 50px;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\n`;\n\nconst TaskContentInputDiv = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    height: 90%;\n    width: 70%;\n    margin-left: 10px;\n    svg {\n        font-size: 1.3em;\n        margin-right: 5px;\n        color: #fabb18;\n    }\n`;\n\nconst TaskContentInputField = styled.input`\n    height: 100%;\n    width: 90%;\n    font-size: 0.9em;\n    background-color: ${(p) => p.theme.backgroundSecondary};\n    color: ${(p) => p.theme.primaryText};\n    border: 0;\n    outline: none;\n    font-weight: bold;\n    &::placeholder {\n        color: #c1c1d7;\n    }\n`;\n\nconst TaskTimeInputDiv = styled.div`\n    display: flex;\n    align-items: center;\n    height: 90%;\n    width: 25%;\n    color: #c1c1d7;\n    span {\n        font-size: 0.7em;\n        font-weight: bold;\n    }\n    svg {\n        font-size: 1.2em;\n        color: #fabb18;\n    }\n`;\n\nconst TaskTimeInputField = styled.input`\n    height: 100%;\n    width: 30%;\n    font-size: 0.9em;\n    text-align: center;\n    background-color: ${(p) => p.theme.backgroundSecondary};\n    color: ${(p) => p.theme.primaryText};\n    border: 0;\n    outline: none;\n    font-weight: bold;\n    &::placeholder {\n        color: #c1c1d7;\n    }\n    &::-webkit-inner-spin-button,\n    &::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        appearance: none;\n        margin: 0;\n    }\n`;\n\nexport default function TaskInput() {\n\n    const defaultTime = useSelector((s) => s.settings.defaultTime);\n    const defaultLabel = useSelector((s) => s.settings.defaultLabel);\n\n    const [task, setTask] = useState(\"\");\n    const [time, setTime] = useState(defaultTime);\n\n    const [generateFeedbackForTask, setGenerateFeedbackForTask] = useState(undefined);\n    const [generateFeedbackForTime, setGenerateFeedbackForTime] = useState(undefined);\n    const [isInputValid,setInputValid] = useState(false);\n\n    let taskContentInputRef, taskTimeInputRef;\n    const meta = useSelector((s) => s.tasks.meta);\n    const labels = useSelector((s) => s.tasks.labels);\n    const dispatch = useDispatch();\n\n    function submitTask(e) {\n        if (e.key === \"Enter\" && task.trim().length >= 1 && isInputValid) {\n            let temp = task.trim().split(\" \");\n            // add a max time limit\n            let taskTime = time;\n            let label = defaultLabel;\n            if (temp.length !== 1) {\n                if (!isNaN(parseInt(temp[temp.length - 1]))) {\n                    taskTime = parseInt(temp.pop());\n                } else if (temp[temp.length - 1][0] === \"#\" && temp[temp.length - 1].length > 1 && \"wpfmeWPFME\".includes(temp[temp.length - 1][1])) {\n                    let userLabel = temp[temp.length - 1].substring(1).toLowerCase();\n                    let found = false;\n                    for (let validLabel in labels) {\n                        found = validLabel.includes(userLabel);\n                        console.log(userLabel, validLabel);\n                        if (found) {\n                            label = validLabel;\n                            temp.pop();\n                            break;\n                        }\n                    }\n                }\n            }\n\n            temp = temp.join(\" \");\n            let newTask = {\n                id: Math.floor(Math.random() * 10000),\n                globalKey: meta.globalKey,\n                content: temp,\n                time: taskTime,\n                remainingTime: taskTime,\n                isRunning: false,\n                isCompleted: false,\n                createdAt: new Date().toISOString(),\n                label: label,\n            };\n            if (meta.focussedTaskIndex !== -1) dispatch(focusOnTask(meta.focussedTaskIndex + 1));\n            dispatch(create(newTask));\n            dispatch(incrementGlobalKey());\n            if (label !== null) dispatch(updateLabelCount({ oldLabel: null, newLabel: label }));\n            setTask(\"\");\n            setTime(defaultTime);\n            taskContentInputRef.value = \"\";\n            taskTimeInputRef.value = \"\";\n            taskContentInputRef.focus();\n        }\n    }\n\n    const debouncedGenerateInputFeedback = useCallback(\n        debounce((task, time) => {\n            if (task !== undefined) setGenerateFeedbackForTask(task);\n            if (time !== undefined) setGenerateFeedbackForTime(time);\n        }, 150),\n        []\n    );\n\n    function onTaskInputChangeHandler(task) {\n        setTask(task);\n        debouncedGenerateInputFeedback(task, undefined);\n    }\n\n    function onTimeInputChangeHandler(time) {\n        setTime(time);\n        debouncedGenerateInputFeedback(undefined, time);\n    }\n\n    // improve logic - both onKeyDown and onChange executing - combining will be better.\n    return (\n        <>\n            <TaskInputContainer>\n                <TaskContentInputDiv>\n                    <AiFillPlusCircle onClick={() => taskContentInputRef.focus()} />\n                    <TaskContentInputField\n                        type=\"text\"\n                        placeholder=\"i have to focus on ...\"\n                        ref={(el) => (taskContentInputRef = el)}\n                        onChange={(e) => onTaskInputChangeHandler(e.target.value)}\n                        onKeyDown={submitTask}\n                    />\n                </TaskContentInputDiv>\n                <TaskTimeInputDiv>\n                    <AiFillClockCircle onClick={() => taskTimeInputRef.focus()} />\n                    <TaskTimeInputField\n                        type=\"number\"\n                        placeholder={defaultTime}\n                        ref={(el) => (taskTimeInputRef = el)}\n                        onChange={(e) => onTimeInputChangeHandler(e.target.value)}\n                        onKeyDown={submitTask}\n                    />\n                    <span>mins</span>\n                </TaskTimeInputDiv>\n            </TaskInputContainer>\n            <TaskFeedback task={generateFeedbackForTask} time={generateFeedbackForTime} setInputValid={setInputValid}/>\n        </>\n    );\n}\n","/home/pg07codes/Desktop/fokus/src/components/dashBoard/DayDate.js",["229"],"import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { BsCalendarFill } from \"react-icons/bs\";\nimport { getFormattedDate, getOrdinalSuffix } from \"../../helpers\";\n\nconst DayDateDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    justify-content: space-around;\n    width: 25%;\n    height: 55%;\n`;\n\nconst CalendarIconDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 20%;\n    svg {\n        color: #fabb18;\n        font-size: 1.4em;\n    }\n`;\n\nconst DayDateText = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    justify-content: center;\n    width: 70%;\n    font-weight: bold;\n    font-size: 0.8em;\n    color: ${(p) => p.theme.primaryText};\n    p {\n        margin: 0;\n    }\n    sup {\n        font-size: 0.5em;\n    }\n`;\n\nexport function DayDate() {\n    const DateObj = getFormattedDate();\n    return (\n        <DayDateDiv>\n            <CalendarIconDiv>\n                <BsCalendarFill />\n            </CalendarIconDiv>\n            <DayDateText>\n                <span>\n                    {DateObj.day} {DateObj.date}\n                    <sup>{getOrdinalSuffix(DateObj.date)}</sup>\n                </span>\n                <p>\n                    {DateObj.month}, {DateObj.year}\n                </p>\n            </DayDateText>\n        </DayDateDiv>\n    );\n}\n","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/ProgressRings.js",[],"/home/pg07codes/Desktop/fokus/src/containers/dashboard/DashboardMain.js",[],"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js",["230"],"import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { FocussedTask } from \"./../../components/FocusBoard/FocussedTask\";\nimport { EmptyFocusBox } from \"./../../components/FocusBoard/EmptyFocusBox\";\nimport { Soundscapes } from \"./../../components/MusicBox/Soundscapes\";\n\nconst FocusBoardContainer = styled.div`\n    flex: 1 1 0;\n    min-width: 346px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin:0 0 0 20px;\n    height:100%;\n    /* background-color:silver; */\n`;\n\nconst FocussedTaskContainer = styled.div`\n    display: flex;\n    align-items:center;\n    justify-content: space-between;\n    flex-direction: column;\n    width: 80%;\n    max-width: 326px;\n    height: 226px;\n    margin: 10px 0;\n    /* background-color: green; */\n`;\n\nconst MusicBoxContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    width: 80%;\n    max-width: 326px;\n    height: 186px;\n    margin: 10px 0;\n    background-color:${p=>p.theme.backgroundSecondary};\n    border-radius: 20px;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n`;\n\n// this can be improved as right now whole focus board is re-rendered and not just the focus task containter\n\nexport function FocusBoard() {\n    const focussedTaskIndex = useSelector((state) => state.tasks.meta.focussedTaskIndex);\n    const noTasks = useSelector((s) => s.tasks.taskArray.length===s.tasks.meta.completedTasksCount?true:false);\n    const noChoice = useSelector((s) => s.tasks.taskArray.length-s.tasks.meta.completedTasksCount<=1?true:false);\n    return (\n        <FocusBoardContainer>\n            <FocussedTaskContainer>\n                {focussedTaskIndex !== -1 ? <FocussedTask /> : <EmptyFocusBox noChoice={noChoice} noTasks={noTasks}/>}\n            </FocussedTaskContainer>\n            <MusicBoxContainer>\n                <Soundscapes />\n            </MusicBoxContainer>\n        </FocusBoardContainer>\n    );\n}\n",["231","232"],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TimeProgressCard.js",[],"/home/pg07codes/Desktop/fokus/src/components/notes/NoteSearchInput.js",[],["233","234"],"/home/pg07codes/Desktop/fokus/src/containers/notes/index.js",["235"],"/home/pg07codes/Desktop/fokus/src/index.js",[],["236","237"],"/home/pg07codes/Desktop/fokus/src/store/index.js",[],"/home/pg07codes/Desktop/fokus/src/helpers/index.js",["238","239","240","241","242","243","244","245","246","247","248","249"],"/home/pg07codes/Desktop/fokus/src/helpers/constants.js",[],"/home/pg07codes/Desktop/fokus/src/helpers/quotes.js",[],["250","251"],"/home/pg07codes/Desktop/fokus/src/components/MusicBox/musicUtils.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/NoTasks.js",[],"/home/pg07codes/Desktop/fokus/src/containers/settings/DefaultTaskTime.js",[],"/home/pg07codes/Desktop/fokus/src/components/MusicBox/Soundscapes.js",["252"],"/home/pg07codes/Desktop/fokus/src/components/MusicBox/MusicVolumeControl.js",[],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js",["253","254","255","256","257"],"import { createSlice } from \"@reduxjs/toolkit\";\nimport { MIN_TO_MS } from \"./../../helpers/constants\";\nimport { updatePageTitle } from \"./../../helpers\";\n\nconst labelOptions = {\n    work: {\n        color: \"#de1738\",\n        count: 0,\n    },\n    personal: {\n        color: \"#89CFF0\",\n        count: 0,\n    },\n    fitness: {\n        color: \"#76ff7a\",\n        count: 0,\n    },\n    metime: {\n        color: \"#7442c8\",\n        count: 0,\n    },\n    explore: {\n        color: \"#efc0fe\",\n        count: 0,\n    },\n};\n\nexport const tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        taskArray: [],\n        labels: labelOptions,\n        soundscape: {\n            track: \"mute\",\n            isPlaying: false,\n            volume: 0.7,\n        },\n        meta: {\n            globalKey: 0,\n            completedTaskStartIndex: -1,\n            focussedTaskIndex: -1,\n            showCompletedTasks: true,\n            completedTasksCount: 0,\n            totalTaskListTime: 0,\n            remainingTaskListTime: 0,\n        },\n    },\n    reducers: {\n        create: (tasks, { payload }) => {\n            payload.time = payload.time * MIN_TO_MS;\n            payload.remainingTime = payload.remainingTime * MIN_TO_MS;\n            tasks.taskArray.unshift(payload);\n            tasks.meta.totalTaskListTime += payload.time;\n            tasks.meta.remainingTaskListTime += payload.time;\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\n        },\n        remove: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.filter((i) => {\n                if (i.id !== payload) return true;\n                else {\n                    if (!i.isCompleted) {\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\n                    } else {\n                        tasks.meta.completedTasksCount--;\n                        if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length - 1) {\n                            tasks.meta.completedTaskStartIndex = -1;\n                        }\n                    }\n\n                    if (!i.isCompleted) {\n                        tasks.meta.remainingTaskListTime -= i.remainingTime;\n                    }\n                    tasks.meta.totalTaskListTime -= i.time;\n\n                    return false;\n                }\n            });\n        },\n        updateTaskObject: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.map((i) => (i.id === payload.id ? payload : i));\n        },\n        updateTaskContent: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.content = payload.updatedTaskContent;\n                }\n            });\n        },\n        updateTaskLabel: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.label = payload.label;\n                }\n            });\n        },\n        updateTaskTime: (tasks, { payload }) => {\n            tasks.taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    tasks.meta.totalTaskListTime -= i.time;\n                    tasks.meta.remainingTaskListTime -= i.remainingTime;\n                    tasks.meta.totalTaskListTime += payload.updatedTime * MIN_TO_MS;\n                    tasks.meta.remainingTaskListTime += payload.updatedTime * MIN_TO_MS;\n                    i.remainingTime = payload.updatedTime * MIN_TO_MS;\n                    i.time = payload.updatedTime * MIN_TO_MS;\n                }\n            });\n        },\n        updateTaskTimeByVal: (tasks, { payload }) => {\n            if (tasks.taskArray[payload.focussedTaskIndex].remainingTime + payload.val * MIN_TO_MS < 0) {\n                tasks.meta.remainingTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\n            } else {\n                tasks.meta.remainingTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime += payload.val * MIN_TO_MS;\n                tasks.meta.remainingTaskListTime += tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n            }\n\n            if (tasks.taskArray[payload.focussedTaskIndex].time + payload.val * MIN_TO_MS < 0) {\n                tasks.meta.totalTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].time;\n                tasks.taskArray[payload.focussedTaskIndex].time = 0;\n            } else {\n                tasks.meta.totalTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].time;\n                tasks.taskArray[payload.focussedTaskIndex].time += payload.val * MIN_TO_MS;\n                tasks.meta.totalTaskListTime += tasks.taskArray[payload.focussedTaskIndex].time;\n            }\n        },\n        updateOrder: (tasks, { payload }) => {\n            tasks.taskArray = payload;\n        },\n        focusOnTask: (tasks, { payload }) => {\n            if (typeof payload === \"number\") {\n                tasks.meta.focussedTaskIndex = payload;\n            } else {\n                // done tasks, remaining time = 0 tasks shouldnt be picked.\n                let completedTaskStartIndex = tasks.meta.completedTaskStartIndex !== -1 ? tasks.meta.completedTaskStartIndex : tasks.taskArray.length;\n                let index = -1;\n                if (payload === \"smallest\") {\n                    let time,\n                        lowest = Number.POSITIVE_INFINITY;\n                    for (let i = 0; i < completedTaskStartIndex; i++) {\n                        time = tasks.taskArray[i].remainingTime;\n                        if (time < 1000) continue; // rem. time less than second(1000ms)\n                        if (time < lowest) {\n                            lowest = time;\n                            index = i;\n                        }\n                    }\n                } else if (payload === \"largest\") {\n                    let time,\n                        highest = Number.NEGATIVE_INFINITY;\n                    for (let i = 0; i < completedTaskStartIndex; i++) {\n                        time = tasks.taskArray[i].remainingTime;\n                        if (time < 1000) continue; // rem. time less than second(1000ms)\n                        if (time > highest) {\n                            highest = time;\n                            index = i;\n                        }\n                    }\n                }\n                updatePageTitle(`Fokus: ${tasks.taskArray[index].content}`);\n                tasks.meta.focussedTaskIndex = index;\n            }\n        },\n        resetFocussedTask: (tasks) => {\n            tasks.meta.focussedTaskIndex = -1;\n        },\n        tick: (tasks, { payload }) => {\n            tasks.taskArray[payload.focussedTaskIndex].remainingTime -= payload.deltaMS;\n            tasks.meta.remainingTaskListTime -= payload.deltaMS;\n\n            if (tasks.taskArray[payload.focussedTaskIndex].remainingTime < 0) {\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\n            }\n            if (tasks.meta.remainingTaskListTime < 0) {\n                tasks.meta.remainingTaskListTime = 0;\n            }\n        },\n        resetTaskTimer: (tasks, { payload }) => {\n            tasks.taskArray[payload].isRunning = false;\n\n            tasks.meta.remainingTaskListTime -= tasks.taskArray[payload].remainingTime;\n            tasks.meta.remainingTaskListTime += tasks.taskArray[payload].time;\n\n            tasks.taskArray[payload].remainingTime = tasks.taskArray[payload].time;\n        },\n        toggleIsRunning: (tasks, { payload }) => {\n            if (payload.val !== undefined) tasks.taskArray[payload.idx].isRunning = payload.val;\n            else tasks.taskArray[payload.idx].isRunning = !tasks.taskArray[payload.idx].isRunning;\n        },\n        toggleShowCompletedTasks: (tasks) => {\n            tasks.meta.showCompletedTasks = !tasks.meta.showCompletedTasks;\n        },\n        toggleIsCompleted: (tasks, { payload }) => {\n            tasks.taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    if (i.isCompleted) {\n                        tasks.meta.remainingTaskListTime += i.remainingTime;\n                        --tasks.meta.completedTasksCount;\n                    } else {\n                        tasks.meta.remainingTaskListTime -= i.remainingTime;\n                        ++tasks.meta.completedTasksCount;\n                    }\n\n                    i.isCompleted = !i.isCompleted;\n                }\n            });\n        },\n        clearCompletedTasks: (tasks) => {\n            if (tasks.meta.completedTaskStartIndex !== -1) {\n                for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                    if (tasks.taskArray[i].label !== null) tasks.labels[tasks.taskArray[i].label].count--;\n\n                    tasks.meta.totalTaskListTime -= tasks.taskArray[i].time;\n                }\n\n                tasks.taskArray.length = tasks.meta.completedTaskStartIndex;\n                tasks.meta.completedTaskStartIndex = -1;\n                tasks.meta.completedTasksCount = 0;\n            }\n        },\n        updateLabelCount: (tasks, { payload }) => {\n            if (payload.oldLabel !== null) tasks.labels[payload.oldLabel].count--;\n            if (payload.newLabel !== null) tasks.labels[payload.newLabel].count++;\n        },\n        incrementGlobalKey: ({ meta }) => {\n            ++meta.globalKey;\n        },\n        rearrange: (tasks, { payload }) => {\n            let id = payload.id;\n\n            if (payload.markedAsComplete) {\n                if (tasks.meta.completedTaskStartIndex === -1) {\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                    let found = false;\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\n                        if (found) {\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        } else if (tasks.taskArray[i].id === id) {\n                            found = true;\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }\n                    }\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                } else {\n                    let task, idx;\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n                    let pos = -1;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    if (pos === -1) {\n                        tasks.taskArray.push(task);\n                    } else {\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.meta.completedTaskStartIndex -= 1;\n                }\n            } else {\n                if (tasks.meta.completedTaskStartIndex == 0) {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.taskArray.unshift(task);\n                    tasks.meta.completedTaskStartIndex = 1;\n                } else {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    let start = tasks.meta.completedTaskStartIndex - 1;\n                    let pos = -1;\n                    for (let i = start; i >= 0; i--) {\n                        if (tasks.taskArray[i].globalKey < task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    if (pos === -1) {\n                        tasks.taskArray.unshift(task);\n                    } else {\n                        pos++;\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.meta.completedTaskStartIndex += 1;\n                }\n\n                if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length) {\n                    tasks.meta.completedTaskStartIndex = -1;\n                }\n            }\n        },\n        changeSoundscapeTrack: ({ soundscape }, { payload }) => {\n            soundscape.track = payload;\n        },\n        toggleSoundscapeState: ({ soundscape }, { payload }) => {\n            soundscape.isPlaying = payload;\n        },\n        updateSoundscapeVolume: ({ soundscape }, { payload }) => {\n            soundscape.volume = payload;\n        },\n    },\n});\n\nexport const {\n    create,\n    remove,\n    updateTaskObject,\n    updateTaskContent,\n    updateTaskLabel,\n    updateTaskTime,\n    updateTaskTimeByVal,\n    focusOnTask,\n    resetFocussedTask,\n    tick,\n    resetTaskTimer,\n    toggleIsRunning,\n    toggleShowCompletedTasks,\n    toggleIsCompleted,\n    clearCompletedTasks,\n    updateOrder,\n    updateLabelCount,\n    incrementGlobalKey,\n    rearrange,\n    changeSoundscapeTrack,\n    toggleSoundscapeState,\n    updateSoundscapeVolume,\n} = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n","/home/pg07codes/Desktop/fokus/src/containers/settings/DefaultTaskLabel.js",[],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/FocussedTask.js",[],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/EmptyLabelPie.js",[],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TaskProgressCard.js",[],"/home/pg07codes/Desktop/fokus/src/containers/miscBoard/MiscBoard.js",["258","259"],"import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { LabelPie } from \"./../../components/MiscBoard/LabelPie\";\nimport { ProgressRings } from \"./../../components/MiscBoard/ProgressRings\";\nimport { TimeProgressCard } from \"./../../components/MiscBoard/TimeProgressCard\";\nimport { TaskProgressCard } from \"./../../components/MiscBoard/TaskProgressCard\";\nimport { getTodaysQuote } from \"./../../helpers/quotes\";\n\nconst MiscBoardContainer = styled.div`\n    flex: 1 1 0;\n    min-width: 346px;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    justify-content: center;\n    height: 100%;\n    /* background-color:orange; */\n`;\n\nconst MainSummaryContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    width: 80%;\n    max-width: 326px;\n    height: 226px;\n    margin: 10px 0;\n    border-radius: 20px;\n    background-color:${p=>p.theme.backgroundSecondary};\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    /* backface-visibility: hidden;\n    transform: translateZ(0);\n    transition: box-shadow 0.2s ease-in-out,transform 0.2s ease-in-out ;\n    &:hover {\n        transform: scale(1.02);\n        -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.8);\n        box-shadow: 0 2px 10px rgba(166, 173, 201, 0.8);\n    } */\n`;\n\nconst ProgressRingContainer = styled.div`\n    display: flex;\n    width: 50%;\n    height: 95%;\n    border-radius: 10px;\n    /* -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);*/\n    /* background-color: #f7f7fa;  */\n`;\n\nconst ProgressCardContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    width: 40%;\n    height: 95%;\n    border-radius: 10px;\n    /* -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    background-color: #f7adfa; */\n`;\n\nconst QuoteAndLabelContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 80%;\n    max-width: 326px;\n    height: 186px;\n    margin: 10px 0;\n    /* background-color: purple; */\n`;\n\nconst LabelPieContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 45%;\n    height: 90%;\n    border-radius: 10px;\n    background-color:${p=>p.theme.backgroundSecondary};\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n`;\n\nfunction getQuoteFontSize(letterCount){\n    let size = -0.0035*letterCount+1.3; // eqn of line with 40 - 1.1em and 180 - 0.6em\n    size = size.toPrecision(3);\n    return `${size}em`\n}\nconst QuoteContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 50%;\n    height: 100%;\n    border-radius: 10px;\n    position: relative;\n    backface-visibility: hidden;\n    -webkit-backface-visibility: hidden;\n    transform: translateZ(0);\n    font-weight: bold;\n    color:${p=>p.theme.primaryText};\n    p {\n        margin: 0 3px;\n        font-size: ${p=>getQuoteFontSize(p.length)};\n        &::before{\n            color:#fabb18;\n            content:\"“ \";\n        }\n        &::after{\n            color:#fabb18;\n            content:\" ”\";\n        }\n    }\n    span {\n        position: absolute;\n        bottom: 0;\n        right: 0;\n        margin: 5px;\n        font-size: 0.65em;\n        color:#fabb18;\n    }\n    transition: transform 0.2s ease-in-out;\n    &:hover {\n        transform: scale(1.2);\n    }\n`;\n\nexport function MiscBoard() {\n\n    let todaysQuote = getTodaysQuote();\n    return (\n        <MiscBoardContainer>\n            <MainSummaryContainer>\n                <ProgressRingContainer>\n                    <ProgressRings />\n                </ProgressRingContainer>\n                <ProgressCardContainer>\n                    <TaskProgressCard />\n                    <TimeProgressCard />\n                </ProgressCardContainer>\n            </MainSummaryContainer>\n\n            <QuoteAndLabelContainer>\n                <QuoteContainer length={todaysQuote.length}>\n                    <p>\n                        {todaysQuote.quote}\n                    </p>\n                    <span>&mdash; {todaysQuote.author} </span>\n                </QuoteContainer>\n                <LabelPieContainer>\n                    <LabelPie />\n                </LabelPieContainer>\n            </QuoteAndLabelContainer>\n        </MiscBoardContainer>\n    );\n}\n",["260","261"],"/home/pg07codes/Desktop/fokus/src/store/localStorageUtils.js",[],"/home/pg07codes/Desktop/fokus/src/containers/settings/AutoMarkDone.js",[],"/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js",[],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyFocusBox.js",[],"/home/pg07codes/Desktop/fokus/src/containers/menu/Menu.js",["262"],"/home/pg07codes/Desktop/fokus/src/containers/settings/NotesViewToggle.js",["263"],"/home/pg07codes/Desktop/fokus/src/containers/settings/DarkThemeToggle.js",["264"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/Divider.js",[],{"ruleId":"265","severity":1,"message":"266","line":2,"column":23,"nodeType":"267","messageId":"268","endLine":2,"endColumn":34},{"ruleId":"265","severity":1,"message":"269","line":6,"column":24,"nodeType":"267","messageId":"268","endLine":6,"endColumn":30},{"ruleId":"270","replacedBy":"271"},{"ruleId":"272","replacedBy":"273"},{"ruleId":"270","replacedBy":"274"},{"ruleId":"272","replacedBy":"275"},{"ruleId":"270","replacedBy":"276"},{"ruleId":"272","replacedBy":"277"},{"ruleId":"270","replacedBy":"278"},{"ruleId":"272","replacedBy":"279"},{"ruleId":"265","severity":1,"message":"280","line":2,"column":23,"nodeType":"267","messageId":"268","endLine":2,"endColumn":34},{"ruleId":"270","replacedBy":"281"},{"ruleId":"272","replacedBy":"282"},{"ruleId":"283","severity":1,"message":"284","line":154,"column":44,"nodeType":"267","endLine":154,"endColumn":55},{"ruleId":"265","severity":1,"message":"285","line":1,"column":17,"nodeType":"267","messageId":"268","endLine":1,"endColumn":25},{"ruleId":"265","severity":1,"message":"280","line":2,"column":23,"nodeType":"267","messageId":"268","endLine":2,"endColumn":34},{"ruleId":"270","replacedBy":"286"},{"ruleId":"272","replacedBy":"287"},{"ruleId":"270","replacedBy":"288"},{"ruleId":"272","replacedBy":"289"},{"ruleId":"265","severity":1,"message":"266","line":2,"column":10,"nodeType":"267","messageId":"268","endLine":2,"endColumn":21},{"ruleId":"270","replacedBy":"290"},{"ruleId":"272","replacedBy":"291"},{"ruleId":"292","severity":1,"message":"293","line":6,"column":14,"nodeType":"294","messageId":"295","endLine":6,"endColumn":16},{"ruleId":"292","severity":1,"message":"293","line":11,"column":14,"nodeType":"294","messageId":"295","endLine":11,"endColumn":16},{"ruleId":"292","severity":1,"message":"293","line":25,"column":14,"nodeType":"294","messageId":"295","endLine":25,"endColumn":16},{"ruleId":"292","severity":1,"message":"293","line":30,"column":14,"nodeType":"294","messageId":"295","endLine":30,"endColumn":16},{"ruleId":"292","severity":1,"message":"293","line":56,"column":14,"nodeType":"294","messageId":"295","endLine":56,"endColumn":16},{"ruleId":"292","severity":1,"message":"293","line":61,"column":15,"nodeType":"294","messageId":"295","endLine":61,"endColumn":17},{"ruleId":"292","severity":1,"message":"293","line":85,"column":11,"nodeType":"294","messageId":"295","endLine":85,"endColumn":13},{"ruleId":"292","severity":1,"message":"296","line":85,"column":21,"nodeType":"294","messageId":"295","endLine":85,"endColumn":23},{"ruleId":"292","severity":1,"message":"293","line":88,"column":11,"nodeType":"294","messageId":"295","endLine":88,"endColumn":13},{"ruleId":"292","severity":1,"message":"296","line":88,"column":21,"nodeType":"294","messageId":"295","endLine":88,"endColumn":23},{"ruleId":"292","severity":1,"message":"293","line":91,"column":11,"nodeType":"294","messageId":"295","endLine":91,"endColumn":13},{"ruleId":"292","severity":1,"message":"296","line":91,"column":21,"nodeType":"294","messageId":"295","endLine":91,"endColumn":23},{"ruleId":"270","replacedBy":"297"},{"ruleId":"272","replacedBy":"298"},{"ruleId":"265","severity":1,"message":"299","line":103,"column":36,"nodeType":"267","messageId":"268","endLine":103,"endColumn":61},{"ruleId":"292","severity":1,"message":"296","line":55,"column":52,"nodeType":"294","messageId":"295","endLine":55,"endColumn":54},{"ruleId":"292","severity":1,"message":"296","line":62,"column":64,"nodeType":"294","messageId":"295","endLine":62,"endColumn":66},{"ruleId":"292","severity":1,"message":"293","line":65,"column":64,"nodeType":"294","messageId":"295","endLine":65,"endColumn":66},{"ruleId":"292","severity":1,"message":"293","line":275,"column":56,"nodeType":"294","messageId":"295","endLine":275,"endColumn":58},{"ruleId":"292","severity":1,"message":"293","line":318,"column":56,"nodeType":"294","messageId":"295","endLine":318,"endColumn":58},{"ruleId":"265","severity":1,"message":"266","line":2,"column":10,"nodeType":"267","messageId":"268","endLine":2,"endColumn":21},{"ruleId":"265","severity":1,"message":"280","line":2,"column":23,"nodeType":"267","messageId":"268","endLine":2,"endColumn":34},{"ruleId":"270","replacedBy":"300"},{"ruleId":"272","replacedBy":"301"},{"ruleId":"265","severity":1,"message":"302","line":4,"column":10,"nodeType":"267","messageId":"268","endLine":4,"endColumn":23},{"ruleId":"265","severity":1,"message":"285","line":1,"column":17,"nodeType":"267","messageId":"268","endLine":1,"endColumn":25},{"ruleId":"265","severity":1,"message":"285","line":1,"column":17,"nodeType":"267","messageId":"268","endLine":1,"endColumn":25},"no-unused-vars","'useSelector' is defined but never used.","Identifier","unusedVar","'create' is defined but never used.","no-native-reassign",["303"],"no-negated-in-lhs",["304"],["303"],["304"],["303"],["304"],["303"],["304"],"'useDispatch' is defined but never used.",["303"],["304"],"react-hooks/exhaustive-deps","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","'useState' is defined but never used.",["303"],["304"],["303"],["304"],["303"],["304"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.",["303"],["304"],"'setSoundscapeAudioElement' is assigned a value but never used.",["303"],["304"],"'IoMdAnalytics' is defined but never used.","no-global-assign","no-unsafe-negation"]