[{"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js":"1","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js":"2","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js":"3","/home/pg07codes/Desktop/fokus/src/index.js":"4","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js":"5","/home/pg07codes/Desktop/fokus/src/helpers/index.js":"6","/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js":"7","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/Divider.js":"8","/home/pg07codes/Desktop/fokus/src/serviceWorker.js":"9","/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js":"10","/home/pg07codes/Desktop/fokus/src/store/index.js":"11"},{"size":8641,"mtime":1612950607254,"results":"12","hashOfConfig":"13"},{"size":11437,"mtime":1612939899551,"results":"14","hashOfConfig":"13"},{"size":4298,"mtime":1612959925708,"results":"15","hashOfConfig":"13"},{"size":651,"mtime":1608902523877,"results":"16","hashOfConfig":"13"},{"size":5082,"mtime":1612951704590,"results":"17","hashOfConfig":"13"},{"size":684,"mtime":1612960710174,"results":"18","hashOfConfig":"13"},{"size":528,"mtime":1611252515979,"results":"19","hashOfConfig":"13"},{"size":2620,"mtime":1612951496639,"results":"20","hashOfConfig":"13"},{"size":5141,"mtime":1608877484447,"results":"21","hashOfConfig":"13"},{"size":7505,"mtime":1612963123567,"results":"22","hashOfConfig":"13"},{"size":214,"mtime":1612760411462,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},"g1paqb",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js",["49","50","51","52","53"],"import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        taskArray: [],\n        meta: {\n            globalKey: 0,\n            completedTaskStartIndex: -1,\n            focussedTaskIndex: -1,\n            showCompletedTasks: true,\n            completedTasksCount: 0,\n        },\n    },\n    reducers: {\n        create: (tasks, { payload }) => {\n            tasks.taskArray.unshift(payload);\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\n        },\n        remove: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.filter((i) => {\n                if (i.id !== payload) return true;\n                else {\n                    if (!i.isCompleted) {\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\n                    } else if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length - 1) {\n                        tasks.meta.completedTasksCount--;\n                        tasks.meta.completedTaskStartIndex = -1;\n                    }\n                    return false;\n                }\n            });\n        },\n        updateTask: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.map((i) => (i.id === payload.id ? payload : i));\n        },\n        updateTaskContent: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.content = payload.updatedTaskContent;\n                }\n            });\n        },\n        updateTaskTime: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.remainingTime = payload.updatedTime * 60;\n                    i.time = payload.updatedTime * 60;\n                }\n            });\n        },\n        updateTaskTimeByVal: (tasks, { payload }) => {\n            tasks.taskArray[payload.focussedTaskIndex].remainingTime += payload.val * 60;\n            tasks.taskArray[payload.focussedTaskIndex].time += payload.val * 60;\n            if (tasks.taskArray[payload.focussedTaskIndex].remainingTime < 0) {\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\n            }\n            if (tasks.taskArray[payload.focussedTaskIndex].time < 0) {\n                tasks.taskArray[payload.focussedTaskIndex].time = 0;\n            }\n        },\n        updateOrder: (tasks, { payload }) => {\n            tasks.taskArray = payload;\n        },\n\n        focusOnTask: (tasks, { payload }) => {\n            tasks.meta.focussedTaskIndex = payload;\n        },\n        resetFocussedTask: (tasks) => {\n            tasks.meta.focussedTaskIndex = -1;\n        },\n        tick: (tasks, { payload }) => {\n            --tasks.taskArray[payload].remainingTime;\n        },\n        resetTaskTimer: (tasks, { payload }) => {\n            tasks.taskArray[payload].isRunning = false;\n            tasks.taskArray[payload].remainingTime = tasks.taskArray[payload].time;\n        },\n        toggleIsRunning: (tasks, { payload }) => {\n            tasks.taskArray[payload].isRunning = !tasks.taskArray[payload].isRunning;\n        },\n        toggleShowCompletedTasks: (tasks) => {\n            tasks.meta.showCompletedTasks = !tasks.meta.showCompletedTasks;\n        },\n        toggleIsCompleted: (tasks, { payload }) => {\n            tasks.taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.isCompleted ? --tasks.meta.completedTasksCount : ++tasks.meta.completedTasksCount;\n                    i.isCompleted = !i.isCompleted;\n                }\n            });\n        },\n        clearCompletedTasks: (tasks) => {\n            if (tasks.meta.completedTaskStartIndex !== -1) {\n                tasks.taskArray.length = tasks.meta.completedTaskStartIndex;\n                tasks.meta.completedTaskStartIndex = -1;\n                tasks.meta.completedTasksCount=0;\n            }\n        },\n        incrementGlobalKey: ({ meta }) => {\n            ++meta.globalKey;\n        },\n        rearrange: (tasks, { payload }) => {\n            let id = payload.id;\n\n            if (payload.markedAsComplete) {\n                if (tasks.meta.completedTaskStartIndex === -1) {\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                    let found = false;\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\n                        if (found) {\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        } else if (tasks.taskArray[i].id === id) {\n                            found = true;\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }\n                    }\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                } else {\n                    let task, idx;\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n                    let pos = -1;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    if (pos === -1) {\n                        tasks.taskArray.push(task);\n                    } else {\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.meta.completedTaskStartIndex -= 1;\n                }\n            } else {\n                if (tasks.meta.completedTaskStartIndex == 0) {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.taskArray.unshift(task);\n                    tasks.meta.completedTaskStartIndex = 1;\n                } else {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    let start = tasks.meta.completedTaskStartIndex - 1;\n                    let pos = -1;\n                    for (let i = start; i >= 0; i--) {\n                        if (tasks.taskArray[i].globalKey < task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    if (pos === -1) {\n                        tasks.taskArray.unshift(task);\n                    } else {\n                        pos++;\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.meta.completedTaskStartIndex += 1;\n                }\n\n                if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length) {\n                    tasks.meta.completedTaskStartIndex = -1;\n                }\n            }\n        },\n    },\n});\n\nexport const {\n    create,\n    remove,\n    updateTask,\n    updateTaskContent,\n    updateTaskTime,\n    updateTaskTimeByVal,\n    focusOnTask,\n    resetFocussedTask,\n    tick,\n    resetTaskTimer,\n    toggleIsRunning,\n    toggleShowCompletedTasks,\n    toggleIsCompleted,\n    clearCompletedTasks,\n    updateOrder,\n    incrementGlobalKey,\n    rearrange,\n} = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js",["54"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js",[],"/home/pg07codes/Desktop/fokus/src/index.js",[],["55","56"],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js",["57","58","59"],"/home/pg07codes/Desktop/fokus/src/helpers/index.js",["60","61","62","63"],"/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/Divider.js",[],"/home/pg07codes/Desktop/fokus/src/serviceWorker.js",[],"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js",[],"/home/pg07codes/Desktop/fokus/src/store/index.js",[],["64","65"],{"ruleId":"66","severity":1,"message":"67","line":18,"column":52,"nodeType":"68","messageId":"69","endLine":18,"endColumn":54},{"ruleId":"66","severity":1,"message":"67","line":25,"column":64,"nodeType":"68","messageId":"69","endLine":25,"endColumn":66},{"ruleId":"66","severity":1,"message":"70","line":26,"column":67,"nodeType":"68","messageId":"69","endLine":26,"endColumn":69},{"ruleId":"66","severity":1,"message":"70","line":150,"column":56,"nodeType":"68","messageId":"69","endLine":150,"endColumn":58},{"ruleId":"66","severity":1,"message":"70","line":193,"column":56,"nodeType":"68","messageId":"69","endLine":193,"endColumn":58},{"ruleId":"71","severity":1,"message":"72","line":184,"column":17,"nodeType":"73","messageId":"74","endLine":184,"endColumn":21},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"71","severity":1,"message":"79","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":25},{"ruleId":"66","severity":1,"message":"67","line":36,"column":18,"nodeType":"68","messageId":"69","endLine":36,"endColumn":20},{"ruleId":"66","severity":1,"message":"70","line":44,"column":19,"nodeType":"68","messageId":"69","endLine":44,"endColumn":21},{"ruleId":"66","severity":1,"message":"70","line":5,"column":14,"nodeType":"68","messageId":"69","endLine":5,"endColumn":16},{"ruleId":"66","severity":1,"message":"70","line":10,"column":14,"nodeType":"68","messageId":"69","endLine":10,"endColumn":16},{"ruleId":"66","severity":1,"message":"70","line":23,"column":14,"nodeType":"68","messageId":"69","endLine":23,"endColumn":16},{"ruleId":"66","severity":1,"message":"70","line":28,"column":14,"nodeType":"68","messageId":"69","endLine":28,"endColumn":16},{"ruleId":"75","replacedBy":"80"},{"ruleId":"77","replacedBy":"81"},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-unused-vars","'temp' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["82"],"no-negated-in-lhs",["83"],"'useState' is defined but never used.",["82"],["83"],"no-global-assign","no-unsafe-negation"]