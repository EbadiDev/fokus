[{"/home/pg07codes/Desktop/fokus/src/containers/dashboard/DashboardMain.js":"1","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/NoTasks.js":"2","/home/pg07codes/Desktop/fokus/src/containers/dashboard/DashboardHero.js":"3","/home/pg07codes/Desktop/fokus/src/containers/menu/Menu.js":"4","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js":"5","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskLabelSelect.js":"6","/home/pg07codes/Desktop/fokus/src/helpers/quotes.js":"7","/home/pg07codes/Desktop/fokus/src/index.js":"8","/home/pg07codes/Desktop/fokus/src/containers/dashboard/index.js":"9","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js":"10","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js":"11","/home/pg07codes/Desktop/fokus/src/components/MusicBox/Soundscapes.js":"12","/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js":"13"},{"size":521,"mtime":1614522069095,"results":"14","hashOfConfig":"15"},{"size":853,"mtime":1614522470707,"results":"16","hashOfConfig":"15"},{"size":676,"mtime":1614522694524,"results":"17","hashOfConfig":"15"},{"size":2517,"mtime":1614522544795,"results":"18","hashOfConfig":"15"},{"size":6163,"mtime":1614522882900,"results":"19","hashOfConfig":"15"},{"size":1304,"mtime":1613218352233,"results":"20","hashOfConfig":"15"},{"size":20123,"mtime":1614522988628,"results":"21","hashOfConfig":"15"},{"size":651,"mtime":1613628682348,"results":"22","hashOfConfig":"15"},{"size":628,"mtime":1614412411656,"results":"23","hashOfConfig":"15"},{"size":14037,"mtime":1614331187188,"results":"24","hashOfConfig":"15"},{"size":12841,"mtime":1614063295130,"results":"25","hashOfConfig":"15"},{"size":3943,"mtime":1614521597843,"results":"26","hashOfConfig":"15"},{"size":1839,"mtime":1613636104237,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"g1paqb",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pg07codes/Desktop/fokus/src/containers/dashboard/DashboardMain.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/NoTasks.js",[],"/home/pg07codes/Desktop/fokus/src/containers/dashboard/DashboardHero.js",[],"/home/pg07codes/Desktop/fokus/src/containers/menu/Menu.js",[],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js",["56","57","58"],"import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateOrder } from \"./taskBoardSlice\";\nimport TaskCard from \"./../../components/TaskBoard/TaskCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Flipper } from \"react-flip-toolkit\";\nimport { focusOnTask } from \"./taskBoardSlice\";\nimport styled from \"styled-components\";\nimport TaskInput from \"./../../components/TaskBoard/TaskInput\";\nimport Divider from \"./../../components/TaskBoard/Divider\";\nimport NoTasks from \"../../components/TaskBoard/NoTasks\";\n\nconst TaskBoardContainer = styled.div`\n    flex: 1 1 0;\n    display: flex;\n    min-width:396px;\n    flex-direction: column;\n    align-items: center;\n    overflow-y:scroll; // to enable scrolling by default for this flex-container only\n`;\n\nexport function TaskBoard() {\n    const tasks = useSelector((state) => state.tasks.taskArray);\n    const meta = useSelector((state) => state.tasks.meta);\n    let focussedTask = meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex] : null;\n    const dispatch = useDispatch();\n\n    function handleOnDragEnd(result) {\n        if (!result.destination) return;\n\n        let items = [...tasks.map((i) => ({ ...i }))];\n        const [reorderedItem] = items.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorderedItem);\n\n        let i = result.source.index;\n        let direction = result.destination.index > result.source.index; // direction true means moving right & swapping\n        // below is logic to reset globalKeys to maintain correct sort order.\n        while (i != result.destination.index) {\n            if (direction) {\n                items[i].globalKey = tasks[i].globalKey;\n                i++;\n            } else {\n                items[i].globalKey = tasks[i].globalKey;\n                i--;\n            }\n            if (i == result.destination.index) {\n                items[i].globalKey = tasks[i].globalKey;\n            }\n        }\n\n        if (meta.focussedTaskIndex !== -1) {\n            let greaterIndex = Math.max(result.destination.index, result.source.index);\n            let smallerIndex = Math.min(result.destination.index, result.source.index);\n\n            if (result.source.index === meta.focussedTaskIndex) {\n                dispatch(focusOnTask(result.destination.index));\n            } else if (meta.focussedTaskIndex >= smallerIndex && meta.focussedTaskIndex <= greaterIndex) {\n                if (result.destination.index > result.source.index) {\n                    dispatch(focusOnTask(meta.focussedTaskIndex - 1)); // -1\n                } else {\n                    dispatch(focusOnTask(meta.focussedTaskIndex + 1)); // +1\n                }\n            }\n        }\n\n        dispatch(updateOrder(items)); // order is imp. focus then updateOrder\n    }\n\n    function getFlipKey() {\n        let flipKey = \"\";\n        tasks.forEach((i) => {\n            flipKey += `${i.globalKey}`;\n        });\n        flipKey += `${meta.completedTaskStartIndex}`;\n        return flipKey;\n    }\n\n    function isFocussed(id) {\n        if (focussedTask !== null && focussedTask.id === id) return true;\n        return false;\n    }\n\n    // input has both onChange and onKeyDown - can be optimised by using one and combining\n\n    return (\n        <TaskBoardContainer>\n            <TaskInput focussedTaskIndex={meta.focussedTaskIndex} />\n            {tasks.length === 0 ? <NoTasks /> : tasks.length === meta.completedTasksCount && <NoTasks allCompleted={true} />}\n            <Flipper flipKey={getFlipKey()}>\n                <DragDropContext onDragEnd={handleOnDragEnd}>\n                    <Droppable droppableId=\"dropArea\">\n                        {(provided) => (\n                            <div {...provided.droppableProps} ref={provided.innerRef}>\n                                {tasks.map((i, index) =>\n                                    !i.isCompleted ? (\n                                        <Draggable isDragDisabled={i.isCompleted} key={i.id} draggableId={`${i.id}`} index={index}>\n                                            {(provided2) => (\n                                                <TaskCard\n                                                    focussedTaskIndex={meta.focussedTaskIndex}\n                                                    focussedTaskGlobalKey={meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1}\n                                                    taskIndex={index}\n                                                    forwardRBDProvided={provided2}\n                                                    task={i}\n                                                    isFocussed={isFocussed(i.id)}\n                                                />\n                                            )}\n                                        </Draggable>\n                                    ) : (\n                                        \"\"\n                                    )\n                                )}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n\n                {meta.completedTaskStartIndex !== -1 && <Divider />}\n\n                {meta.showCompletedTasks &&\n                    tasks.map((i, index) =>\n                        i.isCompleted ? (\n                            <TaskCard\n                                focussedTaskIndex={meta.focussedTaskIndex}\n                                focussedTaskGlobalKey={meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1}\n                                taskIndex={index}\n                                key={i.id}\n                                forwardRBDProvided={{ innerRef: null }}\n                                task={i}\n                                isFocussed={isFocussed(i.id)}\n                            />\n                        ) : (\n                            \"\"\n                        )\n                    )}\n            </Flipper>\n        </TaskBoardContainer>\n    );\n}\n","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskLabelSelect.js",["59"],"import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\n\nconst TaskSelectInput = styled.select`\n    font-weight: bold;\n    text-align: center;\n    border:0;\n    background-color:#fff;\n    option{\n        font-weight:bold;\n    }\n`;\n\nexport default function TaskLabel(p) {\n    const labels = useSelector((s) => s.tasks.labels);\n    const [updatedLabel, setUpdatedLabel] = useState(p.taskLabel);\n\n    return (\n        // <div style={{ height: \"100%\", width: 80 }}>\n        <TaskSelectInput\n        autoFocus\n            name=\"labels\"\n            onBlur={() => p.onBlur(p.taskId,p.taskLabel, updatedLabel)}\n            defaultValue={updatedLabel}\n            onChange={(e) => setUpdatedLabel(e.target.value)}\n            onKeyDown={(e) => (e.key === \"Enter\" ? p.onBlur(p.taskId,p.taskLabel, updatedLabel) : null)}\n        >\n            <option value=\"none\">none</option> \n            {/* keeping option:none at top makes it show up if taskLabel is null which is desired */}\n            {Object.keys(labels).map((e, idx) => (\n                <option style={{color:`${labels[e].color}`}} key={idx} value={e}>\n                    {e}\n                </option>\n            ))}\n        </TaskSelectInput>\n        // </div>\n    );\n}\n","/home/pg07codes/Desktop/fokus/src/helpers/quotes.js",[],"/home/pg07codes/Desktop/fokus/src/index.js",[],"/home/pg07codes/Desktop/fokus/src/containers/dashboard/index.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js",[],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js",["60","61","62","63","64"],"/home/pg07codes/Desktop/fokus/src/components/MusicBox/Soundscapes.js",["65"],"/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js",[],{"ruleId":"66","severity":1,"message":"67","line":1,"column":17,"nodeType":"68","messageId":"69","endLine":1,"endColumn":25},{"ruleId":"70","severity":1,"message":"71","line":38,"column":18,"nodeType":"72","messageId":"73","endLine":38,"endColumn":20},{"ruleId":"70","severity":1,"message":"74","line":46,"column":19,"nodeType":"72","messageId":"73","endLine":46,"endColumn":21},{"ruleId":"66","severity":1,"message":"75","line":2,"column":23,"nodeType":"68","messageId":"69","endLine":2,"endColumn":34},{"ruleId":"70","severity":1,"message":"71","line":54,"column":52,"nodeType":"72","messageId":"73","endLine":54,"endColumn":54},{"ruleId":"70","severity":1,"message":"71","line":61,"column":64,"nodeType":"72","messageId":"73","endLine":61,"endColumn":66},{"ruleId":"70","severity":1,"message":"74","line":64,"column":64,"nodeType":"72","messageId":"73","endLine":64,"endColumn":66},{"ruleId":"70","severity":1,"message":"74","line":241,"column":56,"nodeType":"72","messageId":"73","endLine":241,"endColumn":58},{"ruleId":"70","severity":1,"message":"74","line":284,"column":56,"nodeType":"72","messageId":"73","endLine":284,"endColumn":58},{"ruleId":"66","severity":1,"message":"76","line":88,"column":36,"nodeType":"68","messageId":"69","endLine":88,"endColumn":61},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'useDispatch' is defined but never used.","'setSoundscapeAudioElement' is assigned a value but never used."]