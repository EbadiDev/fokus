[{"/home/pg07codes/Desktop/fokus/src/containers/tasks/TaskCard.js":"1","/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js":"2","/home/pg07codes/Desktop/fokus/src/containers/tasks/index.js":"3","/home/pg07codes/Desktop/fokus/src/containers/App.js":"4","/home/pg07codes/Desktop/fokus/src/containers/tasks/tasksSlice.js":"5","/home/pg07codes/Desktop/fokus/src/serviceWorker.js":"6","/home/pg07codes/Desktop/fokus/src/containers/counter/counterSlice.js":"7","/home/pg07codes/Desktop/fokus/src/index.js":"8","/home/pg07codes/Desktop/fokus/src/store/index.js":"9","/home/pg07codes/Desktop/fokus/src/containers/focusBoard/index.js":"10","/home/pg07codes/Desktop/fokus/src/containers/focusBoard/focusBoardSlice.js":"11"},{"size":7422,"mtime":1612081162885,"results":"12","hashOfConfig":"13"},{"size":528,"mtime":1611252515979,"results":"14","hashOfConfig":"13"},{"size":4380,"mtime":1612082581661,"results":"15","hashOfConfig":"13"},{"size":381,"mtime":1612074872082,"results":"16","hashOfConfig":"13"},{"size":6574,"mtime":1612007098709,"results":"17","hashOfConfig":"13"},{"size":5141,"mtime":1608877484447,"results":"18","hashOfConfig":"13"},{"size":1552,"mtime":1608881410941,"results":"19","hashOfConfig":"13"},{"size":651,"mtime":1608902523877,"results":"20","hashOfConfig":"13"},{"size":307,"mtime":1611907004672,"results":"21","hashOfConfig":"13"},{"size":753,"mtime":1612081624746,"results":"22","hashOfConfig":"13"},{"size":392,"mtime":1612079700847,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"g1paqb",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pg07codes/Desktop/fokus/src/containers/tasks/TaskCard.js",["49","50"],"/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js",[],"/home/pg07codes/Desktop/fokus/src/containers/tasks/index.js",["51","52"],"/home/pg07codes/Desktop/fokus/src/containers/App.js",[],"/home/pg07codes/Desktop/fokus/src/containers/tasks/tasksSlice.js",["53","54","55","56"],"import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        taskArray: [],\n        meta: {\n            globalKey: 0,\n            completedTaskStartIndex: -1,\n        },\n    },\n    reducers: {\n        create: (tasks, { payload }) => {\n            tasks.taskArray.unshift(payload);\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\n        },\n        remove: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.filter((i) => {\n                if (i.id !== payload) return true;\n                else {\n                    if (!i.isCompleted) {\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\n                    }\n                    return false;\n                }\n            });\n        },\n        update: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.content = payload.updatedTask;\n                }\n            });\n        },\n        updateOrder: (tasks, { payload }) => {\n            tasks.taskArray = payload;\n        },\n        tick: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.remainingTime = i.remainingTime - 1;\n                }\n            });\n        },\n        reset: ({taskArray}, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.remainingTime = i.time;\n                    i.isRunning = false;\n                }\n            });\n        },\n        toggleIsRunning: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.isRunning = !i.isRunning;\n                }\n            });\n        },\n        toggleIsCompleted: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.isCompleted = !i.isCompleted;\n                }\n            });\n        },\n        incrementGlobalKey: ({ meta }) => {\n            ++meta.globalKey;\n        },\n        rearrange: (tasks, { payload }) => {\n            let id = payload.id;\n\n            if (payload.markedAsComplete) {\n                if (tasks.meta.completedTaskStartIndex === -1) {\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                    let found = false;\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\n                        if(found){\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }else if(tasks.taskArray[i].id === id){\n                            found=true;\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }\n                    }\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                } else {\n                    let task, idx;\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n                    let pos = -1;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n                    \n                    if (pos === -1) {\n                        tasks.taskArray.push(task);\n                    } else {\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.meta.completedTaskStartIndex -=1;\n                }\n            } else {\n                if (tasks.meta.completedTaskStartIndex == 0) {\n\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.taskArray.unshift(task);\n                    tasks.meta.completedTaskStartIndex = 1;\n                } else {\n\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    let start = tasks.meta.completedTaskStartIndex - 1;\n                    let pos = -1;\n                    for (let i = start; i >= 0; i--) {\n                        if (tasks.taskArray[i].globalKey < task.globalKey ) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    if (pos === -1) {\n                        tasks.taskArray.unshift(task);\n                    } else {\n                        pos++;\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.meta.completedTaskStartIndex += 1;\n\n                }\n\n                if(tasks.meta.completedTaskStartIndex==tasks.taskArray.length){\n                    tasks.meta.completedTaskStartIndex=-1;\n                }\n            }\n        },\n    },\n});\n\nexport const { create, remove, update, reset, toggleIsRunning, tick, toggleIsCompleted, updateOrder, incrementGlobalKey, rearrange } = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n","/home/pg07codes/Desktop/fokus/src/serviceWorker.js",[],["57","58"],"/home/pg07codes/Desktop/fokus/src/containers/counter/counterSlice.js",[],"/home/pg07codes/Desktop/fokus/src/index.js",[],["59","60"],"/home/pg07codes/Desktop/fokus/src/store/index.js",[],"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/index.js",["61","62","63"],"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/focusBoardSlice.js",[],{"ruleId":"64","severity":1,"message":"65","line":17,"column":17,"nodeType":"66","messageId":"67","endLine":17,"endColumn":19},{"ruleId":"64","severity":1,"message":"65","line":22,"column":17,"nodeType":"66","messageId":"67","endLine":22,"endColumn":19},{"ruleId":"64","severity":1,"message":"68","line":80,"column":18,"nodeType":"66","messageId":"67","endLine":80,"endColumn":20},{"ruleId":"64","severity":1,"message":"65","line":90,"column":19,"nodeType":"66","messageId":"67","endLine":90,"endColumn":21},{"ruleId":"64","severity":1,"message":"68","line":15,"column":52,"nodeType":"66","messageId":"67","endLine":15,"endColumn":54},{"ruleId":"64","severity":1,"message":"68","line":22,"column":64,"nodeType":"66","messageId":"67","endLine":22,"endColumn":66},{"ruleId":"64","severity":1,"message":"65","line":117,"column":56,"nodeType":"66","messageId":"67","endLine":117,"endColumn":58},{"ruleId":"64","severity":1,"message":"65","line":163,"column":54,"nodeType":"66","messageId":"67","endLine":163,"endColumn":56},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"69","replacedBy":"73"},{"ruleId":"71","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":6,"column":11,"nodeType":"77","messageId":"78","endLine":6,"endColumn":19},{"ruleId":"75","severity":1,"message":"79","line":8,"column":12,"nodeType":"77","messageId":"78","endLine":8,"endColumn":21},{"ruleId":"75","severity":1,"message":"80","line":8,"column":23,"nodeType":"77","messageId":"78","endLine":8,"endColumn":35},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-native-reassign",["81"],"no-negated-in-lhs",["82"],["81"],["82"],"no-unused-vars","'dispatch' is assigned a value but never used.","Identifier","unusedVar","'isFocusON' is assigned a value but never used.","'setIsFocusON' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]