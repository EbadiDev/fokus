[{"/home/pg07codes/Desktop/fokus/src/store/index.js":"1","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/TaskSummary.js":"2","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/LabelPie.js":"3","/home/pg07codes/Desktop/fokus/src/helpers/index.js":"4","/home/pg07codes/Desktop/fokus/src/containers/App.js":"5","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js":"6","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/FocussedTask.js":"7","/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js":"8","/home/pg07codes/Desktop/fokus/src/containers/miscBoard/MiscBoard.js":"9","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyFocusBox.js":"10","/home/pg07codes/Desktop/fokus/src/index.js":"11","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js":"12","/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js":"13","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyTaskSummary.js":"14","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js":"15","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskLabelSelect.js":"16","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/ListTimeSummary.js":"17","/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js":"18","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js":"19","/home/pg07codes/Desktop/fokus/src/serviceWorker.js":"20","/home/pg07codes/Desktop/fokus/src/components/MusicBox/MusicVolumeControl.js":"21","/home/pg07codes/Desktop/fokus/src/components/MusicBox/musicUtils.js":"22","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/ProgressRings.js":"23","/home/pg07codes/Desktop/fokus/src/components/MusicBox/Soundscapes.js":"24","/home/pg07codes/Desktop/fokus/src/containers/menu/Menu.js":"25","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TimeProgressCard.js":"26","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TaskProgressCard.js":"27"},{"size":214,"mtime":1612760411462,"results":"28","hashOfConfig":"29"},{"size":2564,"mtime":1613326554228,"results":"30","hashOfConfig":"29"},{"size":2592,"mtime":1613565545142,"results":"31","hashOfConfig":"29"},{"size":1666,"mtime":1613587215677,"results":"32","hashOfConfig":"29"},{"size":562,"mtime":1613280812733,"results":"33","hashOfConfig":"29"},{"size":14311,"mtime":1613481336182,"results":"34","hashOfConfig":"29"},{"size":6495,"mtime":1613545099563,"results":"35","hashOfConfig":"29"},{"size":1009,"mtime":1613033460357,"results":"36","hashOfConfig":"29"},{"size":2695,"mtime":1613587023225,"results":"37","hashOfConfig":"29"},{"size":2990,"mtime":1613063915917,"results":"38","hashOfConfig":"29"},{"size":651,"mtime":1608902523877,"results":"39","hashOfConfig":"29"},{"size":12281,"mtime":1613482494755,"results":"40","hashOfConfig":"29"},{"size":528,"mtime":1611252515979,"results":"41","hashOfConfig":"29"},{"size":1046,"mtime":1613072484728,"results":"42","hashOfConfig":"29"},{"size":6215,"mtime":1613476169132,"results":"43","hashOfConfig":"29"},{"size":1304,"mtime":1613218352233,"results":"44","hashOfConfig":"29"},{"size":695,"mtime":1613481644269,"results":"45","hashOfConfig":"29"},{"size":2335,"mtime":1613586873872,"results":"46","hashOfConfig":"29"},{"size":5220,"mtime":1613479901409,"results":"47","hashOfConfig":"29"},{"size":5141,"mtime":1608877484447,"results":"48","hashOfConfig":"29"},{"size":1524,"mtime":1613415365940,"results":"49","hashOfConfig":"29"},{"size":1107,"mtime":1613413100147,"results":"50","hashOfConfig":"29"},{"size":4108,"mtime":1613582727220,"results":"51","hashOfConfig":"29"},{"size":3652,"mtime":1613550702414,"results":"52","hashOfConfig":"29"},{"size":899,"mtime":1613220617334,"results":"53","hashOfConfig":"29"},{"size":2258,"mtime":1613588010650,"results":"54","hashOfConfig":"29"},{"size":1359,"mtime":1613586801945,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"g1paqb",{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pg07codes/Desktop/fokus/src/store/index.js",[],["122","123"],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/TaskSummary.js",["124"],"import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { Line } from \"rc-progress\";\n\nconst TaskSummaryDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    position: relative;\n    width: 100%;\n    height: 100%;\n`;\n\nconst SummaryDataContainer = styled.div`\n    display: flex;\n    /* justify-content: space-evenly; */\n    align-items: center;\n    width: 90%;\n    height: 60%;\n    /* background-color: #f5f5fa; */\n`;\n\nconst ColorDot = styled.div`\n    width: 18px;\n    height: 18px;\n    background-color: ${(p) => p.color};\n    border-radius: 50%;\n    margin-right: 10px;\n`;\n\nconst SummaryDataDiv = styled.div`\n    display: flex;\n    align-items: center;\n    width: 40%;\n    margin-top: 5px;\n    margin-left: 3px;\n    /* background-color: #c1c1c1; */\n    p {\n        font-size: 1.2em;\n        font-weight: bold;\n        margin: 0;\n        margin-right: 3px;\n    }\n    span {\n        font-size: 0.5em;\n    }\n`;\n\nconst CompletionPercentContainer = styled.div`\n    display: flex;\n    align-items: center;\n    position: absolute;\n    bottom: 10px;\n    right: 15px;\n    p {\n        font-weight: bold;\n    }\n    span {\n        font-size: 0.5em;\n    }\n`;\n\nexport function TaskSummary() {\n    const completedTasksCount = useSelector((s) => s.tasks.meta.completedTasksCount);\n    const totalTasksCount = useSelector((s) => s.tasks.taskArray.length);\n    let completionPercent = totalTasksCount !== 0 ? Math.floor((completedTasksCount / totalTasksCount) * 100) : 100;\n    return (\n        <TaskSummaryDiv>\n            <SummaryDataContainer>\n                <SummaryDataDiv>\n                    <ColorDot color={\"#0000cd\"} />\n                    <p>{completedTasksCount}</p>\n                    <span>done</span>\n                </SummaryDataDiv>\n                <SummaryDataDiv>\n                    <ColorDot color={\"#c1c1d7\"} />\n                    <p>{totalTasksCount}</p>\n                    <span>tasks</span>\n                </SummaryDataDiv>\n                <CompletionPercentContainer>\n                    <p>{completionPercent}</p>\n                    <span>%</span>\n                </CompletionPercentContainer>\n            </SummaryDataContainer>\n            <div style={{ width: \"90%\" }}>\n                <Line percent={completionPercent} strokeWidth=\"5\" trailWidth=\"5\" trailColor=\"#C1C1D7\" strokeColor=\"#0000CD\" />\n            </div>\n        </TaskSummaryDiv>\n    );\n}\n",["125","126"],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/LabelPie.js",[],"/home/pg07codes/Desktop/fokus/src/helpers/index.js",["127","128","129","130","131","132"],"/home/pg07codes/Desktop/fokus/src/containers/App.js",[],["133","134"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js",["135"],"import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { remove, updateTaskContent, toggleIsCompleted, rearrange, updateTaskTime } from \"../../containers/taskBoard/taskBoardSlice\";\nimport { focusOnTask, resetFocussedTask, toggleIsRunning, updateTaskLabel, updateLabelCount , toggleSoundscapeState} from \"../../containers/taskBoard/taskBoardSlice\";\nimport styled from \"styled-components\";\nimport { BsTrash } from \"react-icons/bs\";\nimport { Flipped } from \"react-flip-toolkit\";\nimport { GrDrag } from \"react-icons/gr\";\nimport { formattedTimeString } from \"../../helpers\";\nimport bulb from \"./../../images/bulb.svg\";\nimport glowBulb from \"./../../images/glowBulb.svg\";\nimport tickmark from \"./../../images/tickmark.svg\";\nimport TaskLabelSelect from \"./../../components/TaskBoard/TaskLabelSelect\";\n\nconst TaskCardContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    width: 420px;\n    height: 100px;\n    margin-top: 15px;\n    cursor:default !important;\n    /* background-color: #fff4e1; */\n`;\n\nconst TaskCardDragIcon = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    width: 25px;\n    height: 100%;\n    /* background-color: #ff09ac; */\n    svg {\n        cursor: url(\"https://ssl.gstatic.com/ui/v1/icons/mail/images/2/openhand.cur\"), default !important;\n        opacity: 0.7;\n    }\n`;\n\nconst getTaskCardDivBorderLabelColor = (labelColor) => (labelColor !== null ? `7px solid ${labelColor}` : \"none\");\n\nconst TaskCardDiv = styled.div`\n    display: flex;\n    justify-content: space-around;\n    flex-direction: row;\n    height: 100%;\n    width: 376px;\n    border-radius: 10px;\n    border-right: ${(p) => getTaskCardDivBorderLabelColor(p.labelColor)};\n    background-color: #fff;\n    -webkit-box-shadow: ${(p) => (p.isFocussed ? \"0 1px 8px rgb(248,185,23,0.8)\" : \"0 5px 10px rgba(166,173,201,0.2)\")};\n    box-shadow: ${(p) => (p.isFocussed ? \"0 1px 8px rgb(248,185,23,0.8)\" : \"0 5px 10px rgba(166,173,201,0.2)\")};\n`;\n\nconst TaskStatusDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    width: 15%;\n    /* background-color: #f8f8ff; */\n    position: relative;\n    p {\n        margin: 5px;\n        font-weight: bold;\n        font-size: 0.7em;\n    }\n    img {\n        width: ${(p) => (p.isCompleted ? \"35px\" : \"60px\")};\n    }\n`;\n\nconst TaskDetailsDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    height: 100%;\n    width: 75%;\n    margin: 0 0 0 10px;\n    /* background-color: #fff1fc; */\n`;\n\nconst TaskContentDiv = styled.div`\n    display: flex;\n    align-items: center;\n    height: 65%;\n    margin: 0 0 0 5px;\n    word-wrap: break-word;\n    /* background-color: #fffcec; */\n    p {\n        font-size: 0.9em;\n        font-weight: bold;\n        min-width: 0;\n        &:hover {\n            cursor: text;\n        }\n    }\n`;\n\nconst TaskEditInput = styled.textarea`\n    resize: none;\n    height: 90%;\n    width: 100%;\n    font-size: 0.9em;\n    overflow: hidden;\n    vertical-align: center;\n    font-weight: bold;\n    &:focus {\n        outline: none;\n        border: 2px #0000cd dashed;\n        border-radius: 5px;\n    }\n`;\n\nconst TimeEditInput = styled.input`\n    height: 15px;\n    width: 30px;\n    margin-top: 5px;\n    text-align: center;\n    font-weight: bold;\n    &:focus {\n        outline: none;\n        border: 2px #0000cd dashed;\n        border-radius: 2px;\n    }\n`;\n\nconst TaskActionButton = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    border-radius: 5px;\n    margin: 4px;\n    cursor: pointer;\n    &:hover {\n        background-color: #0000cd;\n        p {\n            color: #fff;\n        }\n    }\n    p {\n        margin: 5px;\n        font-weight: bold;\n        font-size: 0.65em;\n    }\n`;\n\nconst TaskLabelContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    border-radius: 5px;\n    margin: 4px;\n    cursor: pointer;\n    &:hover {\n        background-color: #f7f7fa;\n    }\n    p {\n        margin: 5px;\n        color: ${(p) => (p.labelColor !== null ? p.labelColor : \"#c1c1d7\")};\n        font-weight: bold;\n        font-size: 0.65em;\n    }\n`;\n\nconst TaskDeleteButton = styled.div`\n    height: 80%;\n    cursor: pointer;\n    margin-left: auto;\n    color: #0000cd;\n    &:hover {\n        color: red;\n    }\n`;\n\nconst TaskControllerDiv = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    height: 25%;\n    /* background-color: #fffa91; */\n    svg {\n        font-size: 0.8em;\n        margin: 5px;\n    }\n`;\n\nfunction previewTask(str) {\n    if (str.length <= 60) return str;\n    else return str.substring(0, 60) + \"...\";\n}\n\nexport default function TaskCard({ task, taskIndex, focussedTaskGlobalKey, forwardRBDProvided, isFocussed, focussedTaskIndex }) {\n    const dispatch = useDispatch();\n\n    const [taskUnderEdit, setTaskUnderEdit] = useState(false);\n    const [updatedTaskContent, setUpdatedTaskContent] = useState(task.content);\n    const [timeUnderEdit, setTimeUnderEdit] = useState(false);\n    const [updatedTime, setUpdatedTime] = useState(Math.floor(task.time / 60));\n    const [labelUnderEdit, setLabelUnderEdit] = useState(false);\n    const [showDragIcon, setShowDragIcon] = useState(false);\n\n    const labels = useSelector((s) => s.tasks.labels);\n\n    function submitUpdatedTaskContent(e) {\n        if (e.key === \"Enter\" && updatedTaskContent.trim().length >= 3) {\n            let temp = updatedTaskContent.trim().split(\" \");\n            // let time = 0;\n            // if (temp.length !== 1 && !isNaN(parseInt(temp[temp.length - 1]))) {\n            //     time = parseInt(temp.pop());\n            // }\n            // temp = temp.join(\" \");\n            // wont be managing to update time here also\n            dispatch(updateTaskContent({ id: task.id, updatedTaskContent }));\n            setTaskUnderEdit(false);\n        }\n    }\n    function submitUpdatedTime(e) {\n        if (e.key === \"Enter\") {\n            dispatch(updateTaskTime({ id: task.id, updatedTime }));\n            setTimeUnderEdit(false);\n        }\n    }\n\n    function labelSelectOnBlurHandler(taskId, taskLabel, updatedLabel) {\n        setLabelUnderEdit(false);\n        updatedLabel = updatedLabel === \"none\" ? null : updatedLabel;\n        dispatch(updateTaskLabel({ id: taskId, label: updatedLabel }));\n        if (taskLabel !== updatedLabel) dispatch(updateLabelCount({ oldLabel: taskLabel, newLabel: updatedLabel }));\n    }\n\n    return (\n        <Flipped flipId={`${task.id}`}>\n            <TaskCardContainer\n                ref={forwardRBDProvided.innerRef}\n                {...forwardRBDProvided.draggableProps}\n                {...forwardRBDProvided.dragHandleProps}\n                onMouseEnter={() => setShowDragIcon(!task.isCompleted && true)}\n                onMouseLeave={() => setShowDragIcon(!task.isCompleted && false)}\n            >\n                <TaskCardDragIcon>{showDragIcon && <GrDrag />}</TaskCardDragIcon>\n\n                <TaskCardDiv isFocussed={isFocussed} labelColor={task.label !== null ? labels[task.label].color : null}>\n                    <TaskStatusDiv isFocussed={isFocussed} isCompleted={task.isCompleted}>\n                        {task.isCompleted ? (\n                            <img src={tickmark} alt=\"Done\" />\n                        ) : isFocussed ? (\n                            <img src={glowBulb} alt=\"Focussed\" />\n                        ) : (\n                            <img src={bulb} alt=\"Unfocussed\" />\n                        )}\n                        {!task.isCompleted &&\n                            (timeUnderEdit ? (\n                                <TimeEditInput\n                                    autoFocus\n                                    value={updatedTime}\n                                    onBlur={() => {\n                                        dispatch(updateTaskTime({ id: task.id, updatedTime }));\n                                        setTimeUnderEdit(false);\n                                    }}\n                                    onKeyDown={submitUpdatedTime}\n                                    onChange={(e) => setUpdatedTime(e.target.value)}\n                                />\n                            ) : (\n                                <p onDoubleClick={() => setTimeUnderEdit(true)}>{formattedTimeString(task.remainingTime)}</p>\n                            ))}\n                    </TaskStatusDiv>\n\n                    <TaskDetailsDiv>\n                        <TaskContentDiv>\n                            {taskUnderEdit ? (\n                                <TaskEditInput\n                                    autoFocus\n                                    value={updatedTaskContent}\n                                    onBlur={() => {\n                                        dispatch(updateTaskContent({ id: task.id, updatedTaskContent }));\n                                        setTaskUnderEdit(false);\n                                    }}\n                                    onKeyDown={submitUpdatedTaskContent}\n                                    onChange={(e) => setUpdatedTaskContent(e.target.value)}\n                                />\n                            ) : (\n                                <p onDoubleClick={() => setTaskUnderEdit(true)}>{previewTask(task.content)}</p>\n                            )}\n                        </TaskContentDiv>\n\n                        <TaskControllerDiv>\n                            {!task.isCompleted && (\n                                <TaskActionButton\n                                    isDoneBtn={false}\n                                    onClick={\n                                        isFocussed\n                                            ? () => {\n                                                  if (task.isRunning) dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n                                                  dispatch(resetFocussedTask());\n                                                  dispatch(toggleSoundscapeState(false));\n                                              }\n                                            : () => {\n                                                  if (focussedTaskIndex !== -1) dispatch(toggleIsRunning({ idx: focussedTaskIndex, val: false }));\n                                                  dispatch(toggleSoundscapeState(false));\n                                                  dispatch(focusOnTask(taskIndex));\n                                              }\n                                    }\n                                >\n                                    <p>{isFocussed ? \"Unfocus\" : \"Focus\"}</p>\n                                </TaskActionButton>\n                            )}\n\n                            <TaskActionButton\n                                isDoneBtn={true}\n                                onClick={\n                                    task.isCompleted\n                                        ? (e) => {\n                                              if (focussedTaskIndex !== -1 && focussedTaskGlobalKey < task.globalKey) {\n                                                  dispatch(focusOnTask(focussedTaskIndex + 1));\n                                              }\n                                              dispatch(toggleIsCompleted(task.id));\n                                              dispatch(rearrange({ id: task.id, markedAsComplete: false }));\n                                              e.stopPropagation();\n                                          }\n                                        : (e) => {\n                                              if (taskIndex < focussedTaskIndex) dispatch(focusOnTask(focussedTaskIndex - 1));\n                                              if (task.isRunning) dispatch(toggleIsRunning({ idx: taskIndex }));\n                                              if (isFocussed) dispatch(resetFocussedTask());\n                                              dispatch(toggleIsCompleted(task.id));\n                                              dispatch(rearrange({ id: task.id, markedAsComplete: true }));\n                                              if(taskIndex===focussedTaskIndex)dispatch(toggleSoundscapeState(false));\n                                              e.stopPropagation();\n                                          }\n                                }\n                            >\n                                <p>{task.isCompleted ? \"Undone\" : \"Done\"}</p>\n                            </TaskActionButton>\n\n                            <TaskLabelContainer onClick={() => setLabelUnderEdit(true)} labelColor={task.label !== null ? labels[task.label].color : null}>\n                                {labelUnderEdit ? (\n                                    <TaskLabelSelect onBlur={labelSelectOnBlurHandler} taskId={task.id} taskLabel={task.label} />\n                                ) : task.label !== null ? (\n                                    <p>#{task.label}</p>\n                                ) : (\n                                    <p>Add label</p>\n                                )}\n                            </TaskLabelContainer>\n\n                            {!isFocussed && (\n                                <TaskDeleteButton\n                                    onClick={(e) => {\n                                        if (taskIndex < focussedTaskIndex) dispatch(focusOnTask(focussedTaskIndex - 1));\n                                        dispatch(remove(task.id));\n                                        if (task.label !== null) dispatch(updateLabelCount({ oldLabel: task.label, newLabel: null }));\n                                        e.stopPropagation();\n                                    }}\n                                >\n                                    <BsTrash />\n                                </TaskDeleteButton>\n                            )}\n                        </TaskControllerDiv>\n                    </TaskDetailsDiv>\n                </TaskCardDiv>\n            </TaskCardContainer>\n        </Flipped>\n    );\n}\n",["136","137"],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/FocussedTask.js",["138"],"/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js",[],"/home/pg07codes/Desktop/fokus/src/containers/miscBoard/MiscBoard.js",["139"],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyFocusBox.js",[],"/home/pg07codes/Desktop/fokus/src/index.js",[],["140","141"],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js",["142","143","144","145","146"],"import { createSlice } from \"@reduxjs/toolkit\";\n\nconst labelOptions = {\n    work: {\n        color: \"#de1738\",\n        count: 0,\n    },\n    personal: {\n        color: \"#89CFF0\",\n        count: 0,\n    },\n    fitness: {\n        color: \"#76ff7a\",\n        count: 0,\n    },\n    metime: {\n        color: \"#7442c8\",\n        count: 0,\n    },\n    explore: {\n        color: \"#efc0fe\",\n        count: 0,\n    },\n};\n\nexport const tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        taskArray: [],\n        labels: labelOptions,\n        soundscape: {\n            track: \"none\",\n            isPlaying: false,\n            volume: 0.6,\n        },\n        meta: {\n            globalKey: 0,\n            completedTaskStartIndex: -1,\n            focussedTaskIndex: -1,\n            showCompletedTasks: true,\n            completedTasksCount: 0,\n            totalTaskListTime: 0,\n            remainingTaskListTime: 0,\n        },\n    },\n    reducers: {\n        create: (tasks, { payload }) => {\n            tasks.taskArray.unshift(payload);\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\n            tasks.meta.totalTaskListTime += payload.time;\n            tasks.meta.remainingTaskListTime += payload.time;\n        },\n        remove: (tasks, { payload }) => {\n            \n            tasks.taskArray = tasks.taskArray.filter((i) => {\n                if (i.id !== payload) return true;\n                else {\n\n                    if (!i.isCompleted) {\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\n                    } else {\n                        tasks.meta.completedTasksCount--;\n                        if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length - 1) {\n                            tasks.meta.completedTaskStartIndex = -1;\n                        }\n                    }\n\n                    if (!i.isCompleted) {\n                        tasks.meta.remainingTaskListTime -= i.remainingTime;\n                    }\n                    tasks.meta.totalTaskListTime -= i.time;\n\n                    return false;\n                }\n            });\n        },\n        updateTaskContent: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.content = payload.updatedTaskContent;\n                }\n            });\n        },\n        updateTaskLabel: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.label = payload.label;\n                }\n            });\n        },\n        updateTaskTime: (tasks, { payload }) => {\n            tasks.taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    tasks.meta.totalTaskListTime -= i.time;\n                    tasks.meta.remainingTaskListTime -= i.remainingTime;\n                    tasks.meta.totalTaskListTime += payload.updatedTime * 60;\n                    tasks.meta.remainingTaskListTime += payload.updatedTime * 60;\n                    i.remainingTime = payload.updatedTime * 60;\n                    i.time = payload.updatedTime * 60;\n                }\n            });\n        },\n        updateTaskTimeByVal: (tasks, { payload }) => {\n\n            if (tasks.taskArray[payload.focussedTaskIndex].remainingTime +payload.val*60 < 0) {\n                tasks.meta.remainingTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\n            }else{\n                tasks.meta.remainingTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime += payload.val * 60;\n                tasks.meta.remainingTaskListTime += tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n            }\n            \n            if (tasks.taskArray[payload.focussedTaskIndex].time +payload.val*60< 0) {\n                tasks.meta.totalTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].time;\n                tasks.taskArray[payload.focussedTaskIndex].time = 0;\n            }else{\n                tasks.meta.totalTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].time;\n                tasks.taskArray[payload.focussedTaskIndex].time += payload.val * 60;\n                tasks.meta.totalTaskListTime += tasks.taskArray[payload.focussedTaskIndex].time;\n            }\n            \n        },\n        updateOrder: (tasks, { payload }) => {\n            tasks.taskArray = payload;\n        },\n\n        focusOnTask: (tasks, { payload }) => {\n            tasks.meta.focussedTaskIndex = payload;\n        },\n        resetFocussedTask: (tasks) => {\n            tasks.meta.focussedTaskIndex = -1;\n        },\n        tick: (tasks, { payload }) => {\n            --tasks.taskArray[payload].remainingTime;\n            --tasks.meta.remainingTaskListTime;\n        },\n        resetTaskTimer: (tasks, { payload }) => {\n            tasks.taskArray[payload].isRunning = false;\n\n            tasks.meta.remainingTaskListTime-=tasks.taskArray[payload].remainingTime;\n            tasks.meta.remainingTaskListTime+=tasks.taskArray[payload].time;\n\n            tasks.taskArray[payload].remainingTime = tasks.taskArray[payload].time;\n        },\n        toggleIsRunning: (tasks, { payload }) => {\n            if (payload.val !== undefined) tasks.taskArray[payload.idx].isRunning = payload.val;\n            else tasks.taskArray[payload.idx].isRunning = !tasks.taskArray[payload.idx].isRunning;\n        },\n        toggleShowCompletedTasks: (tasks) => {\n            tasks.meta.showCompletedTasks = !tasks.meta.showCompletedTasks;\n        },\n        toggleIsCompleted: (tasks, { payload }) => {\n            tasks.taskArray.forEach((i) => {\n                if (i.id === payload) {\n\n                    if(i.isCompleted){\n                        tasks.meta.remainingTaskListTime+=i.remainingTime;\n                        --tasks.meta.completedTasksCount\n                    }else{\n                        tasks.meta.remainingTaskListTime-=i.remainingTime;\n                        ++tasks.meta.completedTasksCount\n                    }\n\n                    i.isCompleted = !i.isCompleted;\n                }\n            });\n        },\n        clearCompletedTasks: (tasks) => {\n            if (tasks.meta.completedTaskStartIndex !== -1) {\n\n                for(let i=tasks.meta.completedTaskStartIndex;i<tasks.taskArray.length;i++){\n                    if(tasks.taskArray[i].label!==null)\n                    tasks.labels[tasks.taskArray[i].label].count--;\n\n                    tasks.meta.totalTaskListTime-=tasks.taskArray[i].time;\n                }\n\n                tasks.taskArray.length = tasks.meta.completedTaskStartIndex;\n                tasks.meta.completedTaskStartIndex = -1;\n                tasks.meta.completedTasksCount = 0;\n            }\n        },\n        updateLabelCount: (tasks, { payload }) => {\n            if (payload.oldLabel !== null) tasks.labels[payload.oldLabel].count--;\n            if (payload.newLabel !== null) tasks.labels[payload.newLabel].count++;\n        },\n        incrementGlobalKey: ({ meta }) => {\n            ++meta.globalKey;\n        },\n        rearrange: (tasks, { payload }) => {\n            let id = payload.id;\n\n            if (payload.markedAsComplete) {\n                if (tasks.meta.completedTaskStartIndex === -1) {\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                    let found = false;\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\n                        if (found) {\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        } else if (tasks.taskArray[i].id === id) {\n                            found = true;\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }\n                    }\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                } else {\n                    let task, idx;\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n                    let pos = -1;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    if (pos === -1) {\n                        tasks.taskArray.push(task);\n                    } else {\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.meta.completedTaskStartIndex -= 1;\n                }\n            } else {\n                if (tasks.meta.completedTaskStartIndex == 0) {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.taskArray.unshift(task);\n                    tasks.meta.completedTaskStartIndex = 1;\n                } else {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    let start = tasks.meta.completedTaskStartIndex - 1;\n                    let pos = -1;\n                    for (let i = start; i >= 0; i--) {\n                        if (tasks.taskArray[i].globalKey < task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    if (pos === -1) {\n                        tasks.taskArray.unshift(task);\n                    } else {\n                        pos++;\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.meta.completedTaskStartIndex += 1;\n                }\n\n                if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length) {\n                    tasks.meta.completedTaskStartIndex = -1;\n                }\n            }\n        },\n        changeSoundscapeTrack: ({ soundscape }, { payload }) => {\n            soundscape.track = payload;\n        },\n        toggleSoundscapeState: ({ soundscape }, { payload }) => {\n            soundscape.isPlaying = payload;\n        },\n        updateSoundscapeVolume: ({ soundscape }, { payload }) => {\n            soundscape.volume = payload;\n        },\n    },\n});\n\nexport const {\n    create,\n    remove,\n    updateTaskContent,\n    updateTaskLabel,\n    updateTaskTime,\n    updateTaskTimeByVal,\n    focusOnTask,\n    resetFocussedTask,\n    tick,\n    resetTaskTimer,\n    toggleIsRunning,\n    toggleShowCompletedTasks,\n    toggleIsCompleted,\n    clearCompletedTasks,\n    updateOrder,\n    updateLabelCount,\n    incrementGlobalKey,\n    rearrange,\n    changeSoundscapeTrack,\n    toggleSoundscapeState,\n    updateSoundscapeVolume,\n} = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n","/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js",[],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyTaskSummary.js",[],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js",["147","148","149"],"import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateOrder } from \"./taskBoardSlice\";\nimport TaskCard from \"./../../components/TaskBoard/TaskCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Flipper } from \"react-flip-toolkit\";\nimport { focusOnTask } from \"./taskBoardSlice\";\nimport styled from \"styled-components\";\nimport TaskInput from \"./../../components/TaskBoard/TaskInput\";\nimport Divider from \"./../../components/TaskBoard/Divider\";\nimport NoTasks from \"../../components/TaskBoard/NoTasks\";\n\nconst TaskBoardContainer = styled.div`\n    flex: 1 1 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-color: #f7f7fa;\n    -webkit-box-shadow: inset -3px 0 10px rgba(166, 173, 201, 0.3);\n    box-shadow: inset -3px 0 10px rgba(166, 173, 201, 0.3);\n`;\n\nexport function TaskBoard() {\n    const tasks = useSelector((state) => state.tasks.taskArray);\n    const meta = useSelector((state) => state.tasks.meta);\n    let focussedTask = meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex] : null;\n    const dispatch = useDispatch();\n\n    function handleOnDragEnd(result) {\n        if (!result.destination) return;\n\n        let items = [...tasks.map((i) => ({ ...i }))];\n        const [reorderedItem] = items.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorderedItem);\n\n        let i = result.source.index;\n        let direction = result.destination.index > result.source.index; // direction true means moving right & swapping\n        // below is logic to reset globalKeys to maintain correct sort order.\n        while (i != result.destination.index) {\n            if (direction) {\n                items[i].globalKey = tasks[i].globalKey;\n                i++;\n            } else {\n                items[i].globalKey = tasks[i].globalKey;\n                i--;\n            }\n            if (i == result.destination.index) {\n                items[i].globalKey = tasks[i].globalKey;\n            }\n        }\n\n        if (meta.focussedTaskIndex !== -1) {\n            let greaterIndex = Math.max(result.destination.index, result.source.index);\n            let smallerIndex = Math.min(result.destination.index, result.source.index);\n\n            if (result.source.index === meta.focussedTaskIndex) {\n                dispatch(focusOnTask(result.destination.index));\n            } else if (meta.focussedTaskIndex >= smallerIndex && meta.focussedTaskIndex <= greaterIndex) {\n                if (result.destination.index > result.source.index) {\n                    dispatch(focusOnTask(meta.focussedTaskIndex - 1)); // -1\n                } else {\n                    dispatch(focusOnTask(meta.focussedTaskIndex + 1)); // +1\n                }\n            }\n        }\n\n        dispatch(updateOrder(items)); // order is imp. focus then updateOrder\n    }\n\n    function getFlipKey() {\n        let flipKey = \"\";\n        tasks.forEach((i) => {\n            flipKey += `${i.globalKey}`;\n        });\n        flipKey += `${meta.completedTaskStartIndex}`;\n        return flipKey;\n    }\n\n    function isFocussed(id) {\n        if (focussedTask !== null && focussedTask.id === id) return true;\n        return false;\n    }\n\n    // input has both onChange and onKeyDown - can be optimised by using one and combining\n\n    return (\n        <TaskBoardContainer>\n            <TaskInput focussedTaskIndex={meta.focussedTaskIndex} />\n            {tasks.length === 0 ? <NoTasks /> : tasks.length === meta.completedTasksCount && <NoTasks allCompleted={true} />}\n            <Flipper flipKey={getFlipKey()}>\n                <DragDropContext onDragEnd={handleOnDragEnd}>\n                    <Droppable droppableId=\"dropArea\">\n                        {(provided) => (\n                            <div {...provided.droppableProps} ref={provided.innerRef}>\n                                {tasks.map((i, index) =>\n                                    !i.isCompleted ? (\n                                        <Draggable isDragDisabled={i.isCompleted} key={i.id} draggableId={`${i.id}`} index={index}>\n                                            {(provided2) => (\n                                                <TaskCard\n                                                    focussedTaskIndex={meta.focussedTaskIndex}\n                                                    focussedTaskGlobalKey={meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1}\n                                                    taskIndex={index}\n                                                    forwardRBDProvided={provided2}\n                                                    task={i}\n                                                    isFocussed={isFocussed(i.id)}\n                                                />\n                                            )}\n                                        </Draggable>\n                                    ) : (\n                                        \"\"\n                                    )\n                                )}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n\n                {meta.completedTaskStartIndex !== -1 && <Divider />}\n\n                {meta.showCompletedTasks &&\n                    tasks.map((i, index) =>\n                        i.isCompleted ? (\n                            <TaskCard\n                                focussedTaskIndex={meta.focussedTaskIndex}\n                                focussedTaskGlobalKey={meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1}\n                                taskIndex={index}\n                                key={i.id}\n                                forwardRBDProvided={{ innerRef: null }}\n                                task={i}\n                                isFocussed={isFocussed(i.id)}\n                            />\n                        ) : (\n                            \"\"\n                        )\n                    )}\n            </Flipper>\n        </TaskBoardContainer>\n    );\n}\n",["150","151"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskLabelSelect.js",["152"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/ListTimeSummary.js",[],"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js",["153","154","155"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js",[],"/home/pg07codes/Desktop/fokus/src/serviceWorker.js",[],"/home/pg07codes/Desktop/fokus/src/components/MusicBox/MusicVolumeControl.js",[],"/home/pg07codes/Desktop/fokus/src/components/MusicBox/musicUtils.js",[],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/ProgressRings.js",[],"/home/pg07codes/Desktop/fokus/src/components/MusicBox/Soundscapes.js",["156"],"import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { soundOptions, generateAudioElement } from \"./musicUtils\";\nimport { changeSoundscapeTrack } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport { MusicVolumeControl } from \"./MusicVolumeControl\";\n\nconst SoundscapesContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n    border-radius:10px;\n    /* background-color: #000; */\n`;\n\nconst SoundscapesDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    width: 100%;\n    height: 70%;\n    /* background-color: #df15ad; */\n    color:#c1c1d7;\n    p {\n        margin: 0;\n        font-weight:bold;\n    }\n`;\n\nconst SoundOptionsDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 80%;\n    /* background-color: #f8faaa; */\n`;\n\nconst SoundOptionsInput = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    flex-direction: column;\n    /* background-color: #b16afa; */\n    height:70%;\n    margin: 0 5px;\n    color:${(p) => (p.isSelectedSound ? \"#0000cd\" : \"#c1c1d7\")};\n    img {\n        width: 40px;\n        margin-bottom:8px;\n        border-radius:50%;\n        border:${(p) => (p.isSelectedSound ? \"3px solid #0000cd\" : \"none\")};\n    }\n    span {\n        margin: 0;\n        font-size:0.9em;\n        font-weight:bold;\n        font-style:italic;\n    }\n`;\n\nconst SoundVolumeControl = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    /* background-color: #cad1ff; */\n    width:85%;\n    height: 20%;\n`;\n\nexport function Soundscapes() {\n    const soundscape = useSelector((s) => s.tasks.soundscape);\n    const dispatch = useDispatch();\n\n    const [soundscapeAudioElement, setSoundscapeAudioElement] = useState(() => generateAudioElement(soundscape.track, soundscape.volume));\n\n    // ---- danger zone: don't change without full surety , this code is prone to issues ---///\n\n    useEffect(() => {\n        soundscapeAudioElement.src = soundOptions[soundscape.track].src;\n    }, [soundscape.track, soundscapeAudioElement, soundscape.isPlaying]);\n\n    soundscapeAudioElement.volume = soundscape.volume;\n    soundscapeAudioElement.addEventListener(\"canplay\", () => {\n        if (soundscape.isPlaying) {\n            soundscapeAudioElement.play();\n        } else {\n            soundscapeAudioElement.pause();\n        }\n    });\n\n    // ---- danger zone: this might be due to my lack of knowledge of useEffect or weird Audio element behaviour ---///\n\n    function isSelectedSound(track) {\n        return soundscape.track === track;\n    }\n\n    return (\n        <SoundscapesContainer>\n            <SoundscapesDiv>\n                <p>Soundscapes</p>\n                <SoundOptionsDiv>\n                    {Object.keys(soundOptions).map((i) => (\n                        <SoundOptionsInput key={i} onClick={() => dispatch(changeSoundscapeTrack(i))} isSelectedSound={isSelectedSound(i)}>\n                            <img src={soundOptions[i].img} alt={i} />\n                            <span>{soundOptions[i].label}</span>\n                        </SoundOptionsInput>\n                    ))}\n                </SoundOptionsDiv>\n            </SoundscapesDiv>\n            <SoundVolumeControl>\n                <MusicVolumeControl isDisabled={soundscape.track===\"none\"}/>\n            </SoundVolumeControl>\n        </SoundscapesContainer>\n    );\n}\n",["157","158"],"/home/pg07codes/Desktop/fokus/src/containers/menu/Menu.js",[],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TimeProgressCard.js",[],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TaskProgressCard.js",[],{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","severity":1,"message":"164","line":2,"column":23,"nodeType":"165","messageId":"166","endLine":2,"endColumn":34},{"ruleId":"159","replacedBy":"167"},{"ruleId":"161","replacedBy":"168"},{"ruleId":"169","severity":1,"message":"170","line":5,"column":14,"nodeType":"171","messageId":"172","endLine":5,"endColumn":16},{"ruleId":"169","severity":1,"message":"170","line":10,"column":14,"nodeType":"171","messageId":"172","endLine":10,"endColumn":16},{"ruleId":"169","severity":1,"message":"170","line":23,"column":14,"nodeType":"171","messageId":"172","endLine":23,"endColumn":16},{"ruleId":"169","severity":1,"message":"170","line":28,"column":14,"nodeType":"171","messageId":"172","endLine":28,"endColumn":16},{"ruleId":"169","severity":1,"message":"170","line":53,"column":14,"nodeType":"171","messageId":"172","endLine":53,"endColumn":16},{"ruleId":"169","severity":1,"message":"170","line":58,"column":15,"nodeType":"171","messageId":"172","endLine":58,"endColumn":17},{"ruleId":"159","replacedBy":"173"},{"ruleId":"161","replacedBy":"174"},{"ruleId":"163","severity":1,"message":"175","line":211,"column":17,"nodeType":"165","messageId":"166","endLine":211,"endColumn":21},{"ruleId":"159","replacedBy":"176"},{"ruleId":"161","replacedBy":"177"},{"ruleId":"163","severity":1,"message":"178","line":3,"column":18,"nodeType":"165","messageId":"166","endLine":3,"endColumn":21},{"ruleId":null,"fatal":true,"severity":2,"message":"179","line":7,"column":9},{"ruleId":"159","replacedBy":"180"},{"ruleId":"161","replacedBy":"181"},{"ruleId":"169","severity":1,"message":"182","line":49,"column":52,"nodeType":"171","messageId":"172","endLine":49,"endColumn":54},{"ruleId":"169","severity":1,"message":"182","line":60,"column":64,"nodeType":"171","messageId":"172","endLine":60,"endColumn":66},{"ruleId":"169","severity":1,"message":"170","line":63,"column":64,"nodeType":"171","messageId":"172","endLine":63,"endColumn":66},{"ruleId":"169","severity":1,"message":"170","line":238,"column":56,"nodeType":"171","messageId":"172","endLine":238,"endColumn":58},{"ruleId":"169","severity":1,"message":"170","line":281,"column":56,"nodeType":"171","messageId":"172","endLine":281,"endColumn":58},{"ruleId":"163","severity":1,"message":"183","line":1,"column":17,"nodeType":"165","messageId":"166","endLine":1,"endColumn":25},{"ruleId":"169","severity":1,"message":"182","line":39,"column":18,"nodeType":"171","messageId":"172","endLine":39,"endColumn":20},{"ruleId":"169","severity":1,"message":"170","line":47,"column":19,"nodeType":"171","messageId":"172","endLine":47,"endColumn":21},{"ruleId":"159","replacedBy":"184"},{"ruleId":"161","replacedBy":"185"},{"ruleId":"163","severity":1,"message":"164","line":2,"column":23,"nodeType":"165","messageId":"166","endLine":2,"endColumn":34},{"ruleId":"163","severity":1,"message":"164","line":2,"column":23,"nodeType":"165","messageId":"166","endLine":2,"endColumn":34},{"ruleId":"163","severity":1,"message":"186","line":16,"column":7,"nodeType":"165","messageId":"166","endLine":16,"endColumn":27},{"ruleId":"163","severity":1,"message":"187","line":57,"column":11,"nodeType":"165","messageId":"166","endLine":57,"endColumn":26},{"ruleId":"163","severity":1,"message":"188","line":79,"column":36,"nodeType":"165","messageId":"166","endLine":79,"endColumn":61},{"ruleId":"159","replacedBy":"189"},{"ruleId":"161","replacedBy":"190"},"no-native-reassign",["191"],"no-negated-in-lhs",["192"],"no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar",["191"],["192"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["191"],["192"],"'temp' is assigned a value but never used.",["191"],["192"],"'css' is defined but never used.","Parsing error: Identifier 'TimeProgressCard' has already been declared\n\n   5 | import { ProgressRings } from \"./../../components/MiscBoard/ProgressRings\";\n   6 | import {TimeProgressCard} from \"./../../components/MiscBoard/TimeProgressCard\";\n>  7 | import {TimeProgressCard} from \"./../../components/MiscBoard/TimeProgressCard\";\n     |         ^\n   8 | \n   9 | const MiscBoardContainer = styled.div`\n  10 |     flex: 2 1 0;",["191"],["192"],"Expected '!==' and instead saw '!='.","'useState' is defined but never used.",["191"],["192"],"'TaskSummaryContainer' is assigned a value but never used.","'totalTasksCount' is assigned a value but never used.","'setSoundscapeAudioElement' is assigned a value but never used.",["191"],["192"],"no-global-assign","no-unsafe-negation"]