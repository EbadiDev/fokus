[{"/home/pg07codes/Desktop/fokus/src/store/index.js":"1","/home/pg07codes/Desktop/fokus/src/helpers/index.js":"2","/home/pg07codes/Desktop/fokus/src/containers/App.js":"3","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js":"4","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/FocussedTask.js":"5","/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js":"6","/home/pg07codes/Desktop/fokus/src/containers/miscBoard/MiscBoard.js":"7","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyFocusBox.js":"8","/home/pg07codes/Desktop/fokus/src/index.js":"9","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js":"10","/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js":"11","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js":"12","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskLabelSelect.js":"13","/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js":"14","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js":"15","/home/pg07codes/Desktop/fokus/src/serviceWorker.js":"16","/home/pg07codes/Desktop/fokus/src/components/MusicBox/MusicVolumeControl.js":"17","/home/pg07codes/Desktop/fokus/src/components/MusicBox/musicUtils.js":"18","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/ProgressRings.js":"19","/home/pg07codes/Desktop/fokus/src/components/MusicBox/Soundscapes.js":"20","/home/pg07codes/Desktop/fokus/src/containers/menu/Menu.js":"21","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TimeProgressCard.js":"22","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TaskProgressCard.js":"23","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/NoTasks.js":"24","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/Divider.js":"25","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/DayDate.js":"26","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/LabelPie.js":"27","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/EmptyLabelPie.js":"28","/home/pg07codes/Desktop/fokus/src/helpers/constants.js":"29","/home/pg07codes/Desktop/fokus/src/containers/dashboard/index.js":"30","/home/pg07codes/Desktop/fokus/src/containers/dashboard/DashboardMain.js":"31","/home/pg07codes/Desktop/fokus/src/containers/dashboard/DashboardHero.js":"32"},{"size":214,"mtime":1612760411462,"results":"33","hashOfConfig":"34"},{"size":1753,"mtime":1614063441942,"results":"35","hashOfConfig":"34"},{"size":848,"mtime":1613740840965,"results":"36","hashOfConfig":"34"},{"size":14029,"mtime":1614323728649,"results":"37","hashOfConfig":"34"},{"size":8336,"mtime":1614175423677,"results":"38","hashOfConfig":"34"},{"size":1839,"mtime":1613636104237,"results":"39","hashOfConfig":"34"},{"size":3003,"mtime":1614324096162,"results":"40","hashOfConfig":"34"},{"size":4704,"mtime":1614175418709,"results":"41","hashOfConfig":"34"},{"size":651,"mtime":1613628682348,"results":"42","hashOfConfig":"34"},{"size":12841,"mtime":1614063295130,"results":"43","hashOfConfig":"34"},{"size":1541,"mtime":1614063953152,"results":"44","hashOfConfig":"34"},{"size":6198,"mtime":1613736651052,"results":"45","hashOfConfig":"34"},{"size":1304,"mtime":1613218352233,"results":"46","hashOfConfig":"34"},{"size":1871,"mtime":1614323769939,"results":"47","hashOfConfig":"34"},{"size":5232,"mtime":1614323717153,"results":"48","hashOfConfig":"34"},{"size":5141,"mtime":1608877484447,"results":"49","hashOfConfig":"34"},{"size":1695,"mtime":1613720752416,"results":"50","hashOfConfig":"34"},{"size":1143,"mtime":1613675294381,"results":"51","hashOfConfig":"34"},{"size":4127,"mtime":1613730906408,"results":"52","hashOfConfig":"34"},{"size":3937,"mtime":1614063475783,"results":"53","hashOfConfig":"34"},{"size":664,"mtime":1614161108766,"results":"54","hashOfConfig":"34"},{"size":2701,"mtime":1613730633856,"results":"55","hashOfConfig":"34"},{"size":1796,"mtime":1613730618061,"results":"56","hashOfConfig":"34"},{"size":973,"mtime":1613735051821,"results":"57","hashOfConfig":"34"},{"size":2621,"mtime":1613720728888,"results":"58","hashOfConfig":"34"},{"size":1285,"mtime":1613731790082,"results":"59","hashOfConfig":"34"},{"size":2820,"mtime":1613738944375,"results":"60","hashOfConfig":"34"},{"size":623,"mtime":1613738786667,"results":"61","hashOfConfig":"34"},{"size":35,"mtime":1614061712976,"results":"62","hashOfConfig":"34"},{"size":478,"mtime":1614324419501,"results":"63","hashOfConfig":"34"},{"size":521,"mtime":1614323864077,"results":"64","hashOfConfig":"34"},{"size":294,"mtime":1614324256155,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"g1paqb",{"filePath":"69","messages":"70","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"82"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pg07codes/Desktop/fokus/src/store/index.js",[],["141","142"],"/home/pg07codes/Desktop/fokus/src/helpers/index.js",["143","144","145","146","147","148"],"/home/pg07codes/Desktop/fokus/src/containers/App.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js",[],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/FocussedTask.js",["149","150","151"],"/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js",[],"/home/pg07codes/Desktop/fokus/src/containers/miscBoard/MiscBoard.js",["152","153"],"import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { LabelPie } from \"./../../components/MiscBoard/LabelPie\";\nimport { ProgressRings } from \"./../../components/MiscBoard/ProgressRings\";\nimport {TimeProgressCard} from \"./../../components/MiscBoard/TimeProgressCard\";\nimport {TaskProgressCard} from \"./../../components/MiscBoard/TaskProgressCard\";\n\nconst MiscBoardContainer = styled.div`\n    flex: 1 1 0;\n    min-width: 346px;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    justify-content: center;\n    height:100%;\n    /* background-color:orange; */\n`;\n\n\nconst MainSummaryContainer = styled.div`\n    display: flex;\n    align-items:center;\n    justify-content:space-around;\n    width: 90%;\n    max-width: 376px;\n    height: 300px;\n    margin: 10px 0;\n    border-radius:20px;\n    backface-visibility: hidden;\n    transform: translateZ(0);\n    transition: box-shadow 0.2s ease-in-out,transform 0.2s ease-in-out ;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\n    &:hover {\n        transform: scale(1.02);\n        -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.8);\n        box-shadow: 0 2px 10px rgba(166, 173, 201, 0.8);\n    }\n`;\n\nconst ProgressRingContainer = styled.div`\n    display: flex;\n    width: 45%;\n    height: 85%;\n    border-radius: 10px;\n    /* -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    background-color: #f7f7fa; */\n`;\n\nconst ProgressCardContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n    width: 35%;\n    height: 85%;\n    border-radius: 10px;\n    /* -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4); */\n    /* background-color: #f7adfa; */\n`;\n\nconst LabelPieContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 50%;\n    max-width:220px;\n    height: 200px;\n    margin: 10px 0;\n    border-radius: 10px;\n    /* -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4); */\n    background-color: #020202;\n    transition:transform 0.2s ease-in-out ;\n    &:hover {\n        transform: scale(1.02);\n    }\n`;\n\n\nexport function MiscBoard() {\n    return (\n        <MiscBoardContainer>\n            <MainSummaryContainer>\n                <ProgressRingContainer>\n                    <ProgressRings />\n                </ProgressRingContainer>\n                <ProgressCardContainer>\n                    <TaskProgressCard/>\n                    <TimeProgressCard/>\n                </ProgressCardContainer>\n            </MainSummaryContainer>\n\n            <LabelPieContainer>\n                <LabelPie />\n            </LabelPieContainer>\n        </MiscBoardContainer>\n    );\n}\n",["154","155"],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyFocusBox.js",["156","157","158","159","160"],"import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { ResetIcon } from \"./../../components/customIcons\";\nimport { FaPen } from \"react-icons/fa\";\nimport { CgNotes } from \"react-icons/cg\";\nimport ReactTooltip from \"react-tooltip\";\n\nconst FocussedTaskDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    flex-direction: column;\n    background-color: #fabb18;\n    width: 100%;\n    height: 100%;\n    border-radius: 20px;\n`;\n\nconst FocussedTaskPlayer = styled.div`\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    position: relative;\n    width: 100%;\n    height: 50%;\n    border-radius: 10px;\n    /* background-color: #FABB18; */\n    /* box-shadow: 0 2px 10px rgba(166, 173, 201, 0.5);\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.5); */\n`;\n\nconst FocussedTaskContent = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin: 5px;\n    padding: 5px;\n    height: 30%;\n    width: 90%;\n    max-width: 376px;\n    border-radius: 10px;\n    word-wrap: break-word;\n    svg {\n        font-size: 3em;\n    }\n    background-color: #fff;\n`;\n\nconst FocussedTaskTimer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 80%;\n    width: 50%;\n    /* background-color: #df1aa1; */\n`;\n\nconst CountdownTimerDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 85%;\n    height: 85%;\n    background-color: #fff;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    border-radius: 50%;\n    p {\n        margin: 0;\n        font-weight: bold;\n        color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#000\")};\n    }\n    span {\n        margin: 0 2px;\n        color: #4a4b46;\n        font-size: 0.8em;\n        font-weight: bold;\n    }\n`;\n\nconst FocussedTaskController = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n    height: 90%;\n    width: 30%;\n    /* background-color: #f1f7dd; */\n`;\n\nconst PlayPauseButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 55px;\n    height: 55px;\n    background-color: #000;\n    border-radius: 50%;\n    margin: 10px 20px;\n    svg {\n        color: #fabb18;\n        font-size: 1.2em;\n        margin-left: ${(p) => (p.isPlayBtn ? \"3px\" : \"0\")};\n    }\n`;\n\nconst UpdateTimeButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 30px;\n    height: 30px;\n`;\n\nconst ResetButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    background-color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#0000cd\")};\n    border-radius: 50%;\n    width: 30px;\n    height: 30px;\n    top: 5px;\n    left: 7px;\n    background-color: #000;\n    svg {\n        color: #fabb18;\n        width: 20px;\n    }\n`;\n\nexport function EmptyFocusBox() {\n\n    return (\n        <FocussedTaskDiv>\n            <FocussedTaskPlayer>\n                <FocussedTaskTimer>\n                    <div style={{ width: 110, height: 110 }}>\n                        <CircularProgressbarWithChildren\n                            value={100}\n                            styles={buildStyles({\n                                pathColor: \"#020202\",\n                                trailColor: \"#F0F8FF\",\n                            })}\n                            strokeWidth={8}\n                        >\n                            <CountdownTimerDiv>\n                                <p>00</p>\n                                <span>m</span>\n                                <p>00</p>\n                                <span>s</span>\n                            </CountdownTimerDiv>\n                        </CircularProgressbarWithChildren>\n                    </div>\n                </FocussedTaskTimer>\n\n                <FocussedTaskController>\n                    <PlayPauseButtonDiv data-tip=\"\" data-for=\"Create\">\n                        <FaPen />\n                        <ReactTooltip id=\"Create\" getContent={()=>\"Focus on task\"} />\n                    </PlayPauseButtonDiv>\n                </FocussedTaskController>\n\n            </FocussedTaskPlayer>\n            <FocussedTaskContent>\n                <CgNotes />\n            </FocussedTaskContent>\n        </FocussedTaskDiv>\n    );\n}\n","/home/pg07codes/Desktop/fokus/src/index.js",[],["161","162"],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js",["163","164","165","166","167"],"import { createSlice } from \"@reduxjs/toolkit\";\nimport { MIN_TO_MS } from \"./../../helpers/constants\";\n\nconst labelOptions = {\n    work: {\n        color: \"#de1738\",\n        count: 0,\n    },\n    personal: {\n        color: \"#89CFF0\",\n        count: 0,\n    },\n    fitness: {\n        color: \"#76ff7a\",\n        count: 0,\n    },\n    metime: {\n        color: \"#7442c8\",\n        count: 0,\n    },\n    explore: {\n        color: \"#efc0fe\",\n        count: 0,\n    },\n};\n\nexport const tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        taskArray: [],\n        labels: labelOptions,\n        soundscape: {\n            track: \"bell\",\n            isPlaying: false,\n            volume: 0.7,\n        },\n        meta: {\n            globalKey: 0,\n            completedTaskStartIndex: -1,\n            focussedTaskIndex: -1,\n            showCompletedTasks: true,\n            completedTasksCount: 0,\n            totalTaskListTime: 0,\n            remainingTaskListTime: 0,\n        },\n    },\n    reducers: {\n        create: (tasks, { payload }) => {\n            payload.time = payload.time * MIN_TO_MS;\n            payload.remainingTime = payload.remainingTime * MIN_TO_MS;\n            tasks.taskArray.unshift(payload);\n            tasks.meta.totalTaskListTime += payload.time;\n            tasks.meta.remainingTaskListTime += payload.time;\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\n        },\n        remove: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.filter((i) => {\n                if (i.id !== payload) return true;\n                else {\n                    if (!i.isCompleted) {\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\n                    } else {\n                        tasks.meta.completedTasksCount--;\n                        if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length - 1) {\n                            tasks.meta.completedTaskStartIndex = -1;\n                        }\n                    }\n\n                    if (!i.isCompleted) {\n                        tasks.meta.remainingTaskListTime -= i.remainingTime;\n                    }\n                    tasks.meta.totalTaskListTime -= i.time;\n\n                    return false;\n                }\n            });\n        },\n        updateTaskContent: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.content = payload.updatedTaskContent;\n                }\n            });\n        },\n        updateTaskLabel: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.label = payload.label;\n                }\n            });\n        },\n        updateTaskTime: (tasks, { payload }) => {\n            tasks.taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    tasks.meta.totalTaskListTime -= i.time;\n                    tasks.meta.remainingTaskListTime -= i.remainingTime;\n                    tasks.meta.totalTaskListTime += payload.updatedTime * MIN_TO_MS;\n                    tasks.meta.remainingTaskListTime += payload.updatedTime * MIN_TO_MS;\n                    i.remainingTime = payload.updatedTime * MIN_TO_MS;\n                    i.time = payload.updatedTime * MIN_TO_MS;\n                }\n            });\n        },\n        updateTaskTimeByVal: (tasks, { payload }) => {\n            if (tasks.taskArray[payload.focussedTaskIndex].remainingTime + payload.val * MIN_TO_MS < 0) {\n                tasks.meta.remainingTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\n            } else {\n                tasks.meta.remainingTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime += payload.val * MIN_TO_MS;\n                tasks.meta.remainingTaskListTime += tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n            }\n\n            if (tasks.taskArray[payload.focussedTaskIndex].time + payload.val * MIN_TO_MS < 0) {\n                tasks.meta.totalTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].time;\n                tasks.taskArray[payload.focussedTaskIndex].time = 0;\n            } else {\n                tasks.meta.totalTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].time;\n                tasks.taskArray[payload.focussedTaskIndex].time += payload.val * MIN_TO_MS;\n                tasks.meta.totalTaskListTime += tasks.taskArray[payload.focussedTaskIndex].time;\n            }\n        },\n        updateOrder: (tasks, { payload }) => {\n            tasks.taskArray = payload;\n        },\n\n        focusOnTask: (tasks, { payload }) => {\n            tasks.meta.focussedTaskIndex = payload;\n        },\n        resetFocussedTask: (tasks) => {\n            tasks.meta.focussedTaskIndex = -1;\n        },\n        tick: (tasks, { payload }) => {\n            tasks.taskArray[payload.focussedTaskIndex].remainingTime -= payload.deltaMS;\n            tasks.meta.remainingTaskListTime -= payload.deltaMS;\n\n            if (tasks.taskArray[payload.focussedTaskIndex].remainingTime < 0) {\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\n            }\n            if (tasks.meta.remainingTaskListTime < 0) {\n                tasks.meta.remainingTaskListTime = 0;\n            }\n        },\n        resetTaskTimer: (tasks, { payload }) => {\n            tasks.taskArray[payload].isRunning = false;\n\n            tasks.meta.remainingTaskListTime -= tasks.taskArray[payload].remainingTime;\n            tasks.meta.remainingTaskListTime += tasks.taskArray[payload].time;\n\n            tasks.taskArray[payload].remainingTime = tasks.taskArray[payload].time;\n        },\n        toggleIsRunning: (tasks, { payload }) => {\n            if (payload.val !== undefined) tasks.taskArray[payload.idx].isRunning = payload.val;\n            else tasks.taskArray[payload.idx].isRunning = !tasks.taskArray[payload.idx].isRunning;\n        },\n        toggleShowCompletedTasks: (tasks) => {\n            tasks.meta.showCompletedTasks = !tasks.meta.showCompletedTasks;\n        },\n        toggleIsCompleted: (tasks, { payload }) => {\n            tasks.taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    if (i.isCompleted) {\n                        tasks.meta.remainingTaskListTime += i.remainingTime;\n                        --tasks.meta.completedTasksCount;\n                    } else {\n                        tasks.meta.remainingTaskListTime -= i.remainingTime;\n                        ++tasks.meta.completedTasksCount;\n                    }\n\n                    i.isCompleted = !i.isCompleted;\n                }\n            });\n        },\n        clearCompletedTasks: (tasks) => {\n            if (tasks.meta.completedTaskStartIndex !== -1) {\n                for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                    if (tasks.taskArray[i].label !== null) tasks.labels[tasks.taskArray[i].label].count--;\n\n                    tasks.meta.totalTaskListTime -= tasks.taskArray[i].time;\n                }\n\n                tasks.taskArray.length = tasks.meta.completedTaskStartIndex;\n                tasks.meta.completedTaskStartIndex = -1;\n                tasks.meta.completedTasksCount = 0;\n            }\n        },\n        updateLabelCount: (tasks, { payload }) => {\n            if (payload.oldLabel !== null) tasks.labels[payload.oldLabel].count--;\n            if (payload.newLabel !== null) tasks.labels[payload.newLabel].count++;\n        },\n        incrementGlobalKey: ({ meta }) => {\n            ++meta.globalKey;\n        },\n        rearrange: (tasks, { payload }) => {\n            let id = payload.id;\n\n            if (payload.markedAsComplete) {\n                if (tasks.meta.completedTaskStartIndex === -1) {\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                    let found = false;\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\n                        if (found) {\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        } else if (tasks.taskArray[i].id === id) {\n                            found = true;\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }\n                    }\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                } else {\n                    let task, idx;\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n                    let pos = -1;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    if (pos === -1) {\n                        tasks.taskArray.push(task);\n                    } else {\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.meta.completedTaskStartIndex -= 1;\n                }\n            } else {\n                if (tasks.meta.completedTaskStartIndex == 0) {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.taskArray.unshift(task);\n                    tasks.meta.completedTaskStartIndex = 1;\n                } else {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    let start = tasks.meta.completedTaskStartIndex - 1;\n                    let pos = -1;\n                    for (let i = start; i >= 0; i--) {\n                        if (tasks.taskArray[i].globalKey < task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    if (pos === -1) {\n                        tasks.taskArray.unshift(task);\n                    } else {\n                        pos++;\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.meta.completedTaskStartIndex += 1;\n                }\n\n                if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length) {\n                    tasks.meta.completedTaskStartIndex = -1;\n                }\n            }\n        },\n        changeSoundscapeTrack: ({ soundscape }, { payload }) => {\n            soundscape.track = payload;\n        },\n        toggleSoundscapeState: ({ soundscape }, { payload }) => {\n            soundscape.isPlaying = payload;\n        },\n        updateSoundscapeVolume: ({ soundscape }, { payload }) => {\n            soundscape.volume = payload;\n        },\n    },\n});\n\nexport const {\n    create,\n    remove,\n    updateTaskContent,\n    updateTaskLabel,\n    updateTaskTime,\n    updateTaskTimeByVal,\n    focusOnTask,\n    resetFocussedTask,\n    tick,\n    resetTaskTimer,\n    toggleIsRunning,\n    toggleShowCompletedTasks,\n    toggleIsCompleted,\n    clearCompletedTasks,\n    updateOrder,\n    updateLabelCount,\n    incrementGlobalKey,\n    rearrange,\n    changeSoundscapeTrack,\n    toggleSoundscapeState,\n    updateSoundscapeVolume,\n} = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n","/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js",[],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js",["168","169","170"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskLabelSelect.js",["171"],"import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\n\nconst TaskSelectInput = styled.select`\n    font-weight: bold;\n    text-align: center;\n    border:0;\n    background-color:#fff;\n    option{\n        font-weight:bold;\n    }\n`;\n\nexport default function TaskLabel(p) {\n    const labels = useSelector((s) => s.tasks.labels);\n    const [updatedLabel, setUpdatedLabel] = useState(p.taskLabel);\n\n    return (\n        // <div style={{ height: \"100%\", width: 80 }}>\n        <TaskSelectInput\n        autoFocus\n            name=\"labels\"\n            onBlur={() => p.onBlur(p.taskId,p.taskLabel, updatedLabel)}\n            defaultValue={updatedLabel}\n            onChange={(e) => setUpdatedLabel(e.target.value)}\n            onKeyDown={(e) => (e.key === \"Enter\" ? p.onBlur(p.taskId,p.taskLabel, updatedLabel) : null)}\n        >\n            <option value=\"none\">none</option> \n            {/* keeping option:none at top makes it show up if taskLabel is null which is desired */}\n            {Object.keys(labels).map((e, idx) => (\n                <option style={{color:`${labels[e].color}`}} key={idx} value={e}>\n                    {e}\n                </option>\n            ))}\n        </TaskSelectInput>\n        // </div>\n    );\n}\n",["172","173"],"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js",["174","175","176"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js",[],"/home/pg07codes/Desktop/fokus/src/serviceWorker.js",[],"/home/pg07codes/Desktop/fokus/src/components/MusicBox/MusicVolumeControl.js",["177"],"/home/pg07codes/Desktop/fokus/src/components/MusicBox/musicUtils.js",[],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/ProgressRings.js",[],"/home/pg07codes/Desktop/fokus/src/components/MusicBox/Soundscapes.js",["178"],"/home/pg07codes/Desktop/fokus/src/containers/menu/Menu.js",[],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TimeProgressCard.js",[],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TaskProgressCard.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/NoTasks.js",["179"],"import React from \"react\";\nimport styled from \"styled-components\";\nimport noTasks from \"./../../images/noTasks.svg\";\nimport ReactTooltip from \"react-tooltip\";\n\nconst NoTasksDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-evenly;\n    width: ${(p)=>p.allCompleted?\"40%\":\"70%\"};\n    margin: 30px 10px;\n`;\n\nconst NoTasksIcon = styled.div`\n    img {\n        width: 90%;\n    }\n`;\n\nconst NoTasksText = styled.div`\n    p {\n        font-weight: bold;\n        margin: 0;\n        color: #c1c1d7;\n    }\n`;\n\nexport default function NoTasks({ allCompleted }) {\n    return (\n        <NoTasksDiv allCompleted={allCompleted}>\n            <NoTasksIcon data-tip=\"\" data-for=\"taskIcon\">\n                <img src={noTasks} alt={\"No Tasks\"} />\n                <ReactTooltip id=\"taskIcon\" getContent={()=>allCompleted ? \"create more tasks\" : \"create task to begin\"} />\n            </NoTasksIcon>\n        </NoTasksDiv>\n    );\n}\n","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/Divider.js",[],["180","181"],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/DayDate.js",["182"],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/LabelPie.js",[],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/EmptyLabelPie.js",["183"],"import React, { useState } from \"react\";\nimport ReactTooltip from \"react-tooltip\";\nimport { ImPieChart } from \"react-icons/im\";\nimport styled from \"styled-components\";\n\nconst EmptyLabelPieDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 160px;\n    svg {\n        color: #fff;\n        font-size: 6em;\n    }\n`;\n\nexport function EmptyLabelPie() {\n    return (\n        <EmptyLabelPieDiv data-tip=\"\" data-for=\"EmptyLabelPie\">\n            <ImPieChart />\n            <ReactTooltip id=\"EmptyLabelPie\" getContent={() => \"Tasks/Labels Pie\"} />\n        </EmptyLabelPieDiv>\n    );\n}\n","/home/pg07codes/Desktop/fokus/src/helpers/constants.js",[],"/home/pg07codes/Desktop/fokus/src/containers/dashboard/index.js",[],"/home/pg07codes/Desktop/fokus/src/containers/dashboard/DashboardMain.js",[],"/home/pg07codes/Desktop/fokus/src/containers/dashboard/DashboardHero.js",[],{"ruleId":"184","replacedBy":"185"},{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","severity":1,"message":"189","line":6,"column":14,"nodeType":"190","messageId":"191","endLine":6,"endColumn":16},{"ruleId":"188","severity":1,"message":"189","line":11,"column":14,"nodeType":"190","messageId":"191","endLine":11,"endColumn":16},{"ruleId":"188","severity":1,"message":"189","line":25,"column":14,"nodeType":"190","messageId":"191","endLine":25,"endColumn":16},{"ruleId":"188","severity":1,"message":"189","line":30,"column":14,"nodeType":"190","messageId":"191","endLine":30,"endColumn":16},{"ruleId":"188","severity":1,"message":"189","line":56,"column":14,"nodeType":"190","messageId":"191","endLine":56,"endColumn":16},{"ruleId":"188","severity":1,"message":"189","line":61,"column":15,"nodeType":"190","messageId":"191","endLine":61,"endColumn":17},{"ruleId":"192","severity":1,"message":"193","line":3,"column":18,"nodeType":"194","messageId":"195","endLine":3,"endColumn":21},{"ruleId":"192","severity":1,"message":"196","line":5,"column":8,"nodeType":"194","messageId":"195","endLine":5,"endColumn":16},{"ruleId":"192","severity":1,"message":"197","line":11,"column":33,"nodeType":"194","messageId":"195","endLine":11,"endColumn":49},{"ruleId":"192","severity":1,"message":"198","line":2,"column":10,"nodeType":"194","messageId":"195","endLine":2,"endColumn":21},{"ruleId":"192","severity":1,"message":"199","line":2,"column":23,"nodeType":"194","messageId":"195","endLine":2,"endColumn":34},{"ruleId":"184","replacedBy":"200"},{"ruleId":"186","replacedBy":"201"},{"ruleId":"192","severity":1,"message":"198","line":2,"column":10,"nodeType":"194","messageId":"195","endLine":2,"endColumn":21},{"ruleId":"192","severity":1,"message":"199","line":2,"column":23,"nodeType":"194","messageId":"195","endLine":2,"endColumn":34},{"ruleId":"192","severity":1,"message":"202","line":6,"column":10,"nodeType":"194","messageId":"195","endLine":6,"endColumn":19},{"ruleId":"192","severity":1,"message":"203","line":111,"column":7,"nodeType":"194","messageId":"195","endLine":111,"endColumn":26},{"ruleId":"192","severity":1,"message":"204","line":119,"column":7,"nodeType":"194","messageId":"195","endLine":119,"endColumn":21},{"ruleId":"184","replacedBy":"205"},{"ruleId":"186","replacedBy":"206"},{"ruleId":"188","severity":1,"message":"207","line":54,"column":52,"nodeType":"190","messageId":"191","endLine":54,"endColumn":54},{"ruleId":"188","severity":1,"message":"207","line":61,"column":64,"nodeType":"190","messageId":"191","endLine":61,"endColumn":66},{"ruleId":"188","severity":1,"message":"189","line":64,"column":64,"nodeType":"190","messageId":"191","endLine":64,"endColumn":66},{"ruleId":"188","severity":1,"message":"189","line":241,"column":56,"nodeType":"190","messageId":"191","endLine":241,"endColumn":58},{"ruleId":"188","severity":1,"message":"189","line":284,"column":56,"nodeType":"190","messageId":"191","endLine":284,"endColumn":58},{"ruleId":"192","severity":1,"message":"208","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":25},{"ruleId":"188","severity":1,"message":"207","line":39,"column":18,"nodeType":"190","messageId":"191","endLine":39,"endColumn":20},{"ruleId":"188","severity":1,"message":"189","line":47,"column":19,"nodeType":"190","messageId":"191","endLine":47,"endColumn":21},{"ruleId":"192","severity":1,"message":"199","line":2,"column":23,"nodeType":"194","messageId":"195","endLine":2,"endColumn":34},{"ruleId":"184","replacedBy":"209"},{"ruleId":"186","replacedBy":"210"},{"ruleId":"192","severity":1,"message":"199","line":2,"column":23,"nodeType":"194","messageId":"195","endLine":2,"endColumn":34},{"ruleId":"192","severity":1,"message":"211","line":8,"column":10,"nodeType":"194","messageId":"195","endLine":8,"endColumn":17},{"ruleId":"192","severity":1,"message":"212","line":48,"column":11,"nodeType":"194","messageId":"195","endLine":48,"endColumn":26},{"ruleId":"192","severity":1,"message":"213","line":8,"column":7,"nodeType":"194","messageId":"195","endLine":8,"endColumn":25},{"ruleId":"192","severity":1,"message":"214","line":88,"column":36,"nodeType":"194","messageId":"195","endLine":88,"endColumn":61},{"ruleId":"192","severity":1,"message":"215","line":21,"column":7,"nodeType":"194","messageId":"195","endLine":21,"endColumn":18},{"ruleId":"184","replacedBy":"216"},{"ruleId":"186","replacedBy":"217"},{"ruleId":"192","severity":1,"message":"208","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":25},{"ruleId":"192","severity":1,"message":"208","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":25},"no-native-reassign",["218"],"no-negated-in-lhs",["219"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'css' is defined but never used.","Identifier","unusedVar","'useTimer' is defined but never used.","'getFormattedDate' is defined but never used.","'useSelector' is defined but never used.","'useDispatch' is defined but never used.",["218"],["219"],"'ResetIcon' is defined but never used.","'UpdateTimeButtonDiv' is assigned a value but never used.","'ResetButtonDiv' is assigned a value but never used.",["218"],["219"],"Expected '!==' and instead saw '!='.","'useState' is defined but never used.",["218"],["219"],"'DayDate' is defined but never used.","'totalTasksCount' is assigned a value but never used.","'VolumeFeedbackText' is assigned a value but never used.","'setSoundscapeAudioElement' is assigned a value but never used.","'NoTasksText' is assigned a value but never used.",["218"],["219"],"no-global-assign","no-unsafe-negation"]