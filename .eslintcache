[{"/home/pg07codes/Desktop/fokus/src/components/MusicBox/MusicVolumeControl.js":"1","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/FocussedTask.js":"2","/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js":"3","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TaskProgressCard.js":"4","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TimeProgressCard.js":"5","/home/pg07codes/Desktop/fokus/src/store/index.js":"6","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js":"7","/home/pg07codes/Desktop/fokus/src/helpers/constants.js":"8","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskLabelSelect.js":"9","/home/pg07codes/Desktop/fokus/src/containers/miscBoard/MiscBoard.js":"10","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/LabelPie.js":"11"},{"size":1577,"mtime":1615026301342,"results":"12","hashOfConfig":"13"},{"size":10290,"mtime":1615028274854,"results":"14","hashOfConfig":"13"},{"size":1541,"mtime":1614063953152,"results":"15","hashOfConfig":"13"},{"size":2050,"mtime":1615028874437,"results":"16","hashOfConfig":"13"},{"size":3090,"mtime":1615028877261,"results":"17","hashOfConfig":"13"},{"size":318,"mtime":1614758461972,"results":"18","hashOfConfig":"13"},{"size":14332,"mtime":1615025173107,"results":"19","hashOfConfig":"13"},{"size":37,"mtime":1614758843140,"results":"20","hashOfConfig":"13"},{"size":1370,"mtime":1614849859499,"results":"21","hashOfConfig":"13"},{"size":4704,"mtime":1614847186257,"results":"22","hashOfConfig":"13"},{"size":2823,"mtime":1615018247500,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"g1paqb",{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pg07codes/Desktop/fokus/src/components/MusicBox/MusicVolumeControl.js",[],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/FocussedTask.js",["46","47","48"],"/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js",[],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TaskProgressCard.js",[],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TimeProgressCard.js",[],"/home/pg07codes/Desktop/fokus/src/store/index.js",[],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js",["49","50","51","52","53"],"/home/pg07codes/Desktop/fokus/src/helpers/constants.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskLabelSelect.js",["54"],"/home/pg07codes/Desktop/fokus/src/containers/miscBoard/MiscBoard.js",["55","56"],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/LabelPie.js",[],{"ruleId":"57","severity":1,"message":"58","line":10,"column":5,"nodeType":"59","messageId":"60","endLine":10,"endColumn":22},{"ruleId":"57","severity":1,"message":"61","line":11,"column":5,"nodeType":"59","messageId":"60","endLine":11,"endColumn":22},{"ruleId":"57","severity":1,"message":"62","line":13,"column":8,"nodeType":"59","messageId":"60","endLine":13,"endColumn":16},{"ruleId":"63","severity":1,"message":"64","line":54,"column":52,"nodeType":"65","messageId":"66","endLine":54,"endColumn":54},{"ruleId":"63","severity":1,"message":"64","line":61,"column":64,"nodeType":"65","messageId":"66","endLine":61,"endColumn":66},{"ruleId":"63","severity":1,"message":"67","line":64,"column":64,"nodeType":"65","messageId":"66","endLine":64,"endColumn":66},{"ruleId":"63","severity":1,"message":"67","line":270,"column":56,"nodeType":"65","messageId":"66","endLine":270,"endColumn":58},{"ruleId":"63","severity":1,"message":"67","line":313,"column":56,"nodeType":"65","messageId":"66","endLine":313,"endColumn":58},{"ruleId":"57","severity":1,"message":"68","line":2,"column":23,"nodeType":"59","messageId":"60","endLine":2,"endColumn":34},{"ruleId":"57","severity":1,"message":"69","line":2,"column":10,"nodeType":"59","messageId":"60","endLine":2,"endColumn":21},{"ruleId":"57","severity":1,"message":"68","line":2,"column":23,"nodeType":"59","messageId":"60","endLine":2,"endColumn":34},"no-unused-vars","'toggleIsCompleted' is defined but never used.","Identifier","unusedVar","'resetFocussedTask' is defined but never used.","'useTimer' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'useDispatch' is defined but never used.","'useSelector' is defined but never used."]sageId":"83","endLine":56,"endColumn":16},{"ruleId":"80","severity":1,"message":"84","line":61,"column":15,"nodeType":"82","messageId":"83","endLine":61,"endColumn":17},{"ruleId":"80","severity":1,"message":"84","line":81,"column":11,"nodeType":"82","messageId":"83","endLine":81,"endColumn":13},{"ruleId":"80","severity":1,"message":"81","line":81,"column":21,"nodeType":"82","messageId":"83","endLine":81,"endColumn":23},{"ruleId":"80","severity":1,"message":"84","line":84,"column":11,"nodeType":"82","messageId":"83","endLine":84,"endColumn":13},{"ruleId":"80","severity":1,"message":"81","line":84,"column":21,"nodeType":"82","messageId":"83","endLine":84,"endColumn":23},{"ruleId":"80","severity":1,"message":"84","line":87,"column":11,"nodeType":"82","messageId":"83","endLine":87,"endColumn":13},{"ruleId":"80","severity":1,"message":"81","line":87,"column":21,"nodeType":"82","messageId":"83","endLine":87,"endColumn":23},"no-unused-vars","'toggleIsCompleted' is defined but never used.","Identifier","unusedVar","'resetFocussedTask' is defined but never used.","'useTimer' is defined but never used.","no-native-reassign",["88"],"no-negated-in-lhs",["89"],"'useState' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","'debounce' is defined but never used.","no-global-assign","no-unsafe-negation"]top: 7px;\n    left: 7px;\n    cursor: pointer;\n    background-color: #000;\n    svg {\n        color: #fabb18;\n        width: 20px;\n    }\n`;\n\nexport function FocussedTask() {\n    const focussedTaskIndex = useSelector((state) => state.tasks.meta.focussedTaskIndex);\n    let focussedTask = useSelector((state) => (focussedTaskIndex !== -1 ? state.tasks.taskArray[focussedTaskIndex] : null));\n    const dispatch = useDispatch();\n    const delay = 1010; // to account for the delay in executing code.\n    // useTimer(\n    //     () => {\n    //         if (focussedTask === null) return;\n    //         else if (focussedTask.remainingTime > 0) {\n    //             dispatch(tick(focussedTaskIndex));\n    //         } else if (focussedTask.remainingTime === 0) {\n    //             dispatch(toggleSoundscapeState(false));\n    //             dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n    //             dingSoundElement.play();\n    //         }\n    //     },\n    //     focussedTask !== null && focussedTask.isRunning ? delay : null\n    // );\n    useTimer2(\n        (deltaMS) => {\n            if (focussedTask === null) return;\n            else if (focussedTask.remainingTime > 0) {\n                dispatch(tick({ focussedTaskIndex, deltaMS }));\n            } else if (focussedTask.remainingTime === 0) {\n                dispatch(toggleSoundscapeState(false));\n                dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n                dingSoundElement.play();\n            }\n        },\n        focussedTask !== null && focussedTask.isRunning ? delay : null\n    );\n\n    function updateTaskTimeHandler(val) {\n        if (focussedTask.time + val * MIN_TO_MS < 0) return;\n        if (focussedTask.time + val * MIN_TO_MS > 120 * MIN_TO_MS) return;\n        if (focussedTask.isRunning) dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n        dispatch(updateTaskTimeByVal({ focussedTaskIndex, val }));\n        dispatch(toggleSoundscapeState(false));\n    }\n\n    function playPauseHandler(focussedTaskIndex, wasTaskRunning) {\n        dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n        if (wasTaskRunning) {\n            dispatch(toggleSoundscapeState(false));\n        } else {\n            dispatch(toggleSoundscapeState(true));\n        }\n    }\n\n    const countdownObj = formattedTimeStringv2(focussedTask.remainingTime);\n    let countdownMins = countdownObj.mins;\n    let countdownSecs = countdownObj.secs;\n\n    const totalTaskTimeObj = formattedTimeStringv2(focussedTask.time);\n    let totalTaskMins = totalTaskTimeObj.mins;\n\n    return (\n        <FocussedTaskDiv>\n            <FocussedTaskPlayer>\n                <FocussedTaskTimer>\n                    <div style={{ width: 100, height: 100 }}>\n                        <CircularProgressbarWithChildren\n                            value={focussedTask.time !== 0 ? Math.floor((focussedTask.remainingTime / focussedTask.time) * 100) : 0}\n                            styles={buildStyles({\n                                strokeLinecap: \"butt\",\n                                pathColor: \"#121212\",\n                                trailColor: \"#F0F8FF\",\n                            })}\n                            strokeWidth={9}\n                        >\n                            <CountdownTimerDiv>\n                                <p>{countdownMins}</p>\n                                <span>m</span>\n                                <p>{countdownSecs}</p>\n                                <span>s</span>\n                            </CountdownTimerDiv>\n                        </CircularProgressbarWithChildren>\n                    </div>\n                </FocussedTaskTimer>\n\n                <FocussedTaskController>\n                    <UpdateTimeButtonDiv isDisabled={focussedTask.time + 5 * MIN_TO_MS > 120 * MIN_TO_MS} onClick={() => updateTaskTimeHandler(5)}>\n                        <h4>+5</h4>\n                    </UpdateTimeButtonDiv>\n\n                    {focussedTask.remainingTime !== 0 ? (\n                        <PlayPauseButtonDiv isPlayBtn={!focussedTask.isRunning} onClick={() => playPauseHandler(focussedTaskIndex, focussedTask.isRunning)}>\n                            {focussedTask.isRunning ? <BsFillPauseFill /> : <BsFillPlayFill />}\n                        </PlayPauseButtonDiv>\n                    ) : (\n                        <TaskCompletedDiv data-tip=\"\" data-for=\"taskCompleted\">\n                            <FaClipboardCheck />\n                            <ReactTooltip id=\"taskCompleted\" getContent={() => \"Task Completed\"} />\n                        </TaskCompletedDiv>\n                    )}\n\n                    <UpdateTimeButtonDiv isDisabled={focussedTask.time - 5 * MIN_TO_MS < 0} onClick={() => updateTaskTimeHandler(-5)}>\n                        <h4>-5</h4>\n                    </UpdateTimeButtonDiv>\n                </FocussedTaskController>\n\n                <ResetButtonDiv\n                    onClick={() => {\n                        dispatch(toggleSoundscapeState(false));\n                        dispatch(resetTaskTimer(focussedTaskIndex));\n                    }}\n                    data-for=\"reset\"\n                    data-tip=\"\"\n                >\n                    <ResetIcon />\n                    <ReactTooltip id=\"reset\" getContent={() => \"Reset\"} />\n                </ResetButtonDiv>\n            </FocussedTaskPlayer>\n            <FocussedTaskContent>\n                <p>{focussedTask.content}</p>\n                <TotalTaskTimeBadge data-tip=\"\" data-for=\"totalTimeBadge\">\n                    <p>{totalTaskMins}m</p>\n                    <ReactTooltip id=\"totalTimeBadge\" getContent={() => \"Task's total time\"} />\n                </TotalTaskTimeBadge>\n            </FocussedTaskContent>\n        </FocussedTaskDiv>\n    );\n}\n",["39","40"],"/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js",[],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TaskProgressCard.js",[],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TimeProgressCard.js",[],"/home/pg07codes/Desktop/fokus/src/containers/App.js",[],"/home/pg07codes/Desktop/fokus/src/containers/menu/Menu.js",[],"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js",["41"],{"ruleId":"42","severity":1,"message":"43","line":10,"column":5,"nodeType":"44","messageId":"45","endLine":10,"endColumn":22},{"ruleId":"42","severity":1,"message":"46","line":11,"column":5,"nodeType":"44","messageId":"45","endLine":11,"endColumn":22},{"ruleId":"42","severity":1,"message":"47","line":13,"column":8,"nodeType":"44","messageId":"45","endLine":13,"endColumn":16},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"42","severity":1,"message":"52","line":2,"column":23,"nodeType":"44","messageId":"45","endLine":2,"endColumn":34},"no-unused-vars","'toggleIsCompleted' is defined but never used.","Identifier","unusedVar","'resetFocussedTask' is defined but never used.","'useTimer' is defined but never used.","no-native-reassign",["53"],"no-negated-in-lhs",["54"],"'useDispatch' is defined but never used.","no-global-assign","no-unsafe-negation"]