[{"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/focusBoardSlice.js":"1","/home/pg07codes/Desktop/fokus/src/containers/App.js":"2","/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js":"3","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js":"4","/home/pg07codes/Desktop/fokus/src/serviceWorker.js":"5","/home/pg07codes/Desktop/fokus/src/index.js":"6","/home/pg07codes/Desktop/fokus/src/helpers/index.js":"7","/home/pg07codes/Desktop/fokus/src/store/index.js":"8","/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js":"9","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js":"10","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js":"11","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js":"12","/home/pg07codes/Desktop/fokus/src/components/customIcons/Globe.js":"13"},{"size":1183,"mtime":1612447980631,"results":"14","hashOfConfig":"15"},{"size":395,"mtime":1612199237429,"results":"16","hashOfConfig":"15"},{"size":528,"mtime":1611252515979,"results":"17","hashOfConfig":"15"},{"size":6824,"mtime":1612375820558,"results":"18","hashOfConfig":"15"},{"size":5141,"mtime":1608877484447,"results":"19","hashOfConfig":"15"},{"size":651,"mtime":1608902523877,"results":"20","hashOfConfig":"15"},{"size":340,"mtime":1612282841002,"results":"21","hashOfConfig":"15"},{"size":327,"mtime":1612199332055,"results":"22","hashOfConfig":"15"},{"size":6066,"mtime":1612589423323,"results":"23","hashOfConfig":"15"},{"size":3774,"mtime":1612616131155,"results":"24","hashOfConfig":"15"},{"size":3706,"mtime":1612605611249,"results":"25","hashOfConfig":"15"},{"size":8912,"mtime":1612616445439,"results":"26","hashOfConfig":"15"},{"size":611,"mtime":1612612132335,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"g1paqb",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/focusBoardSlice.js",[],["60","61"],"/home/pg07codes/Desktop/fokus/src/containers/App.js",[],["62","63"],"/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js",[],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js",["64","65","66","67"],"import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        taskArray: [],\n        meta: {\n            globalKey: 0,\n            completedTaskStartIndex: -1,\n        },\n    },\n    reducers: {\n        create: (tasks, { payload }) => {\n            tasks.taskArray.unshift(payload);\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\n        },\n        remove: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.filter((i) => {\n                if (i.id !== payload) return true;\n                else {\n                    if (!i.isCompleted) {\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\n                    }\n                    return false;\n                }\n            });\n        },\n        updateTask:(tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.map((i)=>i.id === payload.id?payload:i);\n        },\n        updateTaskContent: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.content = payload.updatedTaskContent;\n                }\n            });\n        },\n        updateOrder: (tasks, { payload }) => {\n            tasks.taskArray = payload;\n        },\n        // tick: ({ taskArray }, { payload }) => {\n        //     taskArray.forEach((i) => {\n        //         if (i.id === payload) {\n        //             i.remainingTime = i.remainingTime - 1;\n        //         }\n        //     });\n        // },\n        // reset: ({taskArray}, { payload }) => {\n        //     taskArray.forEach((i) => {\n        //         if (i.id === payload) {\n        //             i.remainingTime = i.time;\n        //             i.isRunning = false;\n        //         }\n        //     });\n        // },\n        // toggleIsRunning: ({ taskArray }, { payload }) => {\n        //     taskArray.forEach((i) => {\n        //         if (i.id === payload) {\n        //             i.isRunning = !i.isRunning;\n        //         }\n        //     });\n        // },\n        toggleIsCompleted: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.isCompleted = !i.isCompleted;\n                }\n            });\n        },\n        incrementGlobalKey: ({ meta }) => {\n            ++meta.globalKey;\n        },\n        rearrange: (tasks, { payload }) => {\n            let id = payload.id;\n\n            if (payload.markedAsComplete) {\n                if (tasks.meta.completedTaskStartIndex === -1) {\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                    let found = false;\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\n                        if(found){\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }else if(tasks.taskArray[i].id === id){\n                            found=true;\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }\n                    }\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                } else {\n                    let task, idx;\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n                    let pos = -1;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n                    \n                    if (pos === -1) {\n                        tasks.taskArray.push(task);\n                    } else {\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.meta.completedTaskStartIndex -=1;\n                }\n            } else {\n                if (tasks.meta.completedTaskStartIndex == 0) {\n\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.taskArray.unshift(task);\n                    tasks.meta.completedTaskStartIndex = 1;\n                } else {\n\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    let start = tasks.meta.completedTaskStartIndex - 1;\n                    let pos = -1;\n                    for (let i = start; i >= 0; i--) {\n                        if (tasks.taskArray[i].globalKey < task.globalKey ) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    if (pos === -1) {\n                        tasks.taskArray.unshift(task);\n                    } else {\n                        pos++;\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.meta.completedTaskStartIndex += 1;\n\n                }\n\n                if(tasks.meta.completedTaskStartIndex==tasks.taskArray.length){\n                    tasks.meta.completedTaskStartIndex=-1;\n                }\n            }\n        },\n    },\n});\n\nexport const { create, remove, updateTask, updateTaskContent, reset, toggleIsRunning, tick, toggleIsCompleted, updateOrder, incrementGlobalKey, rearrange } = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n","/home/pg07codes/Desktop/fokus/src/serviceWorker.js",[],["68","69"],"/home/pg07codes/Desktop/fokus/src/index.js",[],"/home/pg07codes/Desktop/fokus/src/helpers/index.js",["70","71"],"export function formattedTimeString(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}:${secs}`;\n}\n\n","/home/pg07codes/Desktop/fokus/src/store/index.js",[],["72","73"],"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js",[],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js",["74","75","76"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js",["77","78"],"/home/pg07codes/Desktop/fokus/src/components/customIcons/Globe.js",[],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"79","replacedBy":"83"},{"ruleId":"81","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":15,"column":52,"nodeType":"87","messageId":"88","endLine":15,"endColumn":54},{"ruleId":"85","severity":1,"message":"86","line":22,"column":64,"nodeType":"87","messageId":"88","endLine":22,"endColumn":66},{"ruleId":"85","severity":1,"message":"89","line":120,"column":56,"nodeType":"87","messageId":"88","endLine":120,"endColumn":58},{"ruleId":"85","severity":1,"message":"89","line":166,"column":54,"nodeType":"87","messageId":"88","endLine":166,"endColumn":56},{"ruleId":"79","replacedBy":"90"},{"ruleId":"81","replacedBy":"91"},{"ruleId":"85","severity":1,"message":"89","line":5,"column":14,"nodeType":"87","messageId":"88","endLine":5,"endColumn":16},{"ruleId":"85","severity":1,"message":"89","line":10,"column":14,"nodeType":"87","messageId":"88","endLine":10,"endColumn":16},{"ruleId":"79","replacedBy":"92"},{"ruleId":"81","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":1,"column":17,"nodeType":"96","messageId":"97","endLine":1,"endColumn":25},{"ruleId":"85","severity":1,"message":"86","line":42,"column":18,"nodeType":"87","messageId":"88","endLine":42,"endColumn":20},{"ruleId":"85","severity":1,"message":"89","line":50,"column":19,"nodeType":"87","messageId":"88","endLine":50,"endColumn":21},{"ruleId":"94","severity":1,"message":"98","line":2,"column":23,"nodeType":"96","messageId":"97","endLine":2,"endColumn":34},{"ruleId":"94","severity":1,"message":"99","line":163,"column":17,"nodeType":"96","messageId":"97","endLine":163,"endColumn":21},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],["100"],["101"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.",["100"],["101"],["100"],["101"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useSelector' is defined but never used.","'time' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]