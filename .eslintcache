[{"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/focusBoardSlice.js":"1","/home/pg07codes/Desktop/fokus/src/containers/focusBoard/index.js":"2","/home/pg07codes/Desktop/fokus/src/containers/App.js":"3","/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js":"4","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js":"5","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskCard.js":"6","/home/pg07codes/Desktop/fokus/src/serviceWorker.js":"7","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/index.js":"8","/home/pg07codes/Desktop/fokus/src/index.js":"9","/home/pg07codes/Desktop/fokus/src/helpers/index.js":"10","/home/pg07codes/Desktop/fokus/src/store/index.js":"11"},{"size":1183,"mtime":1612447980631,"results":"12","hashOfConfig":"13"},{"size":6072,"mtime":1612448014874,"results":"14","hashOfConfig":"13"},{"size":395,"mtime":1612199237429,"results":"15","hashOfConfig":"13"},{"size":528,"mtime":1611252515979,"results":"16","hashOfConfig":"13"},{"size":6824,"mtime":1612375820558,"results":"17","hashOfConfig":"13"},{"size":9875,"mtime":1612448392042,"results":"18","hashOfConfig":"13"},{"size":5141,"mtime":1608877484447,"results":"19","hashOfConfig":"13"},{"size":5011,"mtime":1612447527302,"results":"20","hashOfConfig":"13"},{"size":651,"mtime":1608902523877,"results":"21","hashOfConfig":"13"},{"size":340,"mtime":1612282841002,"results":"22","hashOfConfig":"13"},{"size":327,"mtime":1612199332055,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"g1paqb",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/focusBoardSlice.js",[],"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/index.js",[],"/home/pg07codes/Desktop/fokus/src/containers/App.js",[],["52","53"],"/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js",[],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js",["54","55","56","57"],"import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        taskArray: [],\n        meta: {\n            globalKey: 0,\n            completedTaskStartIndex: -1,\n        },\n    },\n    reducers: {\n        create: (tasks, { payload }) => {\n            tasks.taskArray.unshift(payload);\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\n        },\n        remove: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.filter((i) => {\n                if (i.id !== payload) return true;\n                else {\n                    if (!i.isCompleted) {\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\n                    }\n                    return false;\n                }\n            });\n        },\n        updateTask:(tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.map((i)=>i.id === payload.id?payload:i);\n        },\n        updateTaskContent: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.content = payload.updatedTaskContent;\n                }\n            });\n        },\n        updateOrder: (tasks, { payload }) => {\n            tasks.taskArray = payload;\n        },\n        // tick: ({ taskArray }, { payload }) => {\n        //     taskArray.forEach((i) => {\n        //         if (i.id === payload) {\n        //             i.remainingTime = i.remainingTime - 1;\n        //         }\n        //     });\n        // },\n        // reset: ({taskArray}, { payload }) => {\n        //     taskArray.forEach((i) => {\n        //         if (i.id === payload) {\n        //             i.remainingTime = i.time;\n        //             i.isRunning = false;\n        //         }\n        //     });\n        // },\n        // toggleIsRunning: ({ taskArray }, { payload }) => {\n        //     taskArray.forEach((i) => {\n        //         if (i.id === payload) {\n        //             i.isRunning = !i.isRunning;\n        //         }\n        //     });\n        // },\n        toggleIsCompleted: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.isCompleted = !i.isCompleted;\n                }\n            });\n        },\n        incrementGlobalKey: ({ meta }) => {\n            ++meta.globalKey;\n        },\n        rearrange: (tasks, { payload }) => {\n            let id = payload.id;\n\n            if (payload.markedAsComplete) {\n                if (tasks.meta.completedTaskStartIndex === -1) {\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                    let found = false;\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\n                        if(found){\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }else if(tasks.taskArray[i].id === id){\n                            found=true;\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }\n                    }\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                } else {\n                    let task, idx;\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n                    let pos = -1;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n                    \n                    if (pos === -1) {\n                        tasks.taskArray.push(task);\n                    } else {\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.meta.completedTaskStartIndex -=1;\n                }\n            } else {\n                if (tasks.meta.completedTaskStartIndex == 0) {\n\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.taskArray.unshift(task);\n                    tasks.meta.completedTaskStartIndex = 1;\n                } else {\n\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    let start = tasks.meta.completedTaskStartIndex - 1;\n                    let pos = -1;\n                    for (let i = start; i >= 0; i--) {\n                        if (tasks.taskArray[i].globalKey < task.globalKey ) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    if (pos === -1) {\n                        tasks.taskArray.unshift(task);\n                    } else {\n                        pos++;\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.meta.completedTaskStartIndex += 1;\n\n                }\n\n                if(tasks.meta.completedTaskStartIndex==tasks.taskArray.length){\n                    tasks.meta.completedTaskStartIndex=-1;\n                }\n            }\n        },\n    },\n});\n\nexport const { create, remove, updateTask, updateTaskContent, reset, toggleIsRunning, tick, toggleIsCompleted, updateOrder, incrementGlobalKey, rearrange } = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskCard.js",["58"],"import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { remove, updateTaskContent, toggleIsCompleted, rearrange } from \"./taskBoardSlice\";\nimport { focusOnTask , resetFocussedTask} from \"../focusBoard/focusBoardSlice\";\nimport styled from \"styled-components\";\nimport { AiOutlineClockCircle } from \"react-icons/ai\";\nimport { BsCheckCircle } from \"react-icons/bs\";\nimport { FiClock } from \"react-icons/fi\";\nimport { ImCancelCircle } from \"react-icons/im\";\nimport { Flipped } from \"react-flip-toolkit\";\nimport { GrDrag } from \"react-icons/gr\";\nimport { formattedTimeString } from \"./../../helpers\";\n\nconst TaskCardContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    width: 576px;\n    height: 140px;\n    margin: 25px;\n    /* background-color: #fff4e1; */\n`;\n\nconst TaskCardDragIcon = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    width: 30px;\n    height: 100%;\n    /* background-color: #ff09ac; */\n    svg {\n        cursor: url(\"https://ssl.gstatic.com/ui/v1/icons/mail/images/2/openhand.cur\"), default !important;\n        font-size: 2em;\n        opacity: 0.6;\n    }\n`;\n\nconst TaskCardDiv = styled.div`\n    display: flex;\n    justify-content: space-around;\n    flex-direction: row;\n    height: 100%;\n    width: 520px;\n    border-radius: 5px;\n    /* box-shadow: 0 4px 4px rgba(0, 0, 0, 0.2); */\n    -webkit-box-shadow: 0 0 6px rgba(0, 0, 0, 0.2);\n    box-shadow: 0 0 6px rgba(0, 0, 0, 0.2);\n    border: ${(props) => (props.isFocussed ? \"2px solid black\" : \"none\")};\n`;\n\nconst TaskDetailsDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    height: 100%;\n    width: 75%;\n    margin: 0 0 0 10px;\n    /* background-color: #fff1fc; */\n`;\n\nconst TaskContentDiv = styled.div`\n    display: flex;\n    align-items: center;\n    height: 65%;\n    margin: 0 0 0 5px;\n    border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n    word-wrap: break-word;\n    /* background-color: #fffcec; */\n    h3:hover {\n        cursor: text;\n    }\n`;\n\nconst TaskEditInput = styled.textarea`\n    resize: none;\n    height: 90%;\n    width: 100%;\n    font-size: 1.17em;\n    font-weight: bold;\n    overflow: hidden;\n    vertical-align: center;\n    &:focus {\n        outline: none;\n        border: 2px black dashed;\n        border-radius: 5px;\n    }\n`;\n\nconst TaskTimerDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 80%;\n    width: 15%;\n    /* background-color: #f8f8ff; */\n    position: relative;\n    p {\n        margin: 5px;\n        font-size: 1em;\n    }\n    svg {\n        font-size: 2.5em;\n        margin-top: 25px;\n    }\n`;\nconst TaskTimeDiv = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    height: 80%;\n    width: 110px;\n`;\nconst TaskTimeButton = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    width: 70px;\n    border-radius: 5px;\n    border: 1px solid black;\n    margin: 5px;\n    background-color: #fff;\n    color: #000;\n    p {\n        margin: 0;\n        font-size: 0.7em;\n    }\n`;\n\nconst TaskDoneButton = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 80%;\n    width: 70px;\n    border-radius: 5px;\n    border: 1px solid black;\n    margin: 5px;\n    cursor: pointer;\n    background-color: ${(props) => (props.isCompleted ? \"#000\" : \"#fff\")};\n    color: ${(props) => (props.isCompleted ? \"#fff\" : \"#000\")};\n    p {\n        margin: 0;\n        font-size: 0.7em;\n    }\n`;\n\nconst TaskDeleteButton = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    height: 80%;\n    width: 80px;\n    border-radius: 5px;\n    border: 1px solid black;\n    margin: 5px;\n    cursor: pointer;\n    background-color: #fff;\n    margin-left: auto;\n    color: #000;\n    p {\n        margin: 0;\n        font-size: 0.7em;\n    }\n    &:hover {\n        background-color: #000;\n        color: #fff;\n    }\n`;\n\nconst TaskControllerDiv = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    height: 25%;\n    /* background-color: #fffa91; */\n    svg {\n        font-size: 20px;\n        margin: 5px;\n    }\n`;\n\nfunction previewTask(str) {\n    if (str.length <= 70) return str;\n    else return str.substring(0, 70) + \"...\";\n}\n\nexport default function TaskCard({ task, forwardRBDProvided }) {\n    const dispatch = useDispatch();\n\n    const [taskUnderEdit, setTaskUnderEdit] = useState(false);\n    const [updatedTaskContent, setUpdatedTaskContent] = useState(task.content);\n    const [showDragIcon, setShowDragIcon] = useState(false);\n\n    const focussedTask = useSelector((state) => state.focusBoard.focussedTask);\n\n    function submitUpdatedTaskContent(e) {\n        if (e.key === \"Enter\" && updatedTaskContent.trim().length >= 3) {\n            let temp = updatedTaskContent.trim().split(\" \");\n            let time = 0;\n            if (temp.length !== 1 && !isNaN(parseInt(temp[temp.length - 1]))) {\n                time = parseInt(temp.pop());\n            }\n            temp = temp.join(\" \");\n            // manage to update time also\n            dispatch(updateTaskContent({ id: task.id, updatedTaskContent }));\n            setTaskUnderEdit(false);\n        }\n    }\n\n    function isFocussed(id) {\n        if (focussedTask !== null && focussedTask.id === id) return true;\n        return false;\n    }\n\n    return (\n        <Flipped flipId={`${task.id}`}>\n            <TaskCardContainer\n                ref={forwardRBDProvided.innerRef}\n                {...forwardRBDProvided.draggableProps}\n                {...forwardRBDProvided.dragHandleProps}\n                onMouseEnter={() => setShowDragIcon(!task.isCompleted && true)}\n                onMouseLeave={() => setShowDragIcon(!task.isCompleted && false)}\n            >\n                <TaskCardDragIcon>{showDragIcon && <GrDrag />}</TaskCardDragIcon>\n\n                <TaskCardDiv onClick={() => dispatch(focusOnTask(task))} isFocussed={isFocussed(task.id)}>\n                    <TaskTimerDiv>\n                        <FiClock />\n                        <p>{formattedTimeString(task.remainingTime)}</p>\n                    </TaskTimerDiv>\n\n                    <TaskDetailsDiv>\n                        <TaskContentDiv>\n                            {taskUnderEdit ? (\n                                <TaskEditInput\n                                    autoFocus\n                                    value={updatedTaskContent}\n                                    onBlur={() => {\n                                        dispatch(updateTaskContent({ id: task.id, updatedTaskContent }));\n                                        setTaskUnderEdit(false);\n                                    }}\n                                    onKeyDown={submitUpdatedTaskContent}\n                                    onChange={(e) => setUpdatedTaskContent(e.target.value)}\n                                />\n                            ) : (\n                                <h3 style={{ minWidth: 0 }} onDoubleClick={() => setTaskUnderEdit(true)}>\n                                    {previewTask(task.content)}\n                                </h3>\n                            )}\n                        </TaskContentDiv>\n\n                        <TaskControllerDiv>\n                            <TaskDoneButton\n                                isCompleted={task.isCompleted}\n                                onClick={\n                                    task.isCompleted\n                                        ? (e) => {\n                                              dispatch(toggleIsCompleted(task.id));\n                                              dispatch(rearrange({ id: task.id, markedAsComplete: false }));\n                                              dispatch(focusOnTask(task))\n                                              e.stopPropagation();\n                                          }\n                                        : (e) => {\n                                              dispatch(toggleIsCompleted(task.id));\n                                              dispatch(rearrange({ id: task.id, markedAsComplete: true }));\n                                              dispatch(focusOnTask(task))\n                                              e.stopPropagation();\n                                          }\n                                }\n                            >\n                                <BsCheckCircle />\n                                <p>Done</p>\n                            </TaskDoneButton>\n                            <TaskTimeDiv>\n                                <TaskTimeButton>\n                                    <AiOutlineClockCircle />\n                                    <p>{Math.round(task.time / 60) + \"m\"}</p>\n                                </TaskTimeButton>\n                            </TaskTimeDiv>\n\n                            <TaskDeleteButton\n                                onClick={(e) => {\n                                    dispatch(remove(task.id));\n                                    e.stopPropagation();\n                                    if(isFocussed(task.id)){\n                                        dispatch(resetFocussedTask());\n                                    }\n                                }}\n                            >\n                                <ImCancelCircle />\n                                <p>Delete</p>\n                            </TaskDeleteButton>\n                        </TaskControllerDiv>\n                    </TaskDetailsDiv>\n                </TaskCardDiv>\n            </TaskCardContainer>\n        </Flipped>\n    );\n}\n","/home/pg07codes/Desktop/fokus/src/serviceWorker.js",[],["59","60"],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/index.js",["61","62"],"/home/pg07codes/Desktop/fokus/src/index.js",[],"/home/pg07codes/Desktop/fokus/src/helpers/index.js",["63","64"],"export function formattedTimeString(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}:${secs}`;\n}\n\n","/home/pg07codes/Desktop/fokus/src/store/index.js",[],["65","66"],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":15,"column":52,"nodeType":"73","messageId":"74","endLine":15,"endColumn":54},{"ruleId":"71","severity":1,"message":"72","line":22,"column":64,"nodeType":"73","messageId":"74","endLine":22,"endColumn":66},{"ruleId":"71","severity":1,"message":"75","line":120,"column":56,"nodeType":"73","messageId":"74","endLine":120,"endColumn":58},{"ruleId":"71","severity":1,"message":"75","line":166,"column":54,"nodeType":"73","messageId":"74","endLine":166,"endColumn":56},{"ruleId":"76","severity":1,"message":"77","line":207,"column":17,"nodeType":"78","messageId":"79","endLine":207,"endColumn":21},{"ruleId":"67","replacedBy":"80"},{"ruleId":"69","replacedBy":"81"},{"ruleId":"71","severity":1,"message":"72","line":93,"column":18,"nodeType":"73","messageId":"74","endLine":93,"endColumn":20},{"ruleId":"71","severity":1,"message":"75","line":101,"column":19,"nodeType":"73","messageId":"74","endLine":101,"endColumn":21},{"ruleId":"71","severity":1,"message":"75","line":5,"column":14,"nodeType":"73","messageId":"74","endLine":5,"endColumn":16},{"ruleId":"71","severity":1,"message":"75","line":10,"column":14,"nodeType":"73","messageId":"74","endLine":10,"endColumn":16},{"ruleId":"67","replacedBy":"82"},{"ruleId":"69","replacedBy":"83"},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-unused-vars","'time' is assigned a value but never used.","Identifier","unusedVar",["84"],["85"],["84"],["85"],"no-global-assign","no-unsafe-negation"]