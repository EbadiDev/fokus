[{"/home/pg07codes/Desktop/fokus/src/containers/menu/Menu.js":"1","/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js":"2","/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js":"3","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js":"4","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js":"5","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js":"6","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js":"7","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/Divider.js":"8","/home/pg07codes/Desktop/fokus/src/index.js":"9","/home/pg07codes/Desktop/fokus/src/helpers/index.js":"10","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/FocussedTask.js":"11","/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js":"12","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyFocusBox.js":"13","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/TaskSummary.js":"14","/home/pg07codes/Desktop/fokus/src/containers/App.js":"15","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/NoTasks.js":"16","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyTaskSummary.js":"17"},{"size":328,"mtime":1612977328497,"results":"18","hashOfConfig":"19"},{"size":1866,"mtime":1613072311678,"results":"20","hashOfConfig":"19"},{"size":528,"mtime":1611252515979,"results":"21","hashOfConfig":"19"},{"size":11895,"mtime":1612980822655,"results":"22","hashOfConfig":"19"},{"size":8809,"mtime":1613052580642,"results":"23","hashOfConfig":"19"},{"size":6215,"mtime":1613071737031,"results":"24","hashOfConfig":"19"},{"size":4298,"mtime":1613063752917,"results":"25","hashOfConfig":"19"},{"size":2621,"mtime":1613070042728,"results":"26","hashOfConfig":"19"},{"size":651,"mtime":1608902523877,"results":"27","hashOfConfig":"19"},{"size":1129,"mtime":1613069072186,"results":"28","hashOfConfig":"19"},{"size":5950,"mtime":1613068982676,"results":"29","hashOfConfig":"19"},{"size":1009,"mtime":1613033460357,"results":"30","hashOfConfig":"19"},{"size":2990,"mtime":1613063915917,"results":"31","hashOfConfig":"19"},{"size":2563,"mtime":1613071971307,"results":"32","hashOfConfig":"19"},{"size":483,"mtime":1613049239140,"results":"33","hashOfConfig":"19"},{"size":1019,"mtime":1613071578902,"results":"34","hashOfConfig":"19"},{"size":1046,"mtime":1613072484728,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"g1paqb",{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pg07codes/Desktop/fokus/src/containers/menu/Menu.js",[],["74","75"],"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js",["76"],"/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js",["77"],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js",["78","79","80","81","82"],"import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        taskArray: [],\n        meta: {\n            globalKey: 0,\n            completedTaskStartIndex: -1,\n            focussedTaskIndex: -1,\n            showCompletedTasks: true,\n            completedTasksCount: 0,\n        },\n    },\n    reducers: {\n        create: (tasks, { payload }) => {\n            tasks.taskArray.unshift(payload);\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\n        },\n        remove: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.filter((i) => {\n                if (i.id !== payload) return true;\n                else {\n                    if (!i.isCompleted) {\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\n                    } else {\n                        tasks.meta.completedTasksCount--;\n                        if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length - 1) {\n                            tasks.meta.completedTaskStartIndex = -1;\n                        }\n                    }\n                    return false;\n                }\n            });\n        },\n        updateTask: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.map((i) => (i.id === payload.id ? payload : i));\n        },\n        updateTaskContent: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.content = payload.updatedTaskContent;\n                }\n            });\n        },\n        updateTaskTime: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.remainingTime = payload.updatedTime * 60;\n                    i.time = payload.updatedTime * 60;\n                }\n            });\n        },\n        updateTaskTimeByVal: (tasks, { payload }) => {\n            tasks.taskArray[payload.focussedTaskIndex].remainingTime += payload.val * 60;\n            tasks.taskArray[payload.focussedTaskIndex].time += payload.val * 60;\n            if (tasks.taskArray[payload.focussedTaskIndex].remainingTime < 0) {\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\n            }\n            if (tasks.taskArray[payload.focussedTaskIndex].time < 0) {\n                tasks.taskArray[payload.focussedTaskIndex].time = 0;\n            }\n        },\n        updateOrder: (tasks, { payload }) => {\n            tasks.taskArray = payload;\n        },\n\n        focusOnTask: (tasks, { payload }) => {\n            tasks.meta.focussedTaskIndex = payload;\n        },\n        resetFocussedTask: (tasks) => {\n            tasks.meta.focussedTaskIndex = -1;\n        },\n        tick: (tasks, { payload }) => {\n            --tasks.taskArray[payload].remainingTime;\n        },\n        resetTaskTimer: (tasks, { payload }) => {\n            tasks.taskArray[payload].isRunning = false;\n            tasks.taskArray[payload].remainingTime = tasks.taskArray[payload].time;\n        },\n        toggleIsRunning: (tasks, { payload }) => {\n            if (payload.val !== undefined) tasks.taskArray[payload.idx].isRunning = payload.val;\n            else tasks.taskArray[payload.idx].isRunning = !tasks.taskArray[payload.idx].isRunning;\n        },\n        toggleShowCompletedTasks: (tasks) => {\n            tasks.meta.showCompletedTasks = !tasks.meta.showCompletedTasks;\n        },\n        toggleIsCompleted: (tasks, { payload }) => {\n            tasks.taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.isCompleted ? --tasks.meta.completedTasksCount : ++tasks.meta.completedTasksCount;\n                    i.isCompleted = !i.isCompleted;\n                }\n            });\n        },\n        clearCompletedTasks: (tasks) => {\n            if (tasks.meta.completedTaskStartIndex !== -1) {\n                tasks.taskArray.length = tasks.meta.completedTaskStartIndex;\n                tasks.meta.completedTaskStartIndex = -1;\n                tasks.meta.completedTasksCount = 0;\n            }\n        },\n        incrementGlobalKey: ({ meta }) => {\n            ++meta.globalKey;\n        },\n        rearrange: (tasks, { payload }) => {\n            let id = payload.id;\n\n            if (payload.markedAsComplete) {\n                if (tasks.meta.completedTaskStartIndex === -1) {\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                    let found = false;\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\n                        if (found) {\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        } else if (tasks.taskArray[i].id === id) {\n                            found = true;\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }\n                    }\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                } else {\n                    let task, idx;\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n                    let pos = -1;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    if (pos === -1) {\n                        tasks.taskArray.push(task);\n                    } else {\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.meta.completedTaskStartIndex -= 1;\n                }\n            } else {\n                if (tasks.meta.completedTaskStartIndex == 0) {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.taskArray.unshift(task);\n                    tasks.meta.completedTaskStartIndex = 1;\n                } else {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    let start = tasks.meta.completedTaskStartIndex - 1;\n                    let pos = -1;\n                    for (let i = start; i >= 0; i--) {\n                        if (tasks.taskArray[i].globalKey < task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    if (pos === -1) {\n                        tasks.taskArray.unshift(task);\n                    } else {\n                        pos++;\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.meta.completedTaskStartIndex += 1;\n                }\n\n                if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length) {\n                    tasks.meta.completedTaskStartIndex = -1;\n                }\n            }\n        },\n    },\n});\n\nexport const {\n    create,\n    remove,\n    updateTask,\n    updateTaskContent,\n    updateTaskTime,\n    updateTaskTimeByVal,\n    focusOnTask,\n    resetFocussedTask,\n    tick,\n    resetTaskTimer,\n    toggleIsRunning,\n    toggleShowCompletedTasks,\n    toggleIsCompleted,\n    clearCompletedTasks,\n    updateOrder,\n    incrementGlobalKey,\n    rearrange,\n} = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js",["83","84","85"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/Divider.js",[],"/home/pg07codes/Desktop/fokus/src/index.js",[],"/home/pg07codes/Desktop/fokus/src/helpers/index.js",["86","87","88","89"],"export function formattedTimeString(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}:${secs}`;\n}\n\nexport function formattedTimeStringv2(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}m ${secs}s`;\n}\n\nexport function getFormattedDate() {\n    let d = new Date();\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    return {\n        day: days[d.getDay()],\n        month: months[d.getMonth()],\n        date: d.getDate(),\n        year: d.getFullYear(),\n    };\n}\n","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/FocussedTask.js",[],"/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js",[],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyFocusBox.js",[],["90","91"],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/TaskSummary.js",["92"],"/home/pg07codes/Desktop/fokus/src/containers/App.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/NoTasks.js",[],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyTaskSummary.js",[],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":2,"column":23,"nodeType":"99","messageId":"100","endLine":2,"endColumn":34},{"ruleId":"97","severity":1,"message":"101","line":184,"column":17,"nodeType":"99","messageId":"100","endLine":184,"endColumn":21},{"ruleId":"102","severity":1,"message":"103","line":18,"column":52,"nodeType":"104","messageId":"105","endLine":18,"endColumn":54},{"ruleId":"102","severity":1,"message":"103","line":25,"column":64,"nodeType":"104","messageId":"105","endLine":25,"endColumn":66},{"ruleId":"102","severity":1,"message":"106","line":28,"column":64,"nodeType":"104","messageId":"105","endLine":28,"endColumn":66},{"ruleId":"102","severity":1,"message":"106","line":153,"column":56,"nodeType":"104","messageId":"105","endLine":153,"endColumn":58},{"ruleId":"102","severity":1,"message":"106","line":196,"column":56,"nodeType":"104","messageId":"105","endLine":196,"endColumn":58},{"ruleId":"97","severity":1,"message":"107","line":1,"column":17,"nodeType":"99","messageId":"100","endLine":1,"endColumn":25},{"ruleId":"102","severity":1,"message":"103","line":39,"column":18,"nodeType":"104","messageId":"105","endLine":39,"endColumn":20},{"ruleId":"102","severity":1,"message":"106","line":47,"column":19,"nodeType":"104","messageId":"105","endLine":47,"endColumn":21},{"ruleId":"102","severity":1,"message":"106","line":5,"column":14,"nodeType":"104","messageId":"105","endLine":5,"endColumn":16},{"ruleId":"102","severity":1,"message":"106","line":10,"column":14,"nodeType":"104","messageId":"105","endLine":10,"endColumn":16},{"ruleId":"102","severity":1,"message":"106","line":23,"column":14,"nodeType":"104","messageId":"105","endLine":23,"endColumn":16},{"ruleId":"102","severity":1,"message":"106","line":28,"column":14,"nodeType":"104","messageId":"105","endLine":28,"endColumn":16},{"ruleId":"93","replacedBy":"108"},{"ruleId":"95","replacedBy":"109"},{"ruleId":"97","severity":1,"message":"98","line":2,"column":23,"nodeType":"99","messageId":"100","endLine":2,"endColumn":34},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","'temp' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'useState' is defined but never used.",["110"],["111"],"no-global-assign","no-unsafe-negation"]