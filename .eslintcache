[{"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/focusBoardSlice.js":"1","/home/pg07codes/Desktop/fokus/src/containers/App.js":"2","/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js":"3","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js":"4","/home/pg07codes/Desktop/fokus/src/serviceWorker.js":"5","/home/pg07codes/Desktop/fokus/src/index.js":"6","/home/pg07codes/Desktop/fokus/src/helpers/index.js":"7","/home/pg07codes/Desktop/fokus/src/store/index.js":"8","/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js":"9","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js":"10","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js":"11","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js":"12","/home/pg07codes/Desktop/fokus/src/components/customIcons/Globe.js":"13","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/Divider.js":"14"},{"size":1289,"mtime":1612683402029,"results":"15","hashOfConfig":"16"},{"size":395,"mtime":1612199237429,"results":"17","hashOfConfig":"16"},{"size":528,"mtime":1611252515979,"results":"18","hashOfConfig":"16"},{"size":7032,"mtime":1612679540911,"results":"19","hashOfConfig":"16"},{"size":5141,"mtime":1608877484447,"results":"20","hashOfConfig":"16"},{"size":651,"mtime":1608902523877,"results":"21","hashOfConfig":"16"},{"size":340,"mtime":1612282841002,"results":"22","hashOfConfig":"16"},{"size":327,"mtime":1612199332055,"results":"23","hashOfConfig":"16"},{"size":6368,"mtime":1612683362585,"results":"24","hashOfConfig":"16"},{"size":3848,"mtime":1612694582415,"results":"25","hashOfConfig":"16"},{"size":3706,"mtime":1612681363200,"results":"26","hashOfConfig":"16"},{"size":9084,"mtime":1612695566838,"results":"27","hashOfConfig":"16"},{"size":576,"mtime":1612677540821,"results":"28","hashOfConfig":"16"},{"size":841,"mtime":1612678489978,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"g1paqb",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/focusBoardSlice.js",[],"/home/pg07codes/Desktop/fokus/src/containers/App.js",[],["64","65"],"/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js",[],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js",["66","67","68","69","70"],"import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        taskArray: [],\n        meta: {\n            globalKey: 0,\n            completedTaskStartIndex: -1,\n        },\n    },\n    reducers: {\n        create: (tasks, { payload }) => {\n            tasks.taskArray.unshift(payload);\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\n        },\n        remove: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.filter((i) => {\n                if (i.id !== payload) return true;\n                else {\n                    if (!i.isCompleted) {\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\n                    } else if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length - 1) {\n                        tasks.meta.completedTaskStartIndex = -1;\n                    }\n                    return false;\n                }\n            });\n        },\n        updateTask: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.map((i) => (i.id === payload.id ? payload : i));\n        },\n        updateTaskContent: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.content = payload.updatedTaskContent;\n                }\n            });\n        },\n        updateOrder: (tasks, { payload }) => {\n            tasks.taskArray = payload;\n        },\n        // tick: ({ taskArray }, { payload }) => {\n        //     taskArray.forEach((i) => {\n        //         if (i.id === payload) {\n        //             i.remainingTime = i.remainingTime - 1;\n        //         }\n        //     });\n        // },\n        // reset: ({taskArray}, { payload }) => {\n        //     taskArray.forEach((i) => {\n        //         if (i.id === payload) {\n        //             i.remainingTime = i.time;\n        //             i.isRunning = false;\n        //         }\n        //     });\n        // },\n        // toggleIsRunning: ({ taskArray }, { payload }) => {\n        //     taskArray.forEach((i) => {\n        //         if (i.id === payload) {\n        //             i.isRunning = !i.isRunning;\n        //         }\n        //     });\n        // },\n        toggleIsCompleted: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.isCompleted = !i.isCompleted;\n                }\n            });\n        },\n        incrementGlobalKey: ({ meta }) => {\n            ++meta.globalKey;\n        },\n        rearrange: (tasks, { payload }) => {\n            let id = payload.id;\n\n            if (payload.markedAsComplete) {\n                if (tasks.meta.completedTaskStartIndex === -1) {\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                    let found = false;\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\n                        if (found) {\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        } else if (tasks.taskArray[i].id === id) {\n                            found = true;\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }\n                    }\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                } else {\n                    let task, idx;\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n                    let pos = -1;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    if (pos === -1) {\n                        tasks.taskArray.push(task);\n                    } else {\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.meta.completedTaskStartIndex -= 1;\n                }\n            } else {\n                if (tasks.meta.completedTaskStartIndex == 0) {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.taskArray.unshift(task);\n                    tasks.meta.completedTaskStartIndex = 1;\n                } else {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    let start = tasks.meta.completedTaskStartIndex - 1;\n                    let pos = -1;\n                    for (let i = start; i >= 0; i--) {\n                        if (tasks.taskArray[i].globalKey < task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    if (pos === -1) {\n                        tasks.taskArray.unshift(task);\n                    } else {\n                        pos++;\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.meta.completedTaskStartIndex += 1;\n                }\n\n                if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length) {\n                    tasks.meta.completedTaskStartIndex = -1;\n                }\n            }\n        },\n    },\n});\n\nexport const {\n    create,\n    remove,\n    updateTask,\n    updateTaskContent,\n    reset,\n    toggleIsRunning,\n    tick,\n    toggleIsCompleted,\n    updateOrder,\n    incrementGlobalKey,\n    rearrange,\n} = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n","/home/pg07codes/Desktop/fokus/src/serviceWorker.js",[],["71","72"],"/home/pg07codes/Desktop/fokus/src/index.js",[],["73","74"],"/home/pg07codes/Desktop/fokus/src/helpers/index.js",["75","76"],"export function formattedTimeString(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}:${secs}`;\n}\n\n","/home/pg07codes/Desktop/fokus/src/store/index.js",[],["77","78"],"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js",[],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js",["79","80","81"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js",["82","83","84","85"],"/home/pg07codes/Desktop/fokus/src/components/customIcons/Globe.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/Divider.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":15,"column":52,"nodeType":"92","messageId":"93","endLine":15,"endColumn":54},{"ruleId":"90","severity":1,"message":"91","line":22,"column":64,"nodeType":"92","messageId":"93","endLine":22,"endColumn":66},{"ruleId":"90","severity":1,"message":"94","line":23,"column":67,"nodeType":"92","messageId":"93","endLine":23,"endColumn":69},{"ruleId":"90","severity":1,"message":"94","line":122,"column":56,"nodeType":"92","messageId":"93","endLine":122,"endColumn":58},{"ruleId":"90","severity":1,"message":"94","line":165,"column":56,"nodeType":"92","messageId":"93","endLine":165,"endColumn":58},{"ruleId":"86","replacedBy":"95"},{"ruleId":"88","replacedBy":"96"},{"ruleId":"86","replacedBy":"97"},{"ruleId":"88","replacedBy":"98"},{"ruleId":"90","severity":1,"message":"94","line":5,"column":14,"nodeType":"92","messageId":"93","endLine":5,"endColumn":16},{"ruleId":"90","severity":1,"message":"94","line":10,"column":14,"nodeType":"92","messageId":"93","endLine":10,"endColumn":16},{"ruleId":"86","replacedBy":"99"},{"ruleId":"88","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":1,"column":17,"nodeType":"103","messageId":"104","endLine":1,"endColumn":25},{"ruleId":"90","severity":1,"message":"91","line":37,"column":18,"nodeType":"92","messageId":"93","endLine":37,"endColumn":20},{"ruleId":"90","severity":1,"message":"94","line":45,"column":19,"nodeType":"92","messageId":"93","endLine":45,"endColumn":21},{"ruleId":"101","severity":1,"message":"105","line":2,"column":23,"nodeType":"103","messageId":"104","endLine":2,"endColumn":34},{"ruleId":"101","severity":1,"message":"106","line":3,"column":67,"nodeType":"103","messageId":"104","endLine":3,"endColumn":77},{"ruleId":"101","severity":1,"message":"107","line":4,"column":43,"nodeType":"103","messageId":"104","endLine":4,"endColumn":58},{"ruleId":"101","severity":1,"message":"108","line":162,"column":17,"nodeType":"103","messageId":"104","endLine":162,"endColumn":21},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.",["109"],["110"],["109"],["110"],["109"],["110"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useSelector' is defined but never used.","'updateTask' is defined but never used.","'toggleIsRunning' is defined but never used.","'time' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]