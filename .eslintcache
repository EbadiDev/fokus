[{"/home/pg07codes/Desktop/fokus/src/containers/App.js":"1","/home/pg07codes/Desktop/fokus/src/containers/menu/Menu.js":"2","/home/pg07codes/Desktop/fokus/src/containers/settings/index.js":"3","/home/pg07codes/Desktop/fokus/src/serviceWorker.js":"4","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js":"5","/home/pg07codes/Desktop/fokus/src/containers/miscBoard/MiscBoard.js":"6","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/LabelPie.js":"7","/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js":"8","/home/pg07codes/Desktop/fokus/src/index.js":"9","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/ProgressRings.js":"10","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/FocussedTask.js":"11","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyFocusBox.js":"12","/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js":"13","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/EmptyLabelPie.js":"14","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TaskProgressCard.js":"15","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TimeProgressCard.js":"16","/home/pg07codes/Desktop/fokus/src/containers/dashboard/DashboardHero.js":"17","/home/pg07codes/Desktop/fokus/src/helpers/quotes.js":"18","/home/pg07codes/Desktop/fokus/src/containers/dashboard/index.js":"19","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js":"20"},{"size":1290,"mtime":1614433188829,"results":"21","hashOfConfig":"22"},{"size":2516,"mtime":1614503246529,"results":"23","hashOfConfig":"22"},{"size":256,"mtime":1614433410903,"results":"24","hashOfConfig":"22"},{"size":5141,"mtime":1608877484447,"results":"25","hashOfConfig":"22"},{"size":6163,"mtime":1614412189636,"results":"26","hashOfConfig":"22"},{"size":4288,"mtime":1614516309619,"results":"27","hashOfConfig":"22"},{"size":2820,"mtime":1614507072343,"results":"28","hashOfConfig":"22"},{"size":1839,"mtime":1613636104237,"results":"29","hashOfConfig":"22"},{"size":651,"mtime":1613628682348,"results":"30","hashOfConfig":"22"},{"size":4187,"mtime":1614504333819,"results":"31","hashOfConfig":"22"},{"size":8209,"mtime":1614504139438,"results":"32","hashOfConfig":"22"},{"size":3996,"mtime":1614504207065,"results":"33","hashOfConfig":"22"},{"size":1871,"mtime":1614503856315,"results":"34","hashOfConfig":"22"},{"size":623,"mtime":1614507257223,"results":"35","hashOfConfig":"22"},{"size":2082,"mtime":1614504607429,"results":"36","hashOfConfig":"22"},{"size":3068,"mtime":1614504593192,"results":"37","hashOfConfig":"22"},{"size":676,"mtime":1614504814243,"results":"38","hashOfConfig":"22"},{"size":28084,"mtime":1614516492661,"results":"39","hashOfConfig":"22"},{"size":628,"mtime":1614412411656,"results":"40","hashOfConfig":"22"},{"size":12841,"mtime":1614063295130,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},"g1paqb",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/pg07codes/Desktop/fokus/src/containers/App.js",["88"],"import React from \"react\";\r\nimport { Menu } from \"./menu/Menu\";\r\nimport Dashboard from \"./dashboard\";\r\nimport { TaskBoard } from \"./taskBoard/TaskBoard\";\r\nimport styled from \"styled-components\";\r\nimport { isMobile } from \"react-device-detect\";\r\nimport { MobileView } from \"./mobileView\";\r\nimport Settings from \"./settings\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nconst AppContainer = styled.div`\r\n    display: flex;\r\n    height: 100%;\r\n`;\r\n\r\nfunction App() {\r\n    if (!isMobile)\r\n        return (\r\n            <AppContainer>\r\n                \r\n                <Router>\r\n                <Menu />\r\n                    <Switch>\r\n                        <Route path=\"/settings\">\r\n                            <Settings />\r\n                        </Route>\r\n                        <Route path=\"/\">\r\n                            <>\r\n                                <Dashboard />\r\n                                <TaskBoard />\r\n                            </>\r\n                        </Route>\r\n                    </Switch>\r\n                </Router>\r\n            </AppContainer>\r\n        );\r\n    else {\r\n        return (\r\n            <AppContainer>\r\n                <MobileView />\r\n            </AppContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","/home/pg07codes/Desktop/fokus/src/containers/menu/Menu.js",[],"/home/pg07codes/Desktop/fokus/src/containers/settings/index.js",[],"/home/pg07codes/Desktop/fokus/src/serviceWorker.js",[],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js",["89","90","91"],"import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateOrder } from \"./taskBoardSlice\";\nimport TaskCard from \"./../../components/TaskBoard/TaskCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Flipper } from \"react-flip-toolkit\";\nimport { focusOnTask } from \"./taskBoardSlice\";\nimport styled from \"styled-components\";\nimport TaskInput from \"./../../components/TaskBoard/TaskInput\";\nimport Divider from \"./../../components/TaskBoard/Divider\";\nimport NoTasks from \"../../components/TaskBoard/NoTasks\";\n\nconst TaskBoardContainer = styled.div`\n    flex: 1 1 0;\n    display: flex;\n    min-width:396px;\n    flex-direction: column;\n    align-items: center;\n    overflow-y:scroll; // to enable scrolling by default for this flex-container only\n`;\n\nexport function TaskBoard() {\n    const tasks = useSelector((state) => state.tasks.taskArray);\n    const meta = useSelector((state) => state.tasks.meta);\n    let focussedTask = meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex] : null;\n    const dispatch = useDispatch();\n\n    function handleOnDragEnd(result) {\n        if (!result.destination) return;\n\n        let items = [...tasks.map((i) => ({ ...i }))];\n        const [reorderedItem] = items.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorderedItem);\n\n        let i = result.source.index;\n        let direction = result.destination.index > result.source.index; // direction true means moving right & swapping\n        // below is logic to reset globalKeys to maintain correct sort order.\n        while (i != result.destination.index) {\n            if (direction) {\n                items[i].globalKey = tasks[i].globalKey;\n                i++;\n            } else {\n                items[i].globalKey = tasks[i].globalKey;\n                i--;\n            }\n            if (i == result.destination.index) {\n                items[i].globalKey = tasks[i].globalKey;\n            }\n        }\n\n        if (meta.focussedTaskIndex !== -1) {\n            let greaterIndex = Math.max(result.destination.index, result.source.index);\n            let smallerIndex = Math.min(result.destination.index, result.source.index);\n\n            if (result.source.index === meta.focussedTaskIndex) {\n                dispatch(focusOnTask(result.destination.index));\n            } else if (meta.focussedTaskIndex >= smallerIndex && meta.focussedTaskIndex <= greaterIndex) {\n                if (result.destination.index > result.source.index) {\n                    dispatch(focusOnTask(meta.focussedTaskIndex - 1)); // -1\n                } else {\n                    dispatch(focusOnTask(meta.focussedTaskIndex + 1)); // +1\n                }\n            }\n        }\n\n        dispatch(updateOrder(items)); // order is imp. focus then updateOrder\n    }\n\n    function getFlipKey() {\n        let flipKey = \"\";\n        tasks.forEach((i) => {\n            flipKey += `${i.globalKey}`;\n        });\n        flipKey += `${meta.completedTaskStartIndex}`;\n        return flipKey;\n    }\n\n    function isFocussed(id) {\n        if (focussedTask !== null && focussedTask.id === id) return true;\n        return false;\n    }\n\n    // input has both onChange and onKeyDown - can be optimised by using one and combining\n\n    return (\n        <TaskBoardContainer>\n            <TaskInput focussedTaskIndex={meta.focussedTaskIndex} />\n            {tasks.length === 0 ? <NoTasks /> : tasks.length === meta.completedTasksCount && <NoTasks allCompleted={true} />}\n            <Flipper flipKey={getFlipKey()}>\n                <DragDropContext onDragEnd={handleOnDragEnd}>\n                    <Droppable droppableId=\"dropArea\">\n                        {(provided) => (\n                            <div {...provided.droppableProps} ref={provided.innerRef}>\n                                {tasks.map((i, index) =>\n                                    !i.isCompleted ? (\n                                        <Draggable isDragDisabled={i.isCompleted} key={i.id} draggableId={`${i.id}`} index={index}>\n                                            {(provided2) => (\n                                                <TaskCard\n                                                    focussedTaskIndex={meta.focussedTaskIndex}\n                                                    focussedTaskGlobalKey={meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1}\n                                                    taskIndex={index}\n                                                    forwardRBDProvided={provided2}\n                                                    task={i}\n                                                    isFocussed={isFocussed(i.id)}\n                                                />\n                                            )}\n                                        </Draggable>\n                                    ) : (\n                                        \"\"\n                                    )\n                                )}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n\n                {meta.completedTaskStartIndex !== -1 && <Divider />}\n\n                {meta.showCompletedTasks &&\n                    tasks.map((i, index) =>\n                        i.isCompleted ? (\n                            <TaskCard\n                                focussedTaskIndex={meta.focussedTaskIndex}\n                                focussedTaskGlobalKey={meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1}\n                                taskIndex={index}\n                                key={i.id}\n                                forwardRBDProvided={{ innerRef: null }}\n                                task={i}\n                                isFocussed={isFocussed(i.id)}\n                            />\n                        ) : (\n                            \"\"\n                        )\n                    )}\n            </Flipper>\n        </TaskBoardContainer>\n    );\n}\n",["92","93"],"/home/pg07codes/Desktop/fokus/src/containers/miscBoard/MiscBoard.js",["94","95"],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/LabelPie.js",[],"/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js",[],"/home/pg07codes/Desktop/fokus/src/index.js",[],["96","97"],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/ProgressRings.js",[],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/FocussedTask.js",["98"],"import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { toggleIsRunning, tick, updateTaskTimeByVal, resetTaskTimer, toggleSoundscapeState } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport useTimer , {useTimer2}from \"../../hooks/useTimer\";\nimport { CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { ResetIcon } from \"./../../components/customIcons\";\nimport dingSound from \"./../../sounds/ding.mp3\";\nimport { BsFillPauseFill, BsFillPlayFill } from \"react-icons/bs\";\nimport { formattedTimeStringv2} from \"./../../helpers\";\n\nlet dingSoundElement = new Audio(dingSound);\n\nconst FocussedTaskDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    position: relative;\n    background-color:#FABB18;\n    width: 100%;\n    height:100%;\n    border-radius:20px;\n`;\n\nconst FocussedTaskPlayer = styled.div`\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    width: 100%;\n    height: 55%;\n    /* background-color: red; */\n`;\n\nconst FocussedTaskContent = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    text-align: center;\n    padding: 5px;\n    height: 30%;\n    width: 90%;\n    max-width: 376px;\n    border-radius: 10px;\n    border:3px solid black;\n    word-wrap: break-word;\n    text-shadow:0 0 4px rgb(248,185,23,0.4);\n    p {\n        min-width: 0;\n        font-weight: bold;\n        margin: 3px;\n    }\n    /* -webkit-box-shadow: 0 1px 8px rgb(248, 185, 23, 0.8);\n    box-shadow: 0 1px 8px rgb(248, 185, 23, 0.8); */\n    background-color: #fff;\n`;\n\n\nconst FocussedTaskTimer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 80%;\n    width: 50%;\n    /* background-color: #df1aa1; */\n`;\n\nconst CountdownTimerDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 85%;\n    height: 85%;\n    background-color: #fff;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    border-radius: 50%;\n    p {\n        margin: 0;\n        font-weight: bold;\n        color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#000\")};\n    }\n    span {\n        margin: 0 2px;\n        color: #4a4b46;\n        font-size: 0.8em;\n        font-weight: bold;\n    }\n`;\n\nconst FocussedTaskController = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n    height: 90%;\n    width: 30%;\n    /* background-color: #f1f7dd; */\n`;\n\nconst PlayPauseButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 40px;\n    height: 40px;\n    background-color: #000;\n    border-radius: 50%;\n    margin: 10px 20px;\n    svg {\n        color: #FABB18;\n        font-size: 1.5em;\n        margin-left: ${(p) => (p.isPlayBtn ? \"3px\" : \"0\")};\n    }\n    cursor: pointer;\n`;\n\nconst UpdateTimeButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 30px;\n    height: 30px;\n    cursor: pointer;\n`;\n\nconst ResetButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    background-color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#0000cd\")};\n    border-radius: 50%;\n    width: 30px;\n    height: 30px;\n    top: 7px;\n    left: 7px;\n    background-color: #000;\n    cursor: ${(p) => (p.isDisabled ? \"default\" : \"pointer\")};\n    svg {\n        color: #FABB18;\n        width: 20px;\n    }\n`;\n\nexport function FocussedTask() {\n    const focussedTaskIndex = useSelector((state) => state.tasks.meta.focussedTaskIndex);\n    let focussedTask = useSelector((state) => (focussedTaskIndex !== -1 ? state.tasks.taskArray[focussedTaskIndex] : null));\n    const dispatch = useDispatch();\n    const delay = 1010; // to account for the delay in executing code.\n    // useTimer(\n    //     () => {\n    //         if (focussedTask === null) return;\n    //         else if (focussedTask.remainingTime > 0) {\n    //             dispatch(tick(focussedTaskIndex));\n    //         } else if (focussedTask.remainingTime === 0) {\n    //             dispatch(toggleSoundscapeState(false));\n    //             dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n    //             dingSoundElement.play();\n    //         }\n    //     },\n    //     focussedTask !== null && focussedTask.isRunning ? delay : null\n    // );\n    useTimer2(\n        (deltaMS) => {\n            if (focussedTask === null) return;\n            else if (focussedTask.remainingTime > 0) {\n                dispatch(tick({focussedTaskIndex,deltaMS}));\n            } else if (focussedTask.remainingTime === 0) {\n                dispatch(toggleSoundscapeState(false));\n                dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n                dingSoundElement.play();\n            }\n        },\n        focussedTask !== null && focussedTask.isRunning ? delay : null\n    );\n\n    function updateTaskTimeHandler(val) {\n        if (focussedTask.isCompleted) return;\n        if (focussedTask.isRunning) dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n        dispatch(updateTaskTimeByVal({ focussedTaskIndex, val }));\n        dispatch(toggleSoundscapeState(false));\n    }\n\n    function playPauseHandler(focussedTaskIndex, wasTaskRunning) {\n        dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n        if (wasTaskRunning) {\n            dispatch(toggleSoundscapeState(false));\n        } else {\n            dispatch(toggleSoundscapeState(true));\n        }\n    }\n\n    const countdownObj = formattedTimeStringv2(focussedTask.remainingTime);\n    let countdownMins = countdownObj.mins;\n    let countdownSecs = countdownObj.secs;\n\n    return (\n        <FocussedTaskDiv>\n\n            <FocussedTaskPlayer>\n                <FocussedTaskTimer>\n                    <div style={{ width: 110, height: 110 }}>\n                        <CircularProgressbarWithChildren\n                            value={focussedTask.time !== 0 ? Math.floor((focussedTask.remainingTime / focussedTask.time) * 100) : 0}\n                            styles={buildStyles({\n                                strokeLinecap: \"butt\",\n                                pathColor: \"#020202\",\n                                trailColor: \"#F0F8FF\",\n                            })}\n                            strokeWidth={8}\n                        >\n                            <CountdownTimerDiv>\n                                <p>{countdownMins}</p>\n                                <span>m</span>\n                                <p>{countdownSecs}</p>\n                                <span>s</span>\n                            </CountdownTimerDiv>\n                        </CircularProgressbarWithChildren>\n                    </div>\n                </FocussedTaskTimer>\n\n                <FocussedTaskController>\n                    <UpdateTimeButtonDiv onClick={() => updateTaskTimeHandler(5)}>\n                        <h4>+5</h4>\n                    </UpdateTimeButtonDiv>\n                    <PlayPauseButtonDiv isPlayBtn={!focussedTask.isRunning} onClick={() => playPauseHandler(focussedTaskIndex, focussedTask.isRunning)}>\n                        {focussedTask.isRunning ? <BsFillPauseFill /> : <BsFillPlayFill />}\n                    </PlayPauseButtonDiv>\n\n                    <UpdateTimeButtonDiv onClick={() => updateTaskTimeHandler(-5)}>\n                        <h4>-5</h4>\n                    </UpdateTimeButtonDiv>\n                </FocussedTaskController>\n\n                <ResetButtonDiv\n                    onClick={() => {\n                        dispatch(toggleSoundscapeState(false));\n                        dispatch(resetTaskTimer(focussedTaskIndex));\n                    }}\n                >\n                    <ResetIcon />\n                </ResetButtonDiv>\n            </FocussedTaskPlayer>\n            <FocussedTaskContent>\n                <p>{focussedTask.content}</p>\n            </FocussedTaskContent>\n        </FocussedTaskDiv>\n    );\n}\n",["99","100"],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyFocusBox.js",[],"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js",["101","102","103"],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/EmptyLabelPie.js",["104"],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TaskProgressCard.js",[],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TimeProgressCard.js",[],"/home/pg07codes/Desktop/fokus/src/containers/dashboard/DashboardHero.js",[],"/home/pg07codes/Desktop/fokus/src/helpers/quotes.js",[],"/home/pg07codes/Desktop/fokus/src/containers/dashboard/index.js",[],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js",["105","106","107","108","109"],{"ruleId":"110","severity":1,"message":"111","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":14},{"ruleId":"110","severity":1,"message":"114","line":1,"column":17,"nodeType":"112","messageId":"113","endLine":1,"endColumn":25},{"ruleId":"115","severity":1,"message":"116","line":38,"column":18,"nodeType":"117","messageId":"118","endLine":38,"endColumn":20},{"ruleId":"115","severity":1,"message":"119","line":46,"column":19,"nodeType":"117","messageId":"118","endLine":46,"endColumn":21},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"110","severity":1,"message":"124","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":21},{"ruleId":"110","severity":1,"message":"125","line":2,"column":23,"nodeType":"112","messageId":"113","endLine":2,"endColumn":34},{"ruleId":"120","replacedBy":"126"},{"ruleId":"122","replacedBy":"127"},{"ruleId":"110","severity":1,"message":"128","line":5,"column":8,"nodeType":"112","messageId":"113","endLine":5,"endColumn":16},{"ruleId":"120","replacedBy":"129"},{"ruleId":"122","replacedBy":"130"},{"ruleId":"110","severity":1,"message":"125","line":2,"column":23,"nodeType":"112","messageId":"113","endLine":2,"endColumn":34},{"ruleId":"110","severity":1,"message":"131","line":8,"column":10,"nodeType":"112","messageId":"113","endLine":8,"endColumn":17},{"ruleId":"110","severity":1,"message":"132","line":48,"column":11,"nodeType":"112","messageId":"113","endLine":48,"endColumn":26},{"ruleId":"110","severity":1,"message":"114","line":1,"column":17,"nodeType":"112","messageId":"113","endLine":1,"endColumn":25},{"ruleId":"115","severity":1,"message":"116","line":54,"column":52,"nodeType":"117","messageId":"118","endLine":54,"endColumn":54},{"ruleId":"115","severity":1,"message":"116","line":61,"column":64,"nodeType":"117","messageId":"118","endLine":61,"endColumn":66},{"ruleId":"115","severity":1,"message":"119","line":64,"column":64,"nodeType":"117","messageId":"118","endLine":64,"endColumn":66},{"ruleId":"115","severity":1,"message":"119","line":241,"column":56,"nodeType":"117","messageId":"118","endLine":241,"endColumn":58},{"ruleId":"115","severity":1,"message":"119","line":284,"column":56,"nodeType":"117","messageId":"118","endLine":284,"endColumn":58},"no-unused-vars","'Menu' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-native-reassign",["133"],"no-negated-in-lhs",["134"],"'useSelector' is defined but never used.","'useDispatch' is defined but never used.",["133"],["134"],"'useTimer' is defined but never used.",["133"],["134"],"'DayDate' is defined but never used.","'totalTasksCount' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]