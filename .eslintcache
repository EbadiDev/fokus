[{"/home/pg07codes/Desktop/fokus/src/containers/tasks/TaskCard.js":"1","/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js":"2","/home/pg07codes/Desktop/fokus/src/containers/tasks/index.js":"3","/home/pg07codes/Desktop/fokus/src/containers/App.js":"4","/home/pg07codes/Desktop/fokus/src/containers/tasks/tasksSlice.js":"5","/home/pg07codes/Desktop/fokus/src/serviceWorker.js":"6","/home/pg07codes/Desktop/fokus/src/containers/counter/counterSlice.js":"7","/home/pg07codes/Desktop/fokus/src/index.js":"8","/home/pg07codes/Desktop/fokus/src/store/index.js":"9"},{"size":4936,"mtime":1611915603116,"results":"10","hashOfConfig":"11"},{"size":528,"mtime":1611252515979,"results":"12","hashOfConfig":"11"},{"size":3711,"mtime":1611932158596,"results":"13","hashOfConfig":"11"},{"size":166,"mtime":1608966107231,"results":"14","hashOfConfig":"11"},{"size":6572,"mtime":1611929270840,"results":"15","hashOfConfig":"11"},{"size":5141,"mtime":1608877484447,"results":"16","hashOfConfig":"11"},{"size":1552,"mtime":1608881410941,"results":"17","hashOfConfig":"11"},{"size":651,"mtime":1608902523877,"results":"18","hashOfConfig":"11"},{"size":307,"mtime":1611907004672,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"g1paqb",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pg07codes/Desktop/fokus/src/containers/tasks/TaskCard.js",["42","43"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { remove, update, tick, reset, toggleIsRunning, toggleIsCompleted, rearrange } from \"./tasksSlice\";\nimport useTimer from \"../../hooks/useTimer\";\nimport styled from \"styled-components\";\nimport { AiFillPlayCircle, AiFillPauseCircle, AiFillCheckCircle, AiOutlineCheckCircle, AiFillClockCircle } from \"react-icons/ai\";\nimport { TiDelete } from \"react-icons/ti\";\nimport { GrPowerReset } from \"react-icons/gr\";\nimport { Flipped } from \"react-flip-toolkit\";\n\nfunction formattedTimeString(x) {\n    let seconds = x % 60;\n    let minutes = Math.floor(x / 60);\n\n    if (seconds == 0) {\n        seconds = `00`;\n    } else if (seconds < 10) {\n        seconds = `0${seconds}`;\n    }\n    if (minutes == 0) {\n        minutes = `00`;\n    } else if (minutes < 10) {\n        minutes = `0${minutes}`;\n    }\n\n    return `${minutes}:${seconds}`;\n}\n\nconst TaskCardDiv = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-direction: row;\n    height: 120px;\n    width: 476px;\n    border-radius: 10px;\n    box-shadow: 0 4px 4px rgba(0, 0, 0, 0.2);\n    background: #f8f8ff;\n    margin: 10px;\n`;\n\nconst TaskDetailsDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n    height: 100px;\n    width: 280px;\n    margin: 0 0 0 10px;\n    border-radius: 20px;\n    h3,\n    p {\n        margin: 2px;\n        padding: 0;\n    }\n    p {\n        font-size: 0.6rem;\n        font-style: italic;\n        color: grey;\n    }\n`;\n\nconst TaskTimerDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100px;\n    width: 100px;\n    border-radius: 10px;\n    background-color: #eeeeff;\n    position: relative;\n`;\n\nconst TaskControllerDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    height: 120px;\n    width: 40px;\n    border-radius: 0 10px 10px 0;\n`;\n\nexport default function TaskCard({task , forwardRBDProvided}) {\n    const delay = 1000;\n    const dispatch = useDispatch();\n    useTimer(\n        () => {\n            if (task.remainingTime > 0) {\n                dispatch(tick(task.id));\n            } else if (task.remainingTime === 0) {\n                dispatch(toggleIsRunning(task.id));\n            }\n        },\n        task.isRunning ? delay : null\n    );\n\n    const [taskEdit, setTaskEdit] = useState(false);\n    const [updatedTask, setUpdatedTask] = useState(task.content);\n\n    return (\n        <Flipped flipId={`${task.id}`}>\n            <TaskCardDiv  ref={forwardRBDProvided.innerRef} {...forwardRBDProvided.draggableProps} {...forwardRBDProvided.dragHandleProps}>\n                <TaskDetailsDiv>\n                    <p>\n                        <AiFillClockCircle />\n                        {Math.round(task.time / 60) + \"min\"}\n                    </p>\n                    {taskEdit ? (\n                        <input\n                            value={updatedTask}\n                            onBlur={() => {\n                                dispatch(update({ id: task.id, updatedTask }));\n                                setTaskEdit(false);\n                            }}\n                            onChange={(e) => setUpdatedTask(e.target.value)}\n                        />\n                    ) : (\n                        <h3 onDoubleClick={() => setTaskEdit(true)}>{task.globalKey+\": \"+task.content}</h3>\n                    )}\n\n                    <p>{`created at: ${new Date(task.createdAt).getHours()}:${new Date(task.createdAt).getMinutes()}`}</p>\n                </TaskDetailsDiv>\n                <TaskTimerDiv>\n                    <h2>{formattedTimeString(task.remainingTime)}</h2>\n                    <GrPowerReset style={{ position: \"absolute\", bottom: 5, right: 5, fontSize: \"0.8rem\" }} onClick={() => dispatch(reset(task.id))} />\n                </TaskTimerDiv>\n\n                <TaskControllerDiv style={{ fontSize: \"1.5rem\" }}>\n                    {task.isCompleted ? (\n                        <AiFillCheckCircle onClick={() => {dispatch(toggleIsCompleted(task.id));dispatch(rearrange({id:task.id,markedAsComplete:false}))}} />\n                    ) : (\n                        <AiOutlineCheckCircle onClick={() => {dispatch(toggleIsCompleted(task.id));dispatch(rearrange({id:task.id,markedAsComplete:true}))}} />\n                    )}\n                    {task.isRunning ? (\n                        <AiFillPauseCircle onClick={() => dispatch(toggleIsRunning(task.id))} />\n                    ) : (\n                        <AiFillPlayCircle onClick={() => dispatch(toggleIsRunning(task.id))} />\n                    )}\n\n                    <TiDelete onClick={() => dispatch(remove(task.id))} />\n                </TaskControllerDiv>\n            </TaskCardDiv>\n            </Flipped>\n    );\n}\n",["44","45"],"/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js",[],"/home/pg07codes/Desktop/fokus/src/containers/tasks/index.js",["46","47"],"/home/pg07codes/Desktop/fokus/src/containers/App.js",[],"/home/pg07codes/Desktop/fokus/src/containers/tasks/tasksSlice.js",["48","49","50","51"],"import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        taskArray: [],\n        meta: {\n            globalKey: 0,\n            completedTaskStartIndex: -1,\n        },\n    },\n    reducers: {\n        create: (tasks, { payload }) => {\n            tasks.taskArray.unshift(payload);\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\n        },\n        remove: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.filter((i) => {\n                if (i.id !== payload) return true;\n                else {\n                    if (!i.isCompleted) {\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\n                    }\n                    return false;\n                }\n            });\n        },\n        update: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.content = payload.updatedTask;\n                }\n            });\n        },\n        updateOrder: (tasks, { payload }) => {\n            tasks.taskArray = payload;\n        },\n        tick: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.remainingTime = i.remainingTime - 1;\n                }\n            });\n        },\n        reset: (taskArray, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.remainingTime = i.time;\n                    i.isRunning = false;\n                }\n            });\n        },\n        toggleIsRunning: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.isRunning = !i.isRunning;\n                }\n            });\n        },\n        toggleIsCompleted: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.isCompleted = !i.isCompleted;\n                }\n            });\n        },\n        incrementGlobalKey: ({ meta }) => {\n            ++meta.globalKey;\n        },\n        rearrange: (tasks, { payload }) => {\n            let id = payload.id;\n\n            if (payload.markedAsComplete) {\n                if (tasks.meta.completedTaskStartIndex === -1) {\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                    let found = false;\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\n                        if(found){\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }else if(tasks.taskArray[i].id === id){\n                            found=true;\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }\n                    }\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                } else {\n                    let task, idx;\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n                    let pos = -1;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n                    \n                    if (pos === -1) {\n                        tasks.taskArray.push(task);\n                    } else {\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.meta.completedTaskStartIndex -=1;\n                }\n            } else {\n                if (tasks.meta.completedTaskStartIndex == 0) {\n\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.taskArray.unshift(task);\n                    tasks.meta.completedTaskStartIndex = 1;\n                } else {\n\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    let start = tasks.meta.completedTaskStartIndex - 1;\n                    let pos = -1;\n                    for (let i = start; i >= 0; i--) {\n                        if (tasks.taskArray[i].globalKey < task.globalKey ) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    if (pos === -1) {\n                        tasks.taskArray.unshift(task);\n                    } else {\n                        pos++;\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.meta.completedTaskStartIndex += 1;\n\n                }\n\n                if(tasks.meta.completedTaskStartIndex==tasks.taskArray.length){\n                    tasks.meta.completedTaskStartIndex=-1;\n                }\n            }\n        },\n    },\n});\n\nexport const { create, remove, update, reset, toggleIsRunning, tick, toggleIsCompleted, updateOrder, incrementGlobalKey, rearrange } = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n","/home/pg07codes/Desktop/fokus/src/serviceWorker.js",[],["52","53"],"/home/pg07codes/Desktop/fokus/src/containers/counter/counterSlice.js",[],"/home/pg07codes/Desktop/fokus/src/index.js",[],"/home/pg07codes/Desktop/fokus/src/store/index.js",[],{"ruleId":"54","severity":1,"message":"55","line":15,"column":17,"nodeType":"56","messageId":"57","endLine":15,"endColumn":19},{"ruleId":"54","severity":1,"message":"55","line":20,"column":17,"nodeType":"56","messageId":"57","endLine":20,"endColumn":19},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"54","severity":1,"message":"62","line":57,"column":18,"nodeType":"56","messageId":"57","endLine":57,"endColumn":20},{"ruleId":"54","severity":1,"message":"55","line":67,"column":18,"nodeType":"56","messageId":"57","endLine":67,"endColumn":20},{"ruleId":"54","severity":1,"message":"62","line":15,"column":52,"nodeType":"56","messageId":"57","endLine":15,"endColumn":54},{"ruleId":"54","severity":1,"message":"62","line":22,"column":64,"nodeType":"56","messageId":"57","endLine":22,"endColumn":66},{"ruleId":"54","severity":1,"message":"55","line":117,"column":56,"nodeType":"56","messageId":"57","endLine":117,"endColumn":58},{"ruleId":"54","severity":1,"message":"55","line":163,"column":54,"nodeType":"56","messageId":"57","endLine":163,"endColumn":56},{"ruleId":"58","replacedBy":"63"},{"ruleId":"60","replacedBy":"64"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["65"],"no-negated-in-lhs",["66"],"Expected '!==' and instead saw '!='.",["65"],["66"],"no-global-assign","no-unsafe-negation"]