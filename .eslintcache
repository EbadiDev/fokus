[{"/home/pg07codes/Desktop/fokus/src/serviceWorker.js":"1","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js":"2","/home/pg07codes/Desktop/fokus/src/components/dashBoard/DayDate.js":"3","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TimeProgressCard.js":"4","/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js":"5","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js":"6","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/FocussedTask.js":"7","/home/pg07codes/Desktop/fokus/src/containers/settings/settingsSlice.js":"8","/home/pg07codes/Desktop/fokus/src/containers/settings/index.js":"9","/home/pg07codes/Desktop/fokus/src/containers/settings/AutoMarkDone.js":"10","/home/pg07codes/Desktop/fokus/src/helpers/constants.js":"11","/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js":"12","/home/pg07codes/Desktop/fokus/src/containers/settings/DarkThemeToggle.js":"13","/home/pg07codes/Desktop/fokus/src/containers/settings/DefaultTaskLabel.js":"14","/home/pg07codes/Desktop/fokus/src/containers/settings/DefaultTaskTime.js":"15","/home/pg07codes/Desktop/fokus/src/containers/dashboard/DashboardHero.js":"16","/home/pg07codes/Desktop/fokus/src/helpers/fokusUsageTips.js":"17","/home/pg07codes/Desktop/fokus/src/helpers/index.js":"18","/home/pg07codes/Desktop/fokus/src/index.js":"19","/home/pg07codes/Desktop/fokus/src/containers/dashboard/index.js":"20","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/Divider.js":"21","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/NoTasks.js":"22","/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js":"23","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TaskProgressCard.js":"24","/home/pg07codes/Desktop/fokus/src/components/MusicBox/Soundscapes.js":"25","/home/pg07codes/Desktop/fokus/src/components/MusicBox/MusicVolumeControl.js":"26","/home/pg07codes/Desktop/fokus/src/helpers/themeStyles.js":"27","/home/pg07codes/Desktop/fokus/src/containers/miscBoard/MiscBoard.js":"28","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/ProgressRings.js":"29","/home/pg07codes/Desktop/fokus/src/components/MusicBox/musicUtils.js":"30","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/EmptyLabelPie.js":"31"},{"size":5141,"mtime":1608877484447,"results":"32","hashOfConfig":"33"},{"size":6307,"mtime":1614852005910,"results":"34","hashOfConfig":"33"},{"size":1429,"mtime":1614779776635,"results":"35","hashOfConfig":"33"},{"size":3090,"mtime":1615028877261,"results":"36","hashOfConfig":"33"},{"size":1601,"mtime":1615052463437,"results":"37","hashOfConfig":"33"},{"size":17162,"mtime":1615052936320,"results":"38","hashOfConfig":"33"},{"size":10277,"mtime":1615052511665,"results":"39","hashOfConfig":"33"},{"size":1168,"mtime":1615036449231,"results":"40","hashOfConfig":"33"},{"size":1913,"mtime":1615050508900,"results":"41","hashOfConfig":"33"},{"size":1025,"mtime":1615050268205,"results":"42","hashOfConfig":"33"},{"size":80,"mtime":1615037498988,"results":"43","hashOfConfig":"33"},{"size":14708,"mtime":1615053119684,"results":"44","hashOfConfig":"33"},{"size":913,"mtime":1615050476184,"results":"45","hashOfConfig":"33"},{"size":2205,"mtime":1615050256705,"results":"46","hashOfConfig":"33"},{"size":2216,"mtime":1615050262617,"results":"47","hashOfConfig":"33"},{"size":1974,"mtime":1615051919363,"results":"48","hashOfConfig":"33"},{"size":367,"mtime":1615051889492,"results":"49","hashOfConfig":"33"},{"size":2097,"mtime":1615052392727,"results":"50","hashOfConfig":"33"},{"size":651,"mtime":1613628682348,"results":"51","hashOfConfig":"33"},{"size":664,"mtime":1614781857782,"results":"52","hashOfConfig":"33"},{"size":2654,"mtime":1614848772892,"results":"53","hashOfConfig":"33"},{"size":687,"mtime":1614690761432,"results":"54","hashOfConfig":"33"},{"size":2090,"mtime":1614846944899,"results":"55","hashOfConfig":"33"},{"size":2050,"mtime":1615028874437,"results":"56","hashOfConfig":"33"},{"size":4547,"mtime":1615026159385,"results":"57","hashOfConfig":"33"},{"size":1577,"mtime":1615026301342,"results":"58","hashOfConfig":"33"},{"size":579,"mtime":1615017933291,"results":"59","hashOfConfig":"33"},{"size":4704,"mtime":1614847186257,"results":"60","hashOfConfig":"33"},{"size":4224,"mtime":1614777978717,"results":"61","hashOfConfig":"33"},{"size":1285,"mtime":1615025359945,"results":"62","hashOfConfig":"33"},{"size":683,"mtime":1614777868937,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"g1paqb",{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"71"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"71"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pg07codes/Desktop/fokus/src/serviceWorker.js",[],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js",["134","135","136"],"/home/pg07codes/Desktop/fokus/src/components/dashBoard/DayDate.js",["137"],"import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { BsCalendarFill } from \"react-icons/bs\";\nimport { getFormattedDate  , getOrdinalSuffix} from \"../../helpers\";\n\nconst DayDateDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    justify-content: space-around;\n    width: 25%;\n    height: 55%;\n    /* background-color:grey; */\n`;\n\nconst CalendarIconDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 20%;\n    svg {\n        color: #fabb18;\n        font-size: 1.4em;\n    }\n`;\n\nconst DayDateText = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    justify-content: center;\n    width: 65%;\n    font-weight: bold;\n    font-size: 0.8em;\n    color:${p=>p.theme.primaryText};\n    p {\n        margin: 0;\n    }\n    sup{\n        font-size:0.5em;\n    }\n`;\n\nexport function DayDate() {\n    const DateObj = getFormattedDate();\n    return (\n        <DayDateDiv>\n            <CalendarIconDiv>\n                <BsCalendarFill />\n            </CalendarIconDiv>\n            <DayDateText>\n                <span>\n                    {DateObj.day} {DateObj.date}<sup>{getOrdinalSuffix(DateObj.date)}</sup>\n                </span>\n                <p>\n                    {DateObj.month}, {DateObj.year}\n                </p>\n            </DayDateText>\n        </DayDateDiv>\n    );\n}\n",["138","139"],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TimeProgressCard.js",[],"/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskCard.js",[],"/home/pg07codes/Desktop/fokus/src/components/FocusBoard/FocussedTask.js",[],"/home/pg07codes/Desktop/fokus/src/containers/settings/settingsSlice.js",[],"/home/pg07codes/Desktop/fokus/src/containers/settings/index.js",[],"/home/pg07codes/Desktop/fokus/src/containers/settings/AutoMarkDone.js",[],"/home/pg07codes/Desktop/fokus/src/helpers/constants.js",[],"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/taskBoardSlice.js",["140","141","142","143","144"],"import { createSlice } from \"@reduxjs/toolkit\";\nimport { MIN_TO_MS } from \"./../../helpers/constants\";\nimport { updatePageTitle } from \"./../../helpers\";\n\nconst labelOptions = {\n    work: {\n        color: \"#de1738\",\n        count: 0,\n    },\n    personal: {\n        color: \"#89CFF0\",\n        count: 0,\n    },\n    fitness: {\n        color: \"#76ff7a\",\n        count: 0,\n    },\n    metime: {\n        color: \"#7442c8\",\n        count: 0,\n    },\n    explore: {\n        color: \"#efc0fe\",\n        count: 0,\n    },\n};\n\nexport const tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        taskArray: [],\n        labels: labelOptions,\n        soundscape: {\n            track: \"mute\",\n            isPlaying: false,\n            volume: 0.7,\n        },\n        meta: {\n            globalKey: 0,\n            completedTaskStartIndex: -1,\n            focussedTaskIndex: -1,\n            showCompletedTasks: true,\n            completedTasksCount: 0,\n            totalTaskListTime: 0,\n            remainingTaskListTime: 0,\n        },\n    },\n    reducers: {\n        create: (tasks, { payload }) => {\n            payload.time = payload.time * MIN_TO_MS;\n            payload.remainingTime = payload.remainingTime * MIN_TO_MS;\n            tasks.taskArray.unshift(payload);\n            tasks.meta.totalTaskListTime += payload.time;\n            tasks.meta.remainingTaskListTime += payload.time;\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\n        },\n        remove: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.filter((i) => {\n                if (i.id !== payload) return true;\n                else {\n                    if (!i.isCompleted) {\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\n                    } else {\n                        tasks.meta.completedTasksCount--;\n                        if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length - 1) {\n                            tasks.meta.completedTaskStartIndex = -1;\n                        }\n                    }\n\n                    if (!i.isCompleted) {\n                        tasks.meta.remainingTaskListTime -= i.remainingTime;\n                    }\n                    tasks.meta.totalTaskListTime -= i.time;\n\n                    return false;\n                }\n            });\n        },\n        updateTaskObject: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i = payload;\n                }\n            });\n        },\n        updateTaskContent: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.content = payload.updatedTaskContent;\n                }\n            });\n        },\n        updateTaskLabel: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.label = payload.label;\n                }\n            });\n        },\n        updateTaskTime: (tasks, { payload }) => {\n            tasks.taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    tasks.meta.totalTaskListTime -= i.time;\n                    tasks.meta.remainingTaskListTime -= i.remainingTime;\n                    tasks.meta.totalTaskListTime += payload.updatedTime * MIN_TO_MS;\n                    tasks.meta.remainingTaskListTime += payload.updatedTime * MIN_TO_MS;\n                    i.remainingTime = payload.updatedTime * MIN_TO_MS;\n                    i.time = payload.updatedTime * MIN_TO_MS;\n                }\n            });\n        },\n        updateTaskTimeByVal: (tasks, { payload }) => {\n            if (tasks.taskArray[payload.focussedTaskIndex].remainingTime + payload.val * MIN_TO_MS < 0) {\n                tasks.meta.remainingTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\n            } else {\n                tasks.meta.remainingTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime += payload.val * MIN_TO_MS;\n                tasks.meta.remainingTaskListTime += tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n            }\n\n            if (tasks.taskArray[payload.focussedTaskIndex].time + payload.val * MIN_TO_MS < 0) {\n                tasks.meta.totalTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].time;\n                tasks.taskArray[payload.focussedTaskIndex].time = 0;\n            } else {\n                tasks.meta.totalTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].time;\n                tasks.taskArray[payload.focussedTaskIndex].time += payload.val * MIN_TO_MS;\n                tasks.meta.totalTaskListTime += tasks.taskArray[payload.focussedTaskIndex].time;\n            }\n        },\n        updateOrder: (tasks, { payload }) => {\n            tasks.taskArray = payload;\n        },\n        focusOnTask: (tasks, { payload }) => {\n            if (typeof payload === \"number\") {\n                tasks.meta.focussedTaskIndex = payload;\n            } else {\n                // done tasks, remaining time = 0 tasks shouldnt be picked.\n                let completedTaskStartIndex = tasks.meta.completedTaskStartIndex !== -1 ? tasks.meta.completedTaskStartIndex : tasks.taskArray.length;\n                let index = -1;\n                if (payload === \"smallest\") {\n                    let time,\n                        lowest = Number.POSITIVE_INFINITY;\n                    for (let i = 0; i < completedTaskStartIndex; i++) {\n                        time = tasks.taskArray[i].remainingTime;\n                        if (time < 1000) continue; // rem. time less than second(1000ms)\n                        if (time < lowest) {\n                            lowest = time;\n                            index = i;\n                        }\n                    }\n                } else if (payload === \"largest\") {\n                    let time,\n                        highest = Number.NEGATIVE_INFINITY;\n                    for (let i = 0; i < completedTaskStartIndex; i++) {\n                        time = tasks.taskArray[i].remainingTime;\n                        if (time < 1000) continue; // rem. time less than second(1000ms)\n                        if (time > highest) {\n                            highest = time;\n                            index = i;\n                        }\n                    }\n                }\n                updatePageTitle(`Fokus: ${tasks.taskArray[index].content}`);\n                tasks.meta.focussedTaskIndex = index;\n            }\n        },\n        resetFocussedTask: (tasks) => {\n            tasks.meta.focussedTaskIndex = -1;\n        },\n        tick: (tasks, { payload }) => {\n            tasks.taskArray[payload.focussedTaskIndex].remainingTime -= payload.deltaMS;\n            tasks.meta.remainingTaskListTime -= payload.deltaMS;\n\n            if (tasks.taskArray[payload.focussedTaskIndex].remainingTime < 0) {\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\n            }\n            if (tasks.meta.remainingTaskListTime < 0) {\n                tasks.meta.remainingTaskListTime = 0;\n            }\n        },\n        resetTaskTimer: (tasks, { payload }) => {\n            tasks.taskArray[payload].isRunning = false;\n\n            tasks.meta.remainingTaskListTime -= tasks.taskArray[payload].remainingTime;\n            tasks.meta.remainingTaskListTime += tasks.taskArray[payload].time;\n\n            tasks.taskArray[payload].remainingTime = tasks.taskArray[payload].time;\n        },\n        toggleIsRunning: (tasks, { payload }) => {\n            if (payload.val !== undefined) tasks.taskArray[payload.idx].isRunning = payload.val;\n            else tasks.taskArray[payload.idx].isRunning = !tasks.taskArray[payload.idx].isRunning;\n        },\n        toggleShowCompletedTasks: (tasks) => {\n            tasks.meta.showCompletedTasks = !tasks.meta.showCompletedTasks;\n        },\n        toggleIsCompleted: (tasks, { payload }) => {\n            tasks.taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    if (i.isCompleted) {\n                        tasks.meta.remainingTaskListTime += i.remainingTime;\n                        --tasks.meta.completedTasksCount;\n                    } else {\n                        tasks.meta.remainingTaskListTime -= i.remainingTime;\n                        ++tasks.meta.completedTasksCount;\n                    }\n\n                    i.isCompleted = !i.isCompleted;\n                }\n            });\n        },\n        clearCompletedTasks: (tasks) => {\n            if (tasks.meta.completedTaskStartIndex !== -1) {\n                for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                    if (tasks.taskArray[i].label !== null) tasks.labels[tasks.taskArray[i].label].count--;\n\n                    tasks.meta.totalTaskListTime -= tasks.taskArray[i].time;\n                }\n\n                tasks.taskArray.length = tasks.meta.completedTaskStartIndex;\n                tasks.meta.completedTaskStartIndex = -1;\n                tasks.meta.completedTasksCount = 0;\n            }\n        },\n        updateLabelCount: (tasks, { payload }) => {\n            if (payload.oldLabel !== null) tasks.labels[payload.oldLabel].count--;\n            if (payload.newLabel !== null) tasks.labels[payload.newLabel].count++;\n        },\n        incrementGlobalKey: ({ meta }) => {\n            ++meta.globalKey;\n        },\n        rearrange: (tasks, { payload }) => {\n            let id = payload.id;\n\n            if (payload.markedAsComplete) {\n                if (tasks.meta.completedTaskStartIndex === -1) {\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                    let found = false;\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\n                        if (found) {\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        } else if (tasks.taskArray[i].id === id) {\n                            found = true;\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }\n                    }\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                } else {\n                    let task, idx;\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n                    let pos = -1;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    if (pos === -1) {\n                        tasks.taskArray.push(task);\n                    } else {\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.meta.completedTaskStartIndex -= 1;\n                }\n            } else {\n                if (tasks.meta.completedTaskStartIndex == 0) {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.taskArray.unshift(task);\n                    tasks.meta.completedTaskStartIndex = 1;\n                } else {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    let start = tasks.meta.completedTaskStartIndex - 1;\n                    let pos = -1;\n                    for (let i = start; i >= 0; i--) {\n                        if (tasks.taskArray[i].globalKey < task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    if (pos === -1) {\n                        tasks.taskArray.unshift(task);\n                    } else {\n                        pos++;\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.meta.completedTaskStartIndex += 1;\n                }\n\n                if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length) {\n                    tasks.meta.completedTaskStartIndex = -1;\n                }\n            }\n        },\n        changeSoundscapeTrack: ({ soundscape }, { payload }) => {\n            soundscape.track = payload;\n        },\n        toggleSoundscapeState: ({ soundscape }, { payload }) => {\n            soundscape.isPlaying = payload;\n        },\n        updateSoundscapeVolume: ({ soundscape }, { payload }) => {\n            soundscape.volume = payload;\n        },\n    },\n});\n\nexport const {\n    create,\n    remove,\n    updateTaskObject,\n    updateTaskContent,\n    updateTaskLabel,\n    updateTaskTime,\n    updateTaskTimeByVal,\n    focusOnTask,\n    resetFocussedTask,\n    tick,\n    resetTaskTimer,\n    toggleIsRunning,\n    toggleShowCompletedTasks,\n    toggleIsCompleted,\n    clearCompletedTasks,\n    updateOrder,\n    updateLabelCount,\n    incrementGlobalKey,\n    rearrange,\n    changeSoundscapeTrack,\n    toggleSoundscapeState,\n    updateSoundscapeVolume,\n} = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n","/home/pg07codes/Desktop/fokus/src/containers/settings/DarkThemeToggle.js",["145"],"import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport Switch from \"react-switch\";\nimport { toggleDarkTheme } from \"./settingsSlice\";\nimport { InputDiv } from \"./index\";\n\nconst DarkModeDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 80%;\n    height: 70px;\n    background-color: ${(p) => p.theme.backgroundSecondary};\n    p {\n        margin: 0;\n    }\n`;\n\nexport function DarkThemeToggle() {\n    const darkTheme = useSelector((s) => s.settings.darkTheme);\n    const dispatch = useDispatch();\n\n    return (\n        <DarkModeDiv>\n            <p>Dark Mode</p>\n            <InputDiv>\n                <Switch checked={darkTheme} offColor=\"#c1c1d7\" onColor=\"#77dd77\" onChange={() => dispatch(toggleDarkTheme())} />\n            </InputDiv>\n        </DarkModeDiv>\n    );\n}\n",["146","147"],"/home/pg07codes/Desktop/fokus/src/containers/settings/DefaultTaskLabel.js",[],"/home/pg07codes/Desktop/fokus/src/containers/settings/DefaultTaskTime.js",[],["148","149"],"/home/pg07codes/Desktop/fokus/src/containers/dashboard/DashboardHero.js",[],"/home/pg07codes/Desktop/fokus/src/helpers/fokusUsageTips.js",[],"/home/pg07codes/Desktop/fokus/src/helpers/index.js",["150","151","152","153","154","155","156","157","158","159","160","161"],"export function formattedTimeString(x) {\n    x = Math.floor(x / 1000);\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}:${secs}`;\n}\n\nexport function formattedTimeStringv2(x) {\n    x = Math.floor(x / 1000);\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return { mins, secs };\n}\n\nexport function getFormattedDate() {\n    let d = new Date();\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    return {\n        day: days[d.getDay()],\n        month: months[d.getMonth()],\n        date: d.getDate(),\n        year: d.getFullYear(),\n    };\n}\n\nexport function getFormattedListTimeSummary(x) {\n    x = Math.floor(x / 1000);\n    let mins = Math.floor((x % 3600) / 60);\n    let hours = Math.floor(x / 3600);\n\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n    if (hours == 0) {\n        hours = `0`;\n    } else if (hours < 10) {\n        hours = `${hours}`;\n    }\n\n    return { hours, mins };\n}\n\nexport function debounce(fn, wait) {\n    let t;\n    return function () {\n        clearTimeout(t);\n        t = setTimeout(() => fn.apply(this, arguments), wait);\n    };\n}\n\nexport function updatePageTitle(title) {\n    document.title = title;\n}\n\nexport function getOrdinalSuffix(i) {\n    let j = i % 10,\n        k = i % 100;\n    if (j == 1 && k != 11) {\n        return \"st\";\n    }\n    if (j == 2 && k != 12) {\n        return \"nd\";\n    }\n    if (j == 3 && k != 13) {\n        return \"rd\";\n    }\n    return \"th\";\n}\n","/home/pg07codes/Desktop/fokus/src/index.js",[],"/home/pg07codes/Desktop/fokus/src/containers/dashboard/index.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/Divider.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/NoTasks.js",[],"/home/pg07codes/Desktop/fokus/src/containers/focusBoard/FocusBoard.js",["162"],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/TaskProgressCard.js",[],"/home/pg07codes/Desktop/fokus/src/components/MusicBox/Soundscapes.js",["163"],"/home/pg07codes/Desktop/fokus/src/components/MusicBox/MusicVolumeControl.js",[],"/home/pg07codes/Desktop/fokus/src/helpers/themeStyles.js",[],"/home/pg07codes/Desktop/fokus/src/containers/miscBoard/MiscBoard.js",["164","165"],"import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { LabelPie } from \"./../../components/MiscBoard/LabelPie\";\nimport { ProgressRings } from \"./../../components/MiscBoard/ProgressRings\";\nimport { TimeProgressCard } from \"./../../components/MiscBoard/TimeProgressCard\";\nimport { TaskProgressCard } from \"./../../components/MiscBoard/TaskProgressCard\";\nimport { getTodaysQuote } from \"./../../helpers/quotes\";\n\nconst MiscBoardContainer = styled.div`\n    flex: 1 1 0;\n    min-width: 346px;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    justify-content: center;\n    height: 100%;\n    /* background-color:orange; */\n`;\n\nconst MainSummaryContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    width: 80%;\n    max-width: 326px;\n    height: 226px;\n    margin: 10px 0;\n    border-radius: 20px;\n    background-color:${p=>p.theme.backgroundSecondary};\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    /* backface-visibility: hidden;\n    transform: translateZ(0);\n    transition: box-shadow 0.2s ease-in-out,transform 0.2s ease-in-out ;\n    &:hover {\n        transform: scale(1.02);\n        -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.8);\n        box-shadow: 0 2px 10px rgba(166, 173, 201, 0.8);\n    } */\n`;\n\nconst ProgressRingContainer = styled.div`\n    display: flex;\n    width: 50%;\n    height: 95%;\n    border-radius: 10px;\n    /* -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);*/\n    /* background-color: #f7f7fa;  */\n`;\n\nconst ProgressCardContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    width: 40%;\n    height: 95%;\n    border-radius: 10px;\n    /* -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    background-color: #f7adfa; */\n`;\n\nconst QuoteAndLabelContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 80%;\n    max-width: 326px;\n    height: 186px;\n    margin: 10px 0;\n    /* background-color: purple; */\n`;\n\nconst LabelPieContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 45%;\n    height: 90%;\n    border-radius: 10px;\n    background-color:${p=>p.theme.backgroundSecondary};\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n`;\n\nfunction getQuoteFontSize(letterCount){\n    let size = -0.0035*letterCount+1.3; // eqn of line with 40 - 1.1em and 180 - 0.6em\n    size = size.toPrecision(3);\n    return `${size}em`\n}\nconst QuoteContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 50%;\n    height: 100%;\n    border-radius: 10px;\n    position: relative;\n    backface-visibility: hidden;\n    -webkit-backface-visibility: hidden;\n    transform: translateZ(0);\n    font-weight: bold;\n    color:${p=>p.theme.primaryText};\n    p {\n        margin: 0 3px;\n        font-size: ${p=>getQuoteFontSize(p.length)};\n        &::before{\n            color:#fabb18;\n            content:\"“ \";\n        }\n        &::after{\n            color:#fabb18;\n            content:\" ”\";\n        }\n    }\n    span {\n        position: absolute;\n        bottom: 0;\n        right: 0;\n        margin: 5px;\n        font-size: 0.65em;\n        color:#fabb18;\n    }\n    transition: transform 0.2s ease-in-out;\n    &:hover {\n        transform: scale(1.2);\n    }\n`;\n\nexport function MiscBoard() {\n\n    let todaysQuote = getTodaysQuote();\n    return (\n        <MiscBoardContainer>\n            <MainSummaryContainer>\n                <ProgressRingContainer>\n                    <ProgressRings />\n                </ProgressRingContainer>\n                <ProgressCardContainer>\n                    <TaskProgressCard />\n                    <TimeProgressCard />\n                </ProgressCardContainer>\n            </MainSummaryContainer>\n\n            <QuoteAndLabelContainer>\n                <QuoteContainer length={todaysQuote.length}>\n                    <p>\n                        {todaysQuote.quote}\n                    </p>\n                    <span>&mdash; {todaysQuote.author} </span>\n                </QuoteContainer>\n                <LabelPieContainer>\n                    <LabelPie />\n                </LabelPieContainer>\n            </QuoteAndLabelContainer>\n        </MiscBoardContainer>\n    );\n}\n","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/ProgressRings.js",[],"/home/pg07codes/Desktop/fokus/src/components/MusicBox/musicUtils.js",[],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/EmptyLabelPie.js",[],{"ruleId":"166","severity":1,"message":"167","line":1,"column":17,"nodeType":"168","messageId":"169","endLine":1,"endColumn":25},{"ruleId":"170","severity":1,"message":"171","line":45,"column":18,"nodeType":"172","messageId":"173","endLine":45,"endColumn":20},{"ruleId":"170","severity":1,"message":"174","line":53,"column":19,"nodeType":"172","messageId":"173","endLine":53,"endColumn":21},{"ruleId":"166","severity":1,"message":"167","line":1,"column":17,"nodeType":"168","messageId":"169","endLine":1,"endColumn":25},{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"170","severity":1,"message":"171","line":55,"column":52,"nodeType":"172","messageId":"173","endLine":55,"endColumn":54},{"ruleId":"170","severity":1,"message":"171","line":62,"column":64,"nodeType":"172","messageId":"173","endLine":62,"endColumn":66},{"ruleId":"170","severity":1,"message":"174","line":65,"column":64,"nodeType":"172","messageId":"173","endLine":65,"endColumn":66},{"ruleId":"170","severity":1,"message":"174","line":279,"column":56,"nodeType":"172","messageId":"173","endLine":279,"endColumn":58},{"ruleId":"170","severity":1,"message":"174","line":322,"column":56,"nodeType":"172","messageId":"173","endLine":322,"endColumn":58},{"ruleId":"166","severity":1,"message":"167","line":1,"column":17,"nodeType":"168","messageId":"169","endLine":1,"endColumn":25},{"ruleId":"175","replacedBy":"179"},{"ruleId":"177","replacedBy":"180"},{"ruleId":"175","replacedBy":"181"},{"ruleId":"177","replacedBy":"182"},{"ruleId":"170","severity":1,"message":"174","line":6,"column":14,"nodeType":"172","messageId":"173","endLine":6,"endColumn":16},{"ruleId":"170","severity":1,"message":"174","line":11,"column":14,"nodeType":"172","messageId":"173","endLine":11,"endColumn":16},{"ruleId":"170","severity":1,"message":"174","line":25,"column":14,"nodeType":"172","messageId":"173","endLine":25,"endColumn":16},{"ruleId":"170","severity":1,"message":"174","line":30,"column":14,"nodeType":"172","messageId":"173","endLine":30,"endColumn":16},{"ruleId":"170","severity":1,"message":"174","line":56,"column":14,"nodeType":"172","messageId":"173","endLine":56,"endColumn":16},{"ruleId":"170","severity":1,"message":"174","line":61,"column":15,"nodeType":"172","messageId":"173","endLine":61,"endColumn":17},{"ruleId":"170","severity":1,"message":"174","line":85,"column":11,"nodeType":"172","messageId":"173","endLine":85,"endColumn":13},{"ruleId":"170","severity":1,"message":"171","line":85,"column":21,"nodeType":"172","messageId":"173","endLine":85,"endColumn":23},{"ruleId":"170","severity":1,"message":"174","line":88,"column":11,"nodeType":"172","messageId":"173","endLine":88,"endColumn":13},{"ruleId":"170","severity":1,"message":"171","line":88,"column":21,"nodeType":"172","messageId":"173","endLine":88,"endColumn":23},{"ruleId":"170","severity":1,"message":"174","line":91,"column":11,"nodeType":"172","messageId":"173","endLine":91,"endColumn":13},{"ruleId":"170","severity":1,"message":"171","line":91,"column":21,"nodeType":"172","messageId":"173","endLine":91,"endColumn":23},{"ruleId":"166","severity":1,"message":"183","line":2,"column":23,"nodeType":"168","messageId":"169","endLine":2,"endColumn":34},{"ruleId":"166","severity":1,"message":"184","line":103,"column":36,"nodeType":"168","messageId":"169","endLine":103,"endColumn":61},{"ruleId":"166","severity":1,"message":"185","line":2,"column":10,"nodeType":"168","messageId":"169","endLine":2,"endColumn":21},{"ruleId":"166","severity":1,"message":"183","line":2,"column":23,"nodeType":"168","messageId":"169","endLine":2,"endColumn":34},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-native-reassign",["186"],"no-negated-in-lhs",["187"],["186"],["187"],["186"],["187"],"'useDispatch' is defined but never used.","'setSoundscapeAudioElement' is assigned a value but never used.","'useSelector' is defined but never used.","no-global-assign","no-unsafe-negation"]