[{"/home/pg07codes/Desktop/fokus/src/containers/tasks/TaskCard.js":"1","/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js":"2","/home/pg07codes/Desktop/fokus/src/containers/tasks/index.js":"3","/home/pg07codes/Desktop/fokus/src/containers/App.js":"4","/home/pg07codes/Desktop/fokus/src/containers/tasks/tasksSlice.js":"5","/home/pg07codes/Desktop/fokus/src/serviceWorker.js":"6","/home/pg07codes/Desktop/fokus/src/containers/counter/counterSlice.js":"7","/home/pg07codes/Desktop/fokus/src/index.js":"8","/home/pg07codes/Desktop/fokus/src/store/index.js":"9"},{"size":4797,"mtime":1611599351496,"results":"10","hashOfConfig":"11"},{"size":528,"mtime":1611252515979,"results":"12","hashOfConfig":"11"},{"size":2484,"mtime":1611599407663,"results":"13","hashOfConfig":"11"},{"size":166,"mtime":1608966107231,"results":"14","hashOfConfig":"11"},{"size":1730,"mtime":1611570025311,"results":"15","hashOfConfig":"11"},{"size":5141,"mtime":1608877484447,"results":"16","hashOfConfig":"11"},{"size":1552,"mtime":1608881410941,"results":"17","hashOfConfig":"11"},{"size":651,"mtime":1608902523877,"results":"18","hashOfConfig":"11"},{"size":308,"mtime":1608966787851,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"g1paqb",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pg07codes/Desktop/fokus/src/containers/tasks/TaskCard.js",["41","42","43"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { remove, update, tick, reset, toggleIsRunning, toggleIsCompleted } from \"./tasksSlice\";\nimport useTimer from \"../../hooks/useTimer\";\nimport styled from \"styled-components\";\nimport { AiFillPlayCircle, AiFillPauseCircle, AiFillCheckCircle, AiOutlineCheckCircle, AiFillClockCircle } from \"react-icons/ai\";\nimport { TiDelete } from \"react-icons/ti\";\nimport { GrPowerReset } from \"react-icons/gr\";\nimport { Flipper, Flipped } from \"react-flip-toolkit\";\n\nfunction formattedTimeString(x) {\n    let seconds = x % 60;\n    let minutes = Math.floor(x / 60);\n\n    if (seconds == 0) {\n        seconds = `00`;\n    } else if (seconds < 10) {\n        seconds = `0${seconds}`;\n    }\n    if (minutes == 0) {\n        minutes = `00`;\n    } else if (minutes < 10) {\n        minutes = `0${minutes}`;\n    }\n\n    return `${minutes}:${seconds}`;\n}\n\nconst TaskCardDiv = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-direction: row;\n    height: 120px;\n    width: 476px;\n    border-radius: 10px;\n    box-shadow: 0 4px 4px rgba(0, 0, 0, 0.2);\n    background: #f8f8ff;\n    margin: 10px;\n`;\n\nconst TaskDetailsDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n    height: 100px;\n    width: 280px;\n    margin: 0 0 0 10px;\n    border-radius: 20px;\n    h3,\n    p {\n        margin: 2px;\n        padding: 0;\n    }\n    p {\n        font-size: 0.6rem;\n        font-style: italic;\n        color: grey;\n    }\n`;\n\nconst TaskTimerDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100px;\n    width: 100px;\n    border-radius: 10px;\n    background-color: #eeeeff;\n    position: relative;\n`;\n\nconst TaskControllerDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    height: 120px;\n    width: 40px;\n    border-radius: 0 10px 10px 0;\n`;\n\nexport default function TaskCard({task , forwardRBDProvided}) {\n    const delay = 1000;\n    const dispatch = useDispatch();\n    useTimer(\n        () => {\n            if (task.remainingTime > 0) {\n                dispatch(tick(task.id));\n            } else if (task.remainingTime === 0) {\n                dispatch(toggleIsRunning(task.id));\n            }\n        },\n        task.isRunning ? delay : null\n    );\n\n    const [taskEdit, setTaskEdit] = useState(false);\n    const [updatedTask, setUpdatedTask] = useState(task.content);\n\n    return (\n        <Flipped flipId={`${task.id}`}>\n            <TaskCardDiv  ref={forwardRBDProvided.innerRef} {...forwardRBDProvided.draggableProps} {...forwardRBDProvided.dragHandleProps}>\n                <TaskDetailsDiv>\n                    <p>\n                        <AiFillClockCircle />\n                        {Math.round(task.time / 60) + \"min\"}\n                    </p>\n                    {taskEdit ? (\n                        <input\n                            value={updatedTask}\n                            onBlur={() => {\n                                dispatch(update({ id: task.id, updatedTask }));\n                                setTaskEdit(false);\n                            }}\n                            onChange={(e) => setUpdatedTask(e.target.value)}\n                        />\n                    ) : (\n                        <h3 onDoubleClick={() => setTaskEdit(true)}>{task.content}</h3>\n                    )}\n\n                    <p>{`created at: ${new Date(task.createdAt).getHours()}:${new Date(task.createdAt).getMinutes()}`}</p>\n                </TaskDetailsDiv>\n                <TaskTimerDiv>\n                    <h2>{formattedTimeString(task.remainingTime)}</h2>\n                    <GrPowerReset style={{ position: \"absolute\", bottom: 5, right: 5, fontSize: \"0.8rem\" }} onClick={() => dispatch(reset(task.id))} />\n                </TaskTimerDiv>\n\n                <TaskControllerDiv style={{ fontSize: \"1.5rem\" }}>\n                    {task.isCompleted ? (\n                        <AiFillCheckCircle onClick={() => dispatch(toggleIsCompleted(task.id))} />\n                    ) : (\n                        <AiOutlineCheckCircle onClick={() => dispatch(toggleIsCompleted(task.id))} />\n                    )}\n                    {task.isRunning ? (\n                        <AiFillPauseCircle onClick={() => dispatch(toggleIsRunning(task.id))} />\n                    ) : (\n                        <AiFillPlayCircle onClick={() => dispatch(toggleIsRunning(task.id))} />\n                    )}\n\n                    <TiDelete onClick={() => dispatch(remove(task.id))} />\n                </TaskControllerDiv>\n            </TaskCardDiv>\n            </Flipped>\n    );\n}\n","/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js",[],"/home/pg07codes/Desktop/fokus/src/containers/tasks/index.js",["44"],"/home/pg07codes/Desktop/fokus/src/containers/App.js",[],"/home/pg07codes/Desktop/fokus/src/containers/tasks/tasksSlice.js",[],"/home/pg07codes/Desktop/fokus/src/serviceWorker.js",[],["45","46"],"/home/pg07codes/Desktop/fokus/src/containers/counter/counterSlice.js",[],"/home/pg07codes/Desktop/fokus/src/index.js",[],["47","48"],"/home/pg07codes/Desktop/fokus/src/store/index.js",[],{"ruleId":"49","severity":1,"message":"50","line":9,"column":10,"nodeType":"51","messageId":"52","endLine":9,"endColumn":17},{"ruleId":"53","severity":1,"message":"54","line":15,"column":17,"nodeType":"55","messageId":"56","endLine":15,"endColumn":19},{"ruleId":"53","severity":1,"message":"54","line":20,"column":17,"nodeType":"55","messageId":"56","endLine":20,"endColumn":19},{"ruleId":"49","severity":1,"message":"57","line":6,"column":19,"nodeType":"51","messageId":"52","endLine":6,"endColumn":26},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"58","replacedBy":"62"},{"ruleId":"60","replacedBy":"63"},"no-unused-vars","'Flipper' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Flipped' is defined but never used.","no-native-reassign",["64"],"no-negated-in-lhs",["65"],["64"],["65"],"no-global-assign","no-unsafe-negation"]