[{"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js":"1","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskLabelSelect.js":"2","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskFeedback.js":"3","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js":"4","/home/pg07codes/Desktop/fokus/src/components/MusicBox/MusicVolumeControl.js":"5","/home/pg07codes/Desktop/fokus/src/serviceWorker.js":"6","/home/pg07codes/Desktop/fokus/src/containers/settings/index.js":"7","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/Divider.js":"8","/home/pg07codes/Desktop/fokus/src/containers/dashboard/DashboardMain.js":"9","/home/pg07codes/Desktop/fokus/src/components/dashBoard/DayDate.js":"10","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyFocusBox.js":"11","/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js":"12","/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js":"13","/home/pg07codes/Desktop/fokus/src/index.js":"14","/home/pg07codes/Desktop/fokus/src/components/MiscBoard/EmptyLabelPie.js":"15","/home/pg07codes/Desktop/fokus/src/containers/mobileView/index.js":"16","/home/pg07codes/Desktop/fokus/src/components/TaskBoard/NoTasks.js":"17"},{"size":6336,"mtime":1614693748389,"results":"18","hashOfConfig":"19"},{"size":1304,"mtime":1613218352233,"results":"20","hashOfConfig":"19"},{"size":3111,"mtime":1614706983189,"results":"21","hashOfConfig":"19"},{"size":6485,"mtime":1614705040155,"results":"22","hashOfConfig":"19"},{"size":1527,"mtime":1614698152250,"results":"23","hashOfConfig":"19"},{"size":5141,"mtime":1608877484447,"results":"24","hashOfConfig":"19"},{"size":834,"mtime":1614608352036,"results":"25","hashOfConfig":"19"},{"size":2621,"mtime":1613720728888,"results":"26","hashOfConfig":"19"},{"size":521,"mtime":1614522069095,"results":"27","hashOfConfig":"19"},{"size":1409,"mtime":1614681243183,"results":"28","hashOfConfig":"19"},{"size":5986,"mtime":1614682558612,"results":"29","hashOfConfig":"19"},{"size":1541,"mtime":1614063953152,"results":"30","hashOfConfig":"19"},{"size":1839,"mtime":1613636104237,"results":"31","hashOfConfig":"19"},{"size":651,"mtime":1613628682348,"results":"32","hashOfConfig":"19"},{"size":670,"mtime":1614681756095,"results":"33","hashOfConfig":"19"},{"size":193,"mtime":1613740833325,"results":"34","hashOfConfig":"19"},{"size":687,"mtime":1614690761432,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},"g1paqb",{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pg07codes/Desktop/fokus/src/containers/taskBoard/TaskBoard.js",["74","75","76"],"import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateOrder } from \"./taskBoardSlice\";\nimport TaskCard from \"./../../components/TaskBoard/TaskCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Flipper } from \"react-flip-toolkit\";\nimport { focusOnTask } from \"./taskBoardSlice\";\nimport styled from \"styled-components\";\nimport TaskInput from \"./../../components/TaskBoard/TaskInput\";\nimport Divider from \"./../../components/TaskBoard/Divider\";\nimport NoTasks from \"../../components/TaskBoard/NoTasks\";\n\nconst TaskBoardContainer = styled.div`\n    flex: 1 1 0;\n    display: flex;\n    min-width: 396px;\n    flex-direction: column;\n    align-items: center;\n    overflow-y: scroll; // to enable scrolling by default for this flex-container only\n`;\n\nconst EmptySpace = styled.div`\n    display: flex;\n    background-color: #fffff3;\n    min-width: 10px;\n    min-height:10px;\n    margin:10px;\n`;\n\nexport function TaskBoard() {\n    const tasks = useSelector((state) => state.tasks.taskArray);\n    const meta = useSelector((state) => state.tasks.meta);\n    let focussedTask = meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex] : null;\n    const dispatch = useDispatch();\n\n    function handleOnDragEnd(result) {\n        if (!result.destination) return;\n\n        let items = [...tasks.map((i) => ({ ...i }))];\n        const [reorderedItem] = items.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorderedItem);\n\n        let i = result.source.index;\n        let direction = result.destination.index > result.source.index; // direction true means moving right & swapping\n        // below is logic to reset globalKeys to maintain correct sort order.\n        while (i != result.destination.index) {\n            if (direction) {\n                items[i].globalKey = tasks[i].globalKey;\n                i++;\n            } else {\n                items[i].globalKey = tasks[i].globalKey;\n                i--;\n            }\n            if (i == result.destination.index) {\n                items[i].globalKey = tasks[i].globalKey;\n            }\n        }\n\n        if (meta.focussedTaskIndex !== -1) {\n            let greaterIndex = Math.max(result.destination.index, result.source.index);\n            let smallerIndex = Math.min(result.destination.index, result.source.index);\n\n            if (result.source.index === meta.focussedTaskIndex) {\n                dispatch(focusOnTask(result.destination.index));\n            } else if (meta.focussedTaskIndex >= smallerIndex && meta.focussedTaskIndex <= greaterIndex) {\n                if (result.destination.index > result.source.index) {\n                    dispatch(focusOnTask(meta.focussedTaskIndex - 1)); // -1\n                } else {\n                    dispatch(focusOnTask(meta.focussedTaskIndex + 1)); // +1\n                }\n            }\n        }\n\n        dispatch(updateOrder(items)); // order is imp. focus then updateOrder\n    }\n\n    function getFlipKey() {\n        let flipKey = \"\";\n        tasks.forEach((i) => {\n            flipKey += `${i.globalKey}`;\n        });\n        flipKey += `${meta.completedTaskStartIndex}`;\n        return flipKey;\n    }\n\n    function isFocussed(id) {\n        if (focussedTask !== null && focussedTask.id === id) return true;\n        return false;\n    }\n\n    // input has both onChange and onKeyDown - can be optimised by using one and combining\n\n    return (\n        <TaskBoardContainer>\n            <TaskInput focussedTaskIndex={meta.focussedTaskIndex} />\n            {tasks.length === 0 ? <NoTasks /> : tasks.length === meta.completedTasksCount && <NoTasks allCompleted={true} />}\n            <Flipper flipKey={getFlipKey()}>\n                <DragDropContext onDragEnd={handleOnDragEnd}>\n                    <Droppable droppableId=\"dropArea\">\n                        {(provided) => (\n                            <div {...provided.droppableProps} ref={provided.innerRef}>\n                                {tasks.map((i, index) =>\n                                    !i.isCompleted ? (\n                                        <Draggable isDragDisabled={i.isCompleted} key={i.id} draggableId={`${i.id}`} index={index}>\n                                            {(provided2) => (\n                                                <TaskCard\n                                                    focussedTaskIndex={meta.focussedTaskIndex}\n                                                    focussedTaskGlobalKey={meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1}\n                                                    taskIndex={index}\n                                                    forwardRBDProvided={provided2}\n                                                    task={i}\n                                                    isFocussed={isFocussed(i.id)}\n                                                />\n                                            )}\n                                        </Draggable>\n                                    ) : (\n                                        \"\"\n                                    )\n                                )}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n\n                {meta.completedTaskStartIndex !== -1 && <Divider />}\n\n                {meta.showCompletedTasks &&\n                    tasks.map((i, index) =>\n                        i.isCompleted ? (\n                            <TaskCard\n                                focussedTaskIndex={meta.focussedTaskIndex}\n                                focussedTaskGlobalKey={meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1}\n                                taskIndex={index}\n                                key={i.id}\n                                forwardRBDProvided={{ innerRef: null }}\n                                task={i}\n                                isFocussed={isFocussed(i.id)}\n                            />\n                        ) : (\n                            \"\"\n                        )\n                    )}\n            </Flipper>\n            <EmptySpace />\n        </TaskBoardContainer>\n    );\n}\n",["77","78"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskLabelSelect.js",["79"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskFeedback.js",["80"],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/TaskInput.js",["81"],"/home/pg07codes/Desktop/fokus/src/components/MusicBox/MusicVolumeControl.js",[],"/home/pg07codes/Desktop/fokus/src/serviceWorker.js",[],["82","83"],"/home/pg07codes/Desktop/fokus/src/containers/settings/index.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/Divider.js",[],"/home/pg07codes/Desktop/fokus/src/containers/dashboard/DashboardMain.js",[],"/home/pg07codes/Desktop/fokus/src/components/dashBoard/DayDate.js",["84"],"import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { BsCalendarFill } from \"react-icons/bs\";\nimport { getFormattedDate  , getOrdinalSuffix} from \"../../helpers\";\n\nconst DayDateDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    justify-content: space-around;\n    width: 25%;\n    height: 55%;\n    /* background-color:grey; */\n`;\n\nconst CalendarIconDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 20%;\n    svg {\n        color: #fabb18;\n        font-size: 1.4em;\n    }\n`;\n\nconst DayDateText = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    justify-content: center;\n    width: 65%;\n    font-weight: bold;\n    font-size: 0.8em;\n    span {\n    }\n    p {\n        margin: 0;\n    }\n    sup{\n        font-size:0.5em;\n    }\n`;\n\nexport function DayDate() {\n    const DateObj = getFormattedDate();\n    return (\n        <DayDateDiv>\n            <CalendarIconDiv>\n                <BsCalendarFill />\n            </CalendarIconDiv>\n            <DayDateText>\n                <span>\n                    {DateObj.day} {DateObj.date}<sup>{getOrdinalSuffix(DateObj.date)}</sup>\n                </span>\n                <p>\n                    {DateObj.month}, {DateObj.year}\n                </p>\n            </DayDateText>\n        </DayDateDiv>\n    );\n}\n","/home/pg07codes/Desktop/fokus/src/components/FocusBoard/EmptyFocusBox.js",[],"/home/pg07codes/Desktop/fokus/src/hooks/useTimer.js",[],"/home/pg07codes/Desktop/fokus/src/components/customIcons/index.js",[],"/home/pg07codes/Desktop/fokus/src/index.js",[],"/home/pg07codes/Desktop/fokus/src/components/MiscBoard/EmptyLabelPie.js",[],"/home/pg07codes/Desktop/fokus/src/containers/mobileView/index.js",[],"/home/pg07codes/Desktop/fokus/src/components/TaskBoard/NoTasks.js",[],{"ruleId":"85","severity":1,"message":"86","line":1,"column":17,"nodeType":"87","messageId":"88","endLine":1,"endColumn":25},{"ruleId":"89","severity":1,"message":"90","line":46,"column":18,"nodeType":"91","messageId":"92","endLine":46,"endColumn":20},{"ruleId":"89","severity":1,"message":"93","line":54,"column":19,"nodeType":"91","messageId":"92","endLine":54,"endColumn":21},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"85","severity":1,"message":"98","line":2,"column":23,"nodeType":"87","messageId":"88","endLine":2,"endColumn":34},{"ruleId":"85","severity":1,"message":"99","line":4,"column":10,"nodeType":"87","messageId":"88","endLine":4,"endColumn":18},{"ruleId":"100","severity":1,"message":"101","line":149,"column":44,"nodeType":"87","endLine":149,"endColumn":55},{"ruleId":"94","replacedBy":"102"},{"ruleId":"96","replacedBy":"103"},{"ruleId":"85","severity":1,"message":"86","line":1,"column":17,"nodeType":"87","messageId":"88","endLine":1,"endColumn":25},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-native-reassign",["104"],"no-negated-in-lhs",["105"],"'useDispatch' is defined but never used.","'debounce' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.",["104"],["105"],"no-global-assign","no-unsafe-negation"]