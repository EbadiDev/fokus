{"version":3,"sources":["images/WIP.svg","containers/menu/Menu.js","containers/dashboard/DashboardHero.js","helpers/constants.js","containers/taskBoard/taskBoardSlice.js","hooks/useTimer.js","components/customIcons/index.js","sounds/ding.mp3","helpers/index.js","components/FocusBoard/FocussedTask.js","components/FocusBoard/EmptyFocusBox.js","sounds/bell.mp3","sounds/piano.mp3","sounds/river.mp3","sounds/forest.mp3","sounds/alphaWave.mp3","images/bell.svg","images/piano.svg","images/alphaWave.svg","images/river.svg","components/MusicBox/musicUtils.js","images/forest.svg","components/MusicBox/MusicVolumeControl.js","components/MusicBox/Soundscapes.js","components/FocusBoard/DayDate.js","containers/focusBoard/FocusBoard.js","components/MiscBoard/EmptyLabelPie.js","components/MiscBoard/LabelPie.js","components/MiscBoard/ProgressRings.js","components/MiscBoard/TimeProgressCard.js","components/MiscBoard/TaskProgressCard.js","containers/miscBoard/MiscBoard.js","containers/dashboard/DashboardMain.js","containers/dashboard/index.js","images/bulb.svg","images/glowBulb.svg","images/tickmark.svg","components/TaskBoard/TaskLabelSelect.js","components/TaskBoard/TaskCard.js","components/TaskBoard/TaskInput.js","components/TaskBoard/Divider.js","images/noTasks.svg","components/TaskBoard/NoTasks.js","containers/taskBoard/TaskBoard.js","containers/mobileView/index.js","containers/App.js","store/index.js","serviceWorker.js","index.js"],"names":["MenuContainer","styled","div","Menu","src","WIP","style","height","width","alt","textAlign","letterSpacing","color","DashboardHeroContainer","DashboardHero","MIN_TO_MS","tasksSlice","createSlice","name","initialState","taskArray","labels","work","count","personal","fitness","metime","explore","soundscape","track","isPlaying","volume","meta","globalKey","completedTaskStartIndex","focussedTaskIndex","showCompletedTasks","completedTasksCount","totalTaskListTime","remainingTaskListTime","reducers","create","tasks","payload","time","remainingTime","unshift","remove","filter","i","id","isCompleted","length","updateTaskContent","forEach","content","updatedTaskContent","updateTaskLabel","label","updateTaskTime","updatedTime","updateTaskTimeByVal","val","updateOrder","focusOnTask","resetFocussedTask","tick","deltaMS","resetTaskTimer","isRunning","toggleIsRunning","undefined","idx","toggleShowCompletedTasks","toggleIsCompleted","clearCompletedTasks","updateLabelCount","oldLabel","newLabel","incrementGlobalKey","rearrange","markedAsComplete","found","temp","task","pos","push","splice","changeSoundscapeTrack","toggleSoundscapeState","updateSoundscapeVolume","actions","absoluteSetInterval","handler","delay","baseTime","Date","now","setInterval","timePassedSinceLastCall","console","log","ResetIcon","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","SummaryCardTick","fillRule","clipRule","SummaryCardClock","formattedTimeString","x","secs","Math","floor","mins","getFormattedListTimeSummary","hours","dingSoundElement","Audio","dingSound","FocussedTaskDiv","FocussedTaskPlayer","FocussedTaskContent","FocussedTaskTimer","CountdownTimerDiv","p","isDisabled","FocussedTaskController","PlayPauseButtonDiv","isPlayBtn","UpdateTimeButtonDiv","ResetButtonDiv","FocussedTask","useSelector","state","focussedTask","dispatch","useDispatch","updateTaskTimeHandler","callback","savedCallback","useRef","useEffect","current","clearInterval","useTimer2","play","countdownObj","formattedTimeStringv2","countdownMins","countdownSecs","value","styles","buildStyles","pathColor","trailColor","onClick","wasTaskRunning","playPauseHandler","EmptyFocusBox","data-tip","data-for","getContent","soundOptions","alphaWave","img","ImgAlphaWave","piano","ImgPiano","bell","ImgBell","Forest","forest","river","ImgRiver","MusicVolumeControl","ssVolume","s","useState","setVolume","debouncedUpdateSoundscapeVolume","fn","wait","t","clearTimeout","setTimeout","apply","arguments","debounce","vol","axis","disabled","xstep","xmin","xmax","onChange","backgroundColor","active","opacity","SoundscapesContainer","SoundscapesDiv","SoundOptionsDiv","SoundOptionsInput","isSelectedSound","SoundVolumeControl","Soundscapes","trackname","audioElement","loop","generateAudioElement","soundscapeAudioElement","addEventListener","pause","Object","keys","map","FocusBoardContainer","FocussedTaskContainer","MusicBoxContainer","FocusBoard","EmptyLabelPieDiv","EmptyLabelPie","LabelPie","totalTasksCount","selected","setSelected","hovered","setHovered","labelledTasksCount","labelData","reduce","filtered","tooltip","fontSize","fontWeight","data","radius","PieChart","defaultProps","lineWidth","segmentsStyle","transition","cursor","segmentsShift","animate","dataEntry","labelPosition","labelStyle","pointerEvents","_","index","onMouseOver","onMouseOut","ProgressRingBox","ProgressRingDiv","ProgressRingLegendDiv","LegendDataDiv","TextDiv","PercentTextDiv","LegendColorDot","ProgressRings","taskCompletionPercent","timeCompletionPercent","ProgressCard","ProgressCardText","FormattedTimeDiv","ClockIconDiv","TimeProgressCard","rTLTObj","rTLTHours","rTLTMins","tTLTObj","tTLTHours","tTLTMins","TickIconDiv","TaskProgressCard","MiscBoardContainer","MainSummaryContainer","ProgressRingContainer","ProgressCardContainer","LabelPieContainer","MiscBoard","DashboardMainContainer","DashboardMain","DashboardContainer","Dashboard","TaskSelectInput","select","TaskLabel","taskLabel","updatedLabel","setUpdatedLabel","autoFocus","onBlur","taskId","defaultValue","e","target","onKeyDown","key","TaskCardContainer","TaskCardDragIcon","TaskCardDiv","labelColor","isFocussed","TaskStatusDiv","TaskDetailsDiv","TaskContentDiv","TaskEditInput","textarea","TimeEditInput","input","TaskActionButton","TaskLabelContainer","TaskDeleteButton","TaskControllerDiv","TaskCard","str","taskIndex","focussedTaskGlobalKey","forwardRBDProvided","taskUnderEdit","setTaskUnderEdit","setUpdatedTaskContent","timeUnderEdit","setTimeUnderEdit","setUpdatedTime","labelUnderEdit","setLabelUnderEdit","showDragIcon","setShowDragIcon","flipId","ref","innerRef","draggableProps","dragHandleProps","onMouseEnter","onMouseLeave","tickmark","glowBulb","bulb","onDoubleClick","trim","substring","isDoneBtn","stopPropagation","TaskInputContainer","TaskContentInputDiv","TaskContentInputField","TaskTimeInputDiv","TaskTimeInputField","TaskInput","taskContentInputRef","taskTimeInputRef","setTask","setTime","submitTask","split","taskTime","isNaN","parseInt","includes","userLabel","toLowerCase","validLabel","pop","join","newTask","random","createdAt","toISOString","focus","type","placeholder","el","DoneTasksDivider","DividerLine","DividerIcon","DividerActionDiv","Divider","showActionBtn","setShowActionBtn","NoTasksDiv","allCompleted","NoTasksIcon","NoTasks","noTasks","TaskBoardContainer","TaskBoard","flipKey","getFlipKey","onDragEnd","result","destination","items","source","reorderedItem","direction","greaterIndex","max","smallerIndex","min","droppableId","provided","droppableProps","isDragDisabled","draggableId","provided2","MobileView","AppContainer","App","isMobile","configureStore","reducer","tasksReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6LAAe,MAA0B,gC,gOCIzC,IAAMA,EAAgBC,IAAOC,IAAV,KASZ,SAASC,IACZ,OACI,eAACH,EAAD,WACI,qBAAKI,IAAKC,EAAKC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,KAAOC,IAAI,qBACvD,8BACI,oBAAIH,MAAO,CAAEI,UAAW,SAAUC,cAAe,EAAGC,MAAO,WAA3D,oE,6ICfhB,IAAMC,EAAyBZ,IAAOC,IAAV,KAMrB,SAASY,IACZ,OAAO,cAACD,EAAD,I,2BCVEE,EAAY,IC0BZC,EAAaC,YAAY,CAClCC,KAAM,QACNC,aAAc,CACVC,UAAW,GACXC,OA3Ba,CACjBC,KAAM,CACFV,MAAO,UACPW,MAAO,GAEXC,SAAU,CACNZ,MAAO,UACPW,MAAO,GAEXE,QAAS,CACLb,MAAO,UACPW,MAAO,GAEXG,OAAQ,CACJd,MAAO,UACPW,MAAO,GAEXI,QAAS,CACLf,MAAO,UACPW,MAAO,IASPK,WAAY,CACRC,MAAO,OACPC,WAAW,EACXC,OAAQ,IAEZC,KAAM,CACFC,UAAW,EACXC,yBAA0B,EAC1BC,mBAAoB,EACpBC,oBAAoB,EACpBC,oBAAqB,EACrBC,kBAAmB,EACnBC,sBAAuB,IAG/BC,SAAU,CACNC,OAAQ,SAACC,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACdA,EAAQC,KAAOD,EAAQC,KAAO7B,EAC9B4B,EAAQE,cAAgBF,EAAQE,cAAgB9B,EAChD2B,EAAMtB,UAAU0B,QAAQH,GACxBD,EAAMV,KAAKM,mBAAqBK,EAAQC,KACxCF,EAAMV,KAAKO,uBAAyBI,EAAQC,MACD,GAAvCF,EAAMV,KAAKE,2BAAiCQ,EAAMV,KAAKE,yBAE/Da,OAAQ,SAACL,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACdD,EAAMtB,UAAYsB,EAAMtB,UAAU4B,QAAO,SAACC,GACtC,OAAIA,EAAEC,KAAOP,IAEJM,EAAEE,aAGHT,EAAMV,KAAKK,sBACPK,EAAMV,KAAKE,yBAA2BQ,EAAMtB,UAAUgC,OAAS,IAC/DV,EAAMV,KAAKE,yBAA2B,KAJC,GAAvCQ,EAAMV,KAAKE,2BAAiCQ,EAAMV,KAAKE,wBAQ1De,EAAEE,cACHT,EAAMV,KAAKO,uBAAyBU,EAAEJ,eAE1CH,EAAMV,KAAKM,mBAAqBW,EAAEL,MAE3B,OAInBS,kBAAmB,cAAiC,IAA9BjC,EAA6B,EAA7BA,UAAeuB,EAAc,EAAdA,QACjCvB,EAAUkC,SAAQ,SAACL,GACXA,EAAEC,KAAOP,EAAQO,KACjBD,EAAEM,QAAUZ,EAAQa,wBAIhCC,gBAAiB,cAAiC,IAA9BrC,EAA6B,EAA7BA,UAAeuB,EAAc,EAAdA,QAC/BvB,EAAUkC,SAAQ,SAACL,GACXA,EAAEC,KAAOP,EAAQO,KACjBD,EAAES,MAAQf,EAAQe,WAI9BC,eAAgB,SAACjB,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACtBD,EAAMtB,UAAUkC,SAAQ,SAACL,GACjBA,EAAEC,KAAOP,EAAQO,KACjBR,EAAMV,KAAKM,mBAAqBW,EAAEL,KAClCF,EAAMV,KAAKO,uBAAyBU,EAAEJ,cACtCH,EAAMV,KAAKM,mBAAqBK,EAAQiB,YAAc7C,EACtD2B,EAAMV,KAAKO,uBAAyBI,EAAQiB,YAAc7C,EAC1DkC,EAAEJ,cAAgBF,EAAQiB,YAAc7C,EACxCkC,EAAEL,KAAOD,EAAQiB,YAAc7C,OAI3C8C,oBAAqB,SAACnB,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACvBD,EAAMtB,UAAUuB,EAAQR,mBAAmBU,cAAgBF,EAAQmB,IAAM/C,EAAY,GACrF2B,EAAMV,KAAKO,uBAAyBG,EAAMtB,UAAUuB,EAAQR,mBAAmBU,cAC/EH,EAAMtB,UAAUuB,EAAQR,mBAAmBU,cAAgB,IAE3DH,EAAMV,KAAKO,uBAAyBG,EAAMtB,UAAUuB,EAAQR,mBAAmBU,cAC/EH,EAAMtB,UAAUuB,EAAQR,mBAAmBU,eAAiBF,EAAQmB,IAAM/C,EAC1E2B,EAAMV,KAAKO,uBAAyBG,EAAMtB,UAAUuB,EAAQR,mBAAmBU,eAG/EH,EAAMtB,UAAUuB,EAAQR,mBAAmBS,KAAOD,EAAQmB,IAAM/C,EAAY,GAC5E2B,EAAMV,KAAKM,mBAAqBI,EAAMtB,UAAUuB,EAAQR,mBAAmBS,KAC3EF,EAAMtB,UAAUuB,EAAQR,mBAAmBS,KAAO,IAElDF,EAAMV,KAAKM,mBAAqBI,EAAMtB,UAAUuB,EAAQR,mBAAmBS,KAC3EF,EAAMtB,UAAUuB,EAAQR,mBAAmBS,MAAQD,EAAQmB,IAAM/C,EACjE2B,EAAMV,KAAKM,mBAAqBI,EAAMtB,UAAUuB,EAAQR,mBAAmBS,OAGnFmB,YAAa,SAACrB,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACnBD,EAAMtB,UAAYuB,GAGtBqB,YAAa,SAACtB,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACnBD,EAAMV,KAAKG,kBAAoBQ,GAEnCsB,kBAAmB,SAACvB,GAChBA,EAAMV,KAAKG,mBAAqB,GAEpC+B,KAAM,SAACxB,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACZD,EAAMtB,UAAUuB,EAAQR,mBAAmBU,eAAiBF,EAAQwB,QACpEzB,EAAMV,KAAKO,uBAAyBI,EAAQwB,QAExCzB,EAAMtB,UAAUuB,EAAQR,mBAAmBU,cAAgB,IAC3DH,EAAMtB,UAAUuB,EAAQR,mBAAmBU,cAAgB,GAE3DH,EAAMV,KAAKO,sBAAwB,IACnCG,EAAMV,KAAKO,sBAAwB,IAG3C6B,eAAgB,SAAC1B,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACtBD,EAAMtB,UAAUuB,GAAS0B,WAAY,EAErC3B,EAAMV,KAAKO,uBAAyBG,EAAMtB,UAAUuB,GAASE,cAC7DH,EAAMV,KAAKO,uBAAyBG,EAAMtB,UAAUuB,GAASC,KAE7DF,EAAMtB,UAAUuB,GAASE,cAAgBH,EAAMtB,UAAUuB,GAASC,MAEtE0B,gBAAiB,SAAC5B,EAAD,GAAyB,IAAfC,EAAc,EAAdA,aACH4B,IAAhB5B,EAAQmB,IAAmBpB,EAAMtB,UAAUuB,EAAQ6B,KAAKH,UAAY1B,EAAQmB,IAC3EpB,EAAMtB,UAAUuB,EAAQ6B,KAAKH,WAAa3B,EAAMtB,UAAUuB,EAAQ6B,KAAKH,WAEhFI,yBAA0B,SAAC/B,GACvBA,EAAMV,KAAKI,oBAAsBM,EAAMV,KAAKI,oBAEhDsC,kBAAmB,SAAChC,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACzBD,EAAMtB,UAAUkC,SAAQ,SAACL,GACjBA,EAAEC,KAAOP,IACLM,EAAEE,aACFT,EAAMV,KAAKO,uBAAyBU,EAAEJ,gBACpCH,EAAMV,KAAKK,sBAEbK,EAAMV,KAAKO,uBAAyBU,EAAEJ,gBACpCH,EAAMV,KAAKK,qBAGjBY,EAAEE,aAAeF,EAAEE,iBAI/BwB,oBAAqB,SAACjC,GAClB,IAA4C,IAAxCA,EAAMV,KAAKE,wBAAgC,CAC3C,IAAK,IAAIe,EAAIP,EAAMV,KAAKE,wBAAyBe,EAAIP,EAAMtB,UAAUgC,OAAQH,IACxC,OAA7BP,EAAMtB,UAAU6B,GAAGS,OAAgBhB,EAAMrB,OAAOqB,EAAMtB,UAAU6B,GAAGS,OAAOnC,QAE9EmB,EAAMV,KAAKM,mBAAqBI,EAAMtB,UAAU6B,GAAGL,KAGvDF,EAAMtB,UAAUgC,OAASV,EAAMV,KAAKE,wBACpCQ,EAAMV,KAAKE,yBAA2B,EACtCQ,EAAMV,KAAKK,oBAAsB,IAGzCuC,iBAAkB,SAAClC,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACC,OAArBA,EAAQkC,UAAmBnC,EAAMrB,OAAOsB,EAAQkC,UAAUtD,QACrC,OAArBoB,EAAQmC,UAAmBpC,EAAMrB,OAAOsB,EAAQmC,UAAUvD,SAElEwD,mBAAoB,cAAc,EAAX/C,KACZC,WAEX+C,UAAW,SAACtC,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACbO,EAAKP,EAAQO,GAEjB,GAAIP,EAAQsC,iBACR,IAA4C,IAAxCvC,EAAMV,KAAKE,wBAAgC,CAC3CQ,EAAMV,KAAKE,wBAA0BQ,EAAMtB,UAAUgC,OAAS,EAE9D,IADA,IAAI8B,GAAQ,EACHjC,EAAI,EAAGA,EAAIP,EAAMtB,UAAUgC,OAAS,EAAGH,IAC5C,GAAIiC,EAAO,CACP,IAAIC,EAAOzC,EAAMtB,UAAU6B,GAC3BP,EAAMtB,UAAU6B,GAAKP,EAAMtB,UAAU6B,EAAI,GACzCP,EAAMtB,UAAU6B,EAAI,GAAKkC,OACtB,GAAIzC,EAAMtB,UAAU6B,GAAGC,KAAOA,EAAI,CACrCgC,GAAQ,EACR,IAAIC,EAAOzC,EAAMtB,UAAU6B,GAC3BP,EAAMtB,UAAU6B,GAAKP,EAAMtB,UAAU6B,EAAI,GACzCP,EAAMtB,UAAU6B,EAAI,GAAKkC,EAGjCzC,EAAMV,KAAKE,wBAA0BQ,EAAMtB,UAAUgC,OAAS,MAC3D,CAEH,IADA,IAAIgC,EAAMZ,EACDvB,EAAI,EAAGA,EAAIP,EAAMtB,UAAUgC,OAAQH,IACxC,GAAIP,EAAMtB,UAAU6B,GAAGC,KAAOA,EAAI,CAC9BkC,EAAO1C,EAAMtB,UAAU6B,GACvBuB,EAAMvB,EACN,MAIR,IADA,IAAIoC,GAAO,EACFpC,EAAIP,EAAMV,KAAKE,wBAAyBe,EAAIP,EAAMtB,UAAUgC,OAAQH,IACzE,KAAIP,EAAMtB,UAAU6B,GAAGhB,UAAYmD,EAAKnD,WAAxC,CAEIoD,EAAMpC,EACN,OAIK,IAAToC,EACA3C,EAAMtB,UAAUkE,KAAKF,GAErB1C,EAAMtB,UAAUmE,OAAOF,EAAK,EAAGD,GAEnC1C,EAAMtB,UAAUmE,OAAOf,EAAK,GAC5B9B,EAAMV,KAAKE,yBAA2B,MAEvC,CACH,GAA0C,GAAtCQ,EAAMV,KAAKE,wBAA8B,CAEzC,IADA,IAAIkD,EAAMZ,EACDvB,EAAIP,EAAMV,KAAKE,wBAAyBe,EAAIP,EAAMtB,UAAUgC,OAAQH,IACzE,GAAIP,EAAMtB,UAAU6B,GAAGC,KAAOA,EAAI,CAC9BkC,EAAO1C,EAAMtB,UAAU6B,GACvBuB,EAAMvB,EACN,MAIRP,EAAMtB,UAAUmE,OAAOf,EAAK,GAC5B9B,EAAMtB,UAAU0B,QAAQsC,GACxB1C,EAAMV,KAAKE,wBAA0B,MAClC,CAEH,IADA,IAAIkD,EAAMZ,EACDvB,EAAIP,EAAMV,KAAKE,wBAAyBe,EAAIP,EAAMtB,UAAUgC,OAAQH,IACzE,GAAIP,EAAMtB,UAAU6B,GAAGC,KAAOA,EAAI,CAC9BkC,EAAO1C,EAAMtB,UAAU6B,GACvBuB,EAAMvB,EACN,MAMR,IAFA,IACIoC,GAAO,EACFpC,EAFGP,EAAMV,KAAKE,wBAA0B,EAE7Be,GAAK,EAAGA,IACxB,KAAIP,EAAMtB,UAAU6B,GAAGhB,UAAYmD,EAAKnD,WAAxC,CAEIoD,EAAMpC,EACN,MAIRP,EAAMtB,UAAUmE,OAAOf,EAAK,IACf,IAATa,EACA3C,EAAMtB,UAAU0B,QAAQsC,IAExBC,IACA3C,EAAMtB,UAAUmE,OAAOF,EAAK,EAAGD,IAEnC1C,EAAMV,KAAKE,yBAA2B,EAGtCQ,EAAMV,KAAKE,yBAA2BQ,EAAMtB,UAAUgC,SACtDV,EAAMV,KAAKE,yBAA2B,KAIlDsD,sBAAuB,cAAkC,IAA/B5D,EAA8B,EAA9BA,WAAgBe,EAAc,EAAdA,QACtCf,EAAWC,MAAQc,GAEvB8C,sBAAuB,cAAkC,IAA/B7D,EAA8B,EAA9BA,WAAgBe,EAAc,EAAdA,QACtCf,EAAWE,UAAYa,GAE3B+C,uBAAwB,cAAkC,IAA/B9D,EAA8B,EAA9BA,WAAgBe,EAAc,EAAdA,QACvCf,EAAWG,OAASY,M,EA2B5B3B,EAAW2E,QArBXlD,E,EAAAA,OACAM,E,EAAAA,OACAM,E,EAAAA,kBACAI,E,EAAAA,gBACAE,E,EAAAA,eACAE,E,EAAAA,oBACAG,E,EAAAA,YACAC,E,EAAAA,kBACAC,E,EAAAA,KACAE,E,EAAAA,eACAE,E,EAAAA,gBACAG,E,EAAAA,yBACAC,E,EAAAA,kBACAC,E,EAAAA,oBACAZ,E,EAAAA,YACAa,E,EAAAA,iBACAG,E,EAAAA,mBACAC,E,EAAAA,UACAQ,E,EAAAA,sBACAC,E,EAAAA,sBACAC,E,EAAAA,uBAGW1E,IAAf,QC1RA,IAAM4E,EAAsB,SAACC,EAASC,GAClC,IAAIC,EAAWC,KAAKC,MASpB,OAAOC,aARa,WAChB,IAAIC,EAA0BH,KAAKC,MAAQF,EAC3CK,QAAQC,IAAI,4BAA4BF,GACpCA,EAA0B,MAC1BJ,EAAWC,KAAKC,MAChBJ,EAAQM,MAGgBL,I,QCrCvBQ,EAAY,WACrB,OACI,qBAAKC,MAAM,6BAA6BC,KAAK,OAAOC,QAAQ,YAAYC,OAAO,eAA/E,SACI,sBACIC,cAAc,QACdC,eAAe,QACfC,YAAa,EACbC,EAAE,mHAMLC,EAAkB,WAC3B,OACI,qBAAKR,MAAM,6BAA6BE,QAAQ,YAAYD,KAAK,eAAjE,SACI,sBACIQ,SAAS,UACTF,EAAE,wIACFG,SAAS,eAMZC,EAAmB,WAC5B,OACI,qBAAKX,MAAM,6BAA6BE,QAAQ,YAAYD,KAAK,eAAjE,SACI,sBACIQ,SAAS,UACTF,EAAE,qHACFG,SAAS,eC9CV,MAA0B,iC,QCAlC,SAASE,EAAoBC,GAEhC,IAAIC,GADJD,EAAIE,KAAKC,MAAMH,EAAE,MACF,GACXI,EAAOF,KAAKC,MAAMH,EAAG,IAazB,OAXY,GAARC,EACAA,EAAI,KACGA,EAAO,KACdA,EAAI,WAAOA,IAEH,GAARG,EACAA,EAAI,KACGA,EAAO,KACdA,EAAI,WAAOA,IAGT,GAAN,OAAUA,EAAV,YAAkBH,GAkCf,SAASI,EAA4BL,GACxCA,EAAIE,KAAKC,MAAMH,EAAE,KACjB,IAAII,EAAOF,KAAKC,MAAOH,EAAI,KAAQ,IAC/BM,EAAQJ,KAAKC,MAAMH,EAAI,MAa3B,OAXY,GAARI,EACAA,EAAI,IACGA,EAAO,KACdA,EAAI,WAAOA,IAEF,GAATE,EACAA,EAAK,IACEA,EAAQ,KACfA,EAAK,UAAMA,IAGR,CAAEA,QAAOF,Q,2sGCtDpB,IAAIG,GAAmB,IAAIC,MAAMC,GAE3BC,GAAkB7H,IAAOC,IAAV,MAWf6H,GAAqB9H,IAAOC,IAAV,MAalB8H,GAAsB/H,IAAOC,IAAV,MAuBnB+H,GAAoBhI,IAAOC,IAAV,MASjBgI,GAAoBjI,IAAOC,IAAV,MAaN,SAACiI,GAAD,OAAQA,EAAEC,WAAa,UAAY,UAU9CC,GAAyBpI,IAAOC,IAAV,MAUtBoI,GAAqBrI,IAAOC,IAAV,MAYD,SAACiI,GAAD,OAAQA,EAAEI,UAAY,MAAQ,OAK/CC,GAAsBvI,IAAOC,IAAV,MASnBuI,GAAiBxI,IAAOC,IAAV,KAKI,SAACiI,GAAD,OAAQA,EAAEC,WAAa,UAAY,aAO7C,SAACD,GAAD,OAAQA,EAAEC,WAAa,UAAY,aAO1C,SAASM,KACZ,IAAMvG,EAAoBwG,aAAY,SAACC,GAAD,OAAWA,EAAMlG,MAAMV,KAAKG,qBAC9D0G,EAAeF,aAAY,SAACC,GAAD,OAAmC,IAAvBzG,EAA2ByG,EAAMlG,MAAMtB,UAAUe,GAAqB,QAC3G2G,EAAWC,cA6BjB,SAASC,EAAsBlF,GACvB+E,EAAa1F,cACb0F,EAAaxE,WAAWyE,EAASxE,EAAgB,CAAEE,IAAKrC,KAC5D2G,EAASjF,EAAoB,CAAE1B,oBAAmB2B,SAClDgF,EAASrD,GAAsB,MJlKhC,SAAmBwD,EAAUnD,GAChC,IAAMoD,EAAgBC,mBAGtBC,qBAAU,WACNF,EAAcG,QAAUJ,IACzB,CAACA,IAGJG,qBAAU,WAIN,GAAc,OAAVtD,EAAgB,CAChB,IAAI5C,EAAK0C,GAJb,SAAczB,GACV+E,EAAcG,QAAQlF,KAGa2B,GACnC,OAAO,kBAAMwD,cAAcpG,OAEhC,CAAC4C,II+HJyD,EACI,SAACpF,GACwB,OAAjB0E,IACKA,EAAahG,cAAgB,EAClCiG,EAAS5E,EAAK,CAAC/B,oBAAkBgC,aACK,IAA/B0E,EAAahG,gBACpBiG,EAASrD,GAAsB,IAC/BqD,EAASxE,EAAgB,CAAEE,IAAKrC,KAChCwF,GAAiB6B,WAGR,OAAjBX,GAAyBA,EAAaxE,UAzB5B,KAyBgD,MAmB9D,IAAMoF,EDjLH,SAA+BrC,GAElC,IAAIC,GADJD,EAAIE,KAAKC,MAAMH,EAAE,MACF,GACXI,EAAOF,KAAKC,MAAMH,EAAG,IAazB,OAXY,GAARC,EACAA,EAAI,KACGA,EAAO,KACdA,EAAI,WAAOA,IAEH,GAARG,EACAA,EAAI,KACGA,EAAO,KACdA,EAAI,WAAOA,IAGR,CAAEA,OAAMH,QCiKMqC,CAAsBb,EAAahG,eACpD8G,EAAgBF,EAAajC,KAC7BoC,EAAgBH,EAAapC,KAEjC,OACI,eAACS,GAAD,WAEI,eAACC,GAAD,WACI,cAACE,GAAD,UACI,qBAAK3H,MAAO,CAAEE,MAAO,IAAKD,OAAQ,KAAlC,SACI,cAAC,IAAD,CACIsJ,MAA6B,IAAtBhB,EAAajG,KAAa0E,KAAKC,MAAOsB,EAAahG,cAAgBgG,EAAajG,KAAQ,KAAO,EACtGkH,OAAQC,YAAY,CAChBpD,cAAe,OACfqD,UAAW,UACXC,WAAY,YAEhBpD,YAAa,EAPjB,SASI,eAACqB,GAAD,WACI,4BAAIyB,IACJ,qCACA,4BAAIC,IACJ,8CAMhB,eAACvB,GAAD,WACI,cAACG,GAAD,CAAqB0B,QAAS,kBAAMlB,EAAsB,IAA1D,SACI,sCAEJ,cAACV,GAAD,CAAoBC,WAAYM,EAAaxE,UAAW6F,QAAS,kBA1CjF,SAA0B/H,EAAmBgI,GACzCrB,EAASxE,EAAgB,CAAEE,IAAKrC,KAE5B2G,EAASrD,GADT0E,IAwC+EC,CAAiBjI,EAAmB0G,EAAaxE,YAAxH,SACKwE,EAAaxE,UAAY,cAAC,IAAD,IAAsB,cAAC,IAAD,MAGpD,cAACmE,GAAD,CAAqB0B,QAAS,kBAAMlB,GAAuB,IAA3D,SACI,yCAIR,cAACP,GAAD,CACIyB,QAAS,WACLpB,EAASrD,GAAsB,IAC/BqD,EAAS1E,EAAejC,KAHhC,SAMI,cAAC,EAAD,SAGR,cAAC6F,GAAD,UACI,4BAAIa,EAAatF,e,ghGC9OjC,IAAMuE,GAAkB7H,IAAOC,IAAV,MAWf6H,GAAqB9H,IAAOC,IAAV,MAalB8H,GAAsB/H,IAAOC,IAAV,MAkBnB+H,GAAoBhI,IAAOC,IAAV,MASjBgI,GAAoBjI,IAAOC,IAAV,MAaN,SAACiI,GAAD,OAAQA,EAAEC,WAAa,UAAY,UAU9CC,GAAyBpI,IAAOC,IAAV,MAUtBoI,GAAqBrI,IAAOC,IAAV,MAYD,SAACiI,GAAD,OAAQA,EAAEI,UAAY,MAAQ,OAIzBtI,IAAOC,IAAV,MAQFD,IAAOC,IAAV,MAKI,SAACiI,GAAD,OAAQA,EAAEC,WAAa,UAAY,aAapD,SAASiC,KAEZ,OACI,eAAC,GAAD,WACI,eAAC,GAAD,WACI,cAAC,GAAD,UACI,qBAAK/J,MAAO,CAAEE,MAAO,IAAKD,OAAQ,KAAlC,SACI,cAAC,IAAD,CACIsJ,MAAO,IACPC,OAAQC,YAAY,CAChBC,UAAW,UACXC,WAAY,YAEhBpD,YAAa,EANjB,SAQI,eAAC,GAAD,WACI,mCACA,qCACA,mCACA,8CAMhB,cAAC,GAAD,UACI,eAAC,GAAD,CAAoByD,WAAS,GAAGC,WAAS,SAAzC,UACI,cAAC,KAAD,IACA,cAAC,KAAD,CAAcrH,GAAG,SAASsH,WAAY,iBAAI,2BAKtD,cAAC,GAAD,UACI,cAAC,KAAD,S,YC1KD,OAA0B,iCCA1B,OAA0B,kCCA1B,OAA0B,kCCA1B,OAA0B,mCCA1B,OAA0B,sCCA1B,OAA0B,iCCA1B,OAA0B,kCCA1B,OAA0B,sCCA1B,OAA0B,kCCW5BC,GAAe,CACxBC,UAAW,CACPtK,IAAKsK,GACLC,IAAKC,GACLlH,MAAO,SAEXmH,MAAO,CACHzK,IAAKyK,GACLF,IAAKG,GACLpH,MAAO,SAEXqH,KAAM,CACF3K,IAAK2K,GACLJ,IAAKK,GACLtH,MAAO,QAEXuH,OAAQ,CACJ7K,IAAK8K,GACLP,IC7BO,IAA0B,mCD8BjCjH,MAAO,UAEXyH,MAAO,CACH/K,IAAK+K,GACLR,IAAKS,GACL1H,MAAO,U,6JE5BYzD,IAAOC,IAAV,MAOjB,SAASmL,GAAT,GAA6C,IAAfjD,EAAc,EAAdA,WAC3BkD,EAAW3C,aAAY,SAAC4C,GAAD,OAAOA,EAAE7I,MAAMd,WAAWG,UACjD+G,EAAWC,cAF8B,EAGnByC,mBAAoB,IAAXF,GAHU,oBAGxCvJ,EAHwC,KAGhC0J,EAHgC,KAKzCC,EdkDH,SAAkBC,EAAIC,GACzB,IAAIC,EACJ,OAAO,WAAa,IAAD,mBACfC,aAAaD,GACbA,EAAIE,YAAW,kBAAMJ,EAAGK,MAAM,EAAMC,KAAYL,IctDZM,EAAS,SAACC,GAC9CrD,EAASpD,EAAuByG,EAAM,QACvC,KAOH,OACI,mCACI,cAAC,KAAD,CACIC,KAAK,IACLC,SAAUjE,EACVkE,MAAO,EACPC,KAAM,EACNC,KAAM,IACNpF,EAAGrF,EACH0K,SAAU,gBAdSN,EAcN/E,EAAH,EAAGA,EAAH,OAblBqE,EAD2BU,EAcwB/E,QAZnDsE,EAAgCS,IAaxBrC,OAAQ,CACJjI,MAAO,CACH6K,gBAAiB,UACjBlM,MAAO,QAEXmM,OAAQ,CACJD,gBAAiB,WAErBL,SAAU,CACNO,QAAS,S,y6DCxCjC,IAAMC,GAAuB5M,IAAOC,IAAV,MAkBpB4M,GAAiB7M,IAAOC,IAAV,MAed6M,GAAkB9M,IAAOC,IAAV,MASf8M,GAAoB/M,IAAOC,IAAV,MAoBN,SAACiI,GAAD,OAAQA,EAAE8E,gBAAkB,UAAY,aAKnDC,GAAqBjN,IAAOC,IAAV,MASjB,SAASiN,KACZ,IAAMvL,EAAa+G,aAAY,SAAC4C,GAAD,OAAOA,EAAE7I,MAAMd,cACxCkH,EAAWC,cAFS,EAIkCyC,oBAAS,kBHhDlE,SAA8B4B,GACjC,IAAIC,EAAe,IAAIzF,MAAM6C,GAAa2C,GAAWhN,KAErD,OADAiN,EAAaC,MAAO,EACbD,EG6CoEE,CAAqB3L,EAAWC,MAAOD,EAAWG,WAJnG,oBAInByL,EAJmB,UA2B1B,OAnBApE,qBAAU,WACNoE,EAAuBpN,IAAMqK,GAAa7I,EAAWC,OAAOzB,MAC7D,CAACwB,EAAWC,MAAO2L,EAAwB5L,EAAWE,YAEzD0L,EAAuBzL,OAASH,EAAWG,OAC3CyL,EAAuBC,iBAAiB,WAAW,WAC3C7L,EAAWE,UACX0L,EAAuBhE,OAEvBgE,EAAuBE,WAW3B,eAACb,GAAD,WACI,eAACC,GAAD,WACI,4CACA,cAACC,GAAD,UACKY,OAAOC,KAAKnD,IAAcoD,KAAI,SAAC5K,GAAD,OAC3B,eAAC+J,GAAD,CAA2B9C,QAAS,kBAAMpB,EAAStD,EAAsBvC,KAAKgK,iBAVzEpL,EAU0GoB,EATxHrB,EAAWC,QAAUA,GASZ,UACI,qBAAKzB,IAAKqK,GAAaxH,GAAG0H,IAAKlK,IAAKwC,IACpC,+BAAOwH,GAAaxH,GAAGS,UAFHT,GAV5C,IAAyBpB,UAiBjB,cAACqL,GAAD,UACI,cAAC7B,GAAD,S,+vBCvHGpL,IAAOC,IAAV,MAUQD,IAAOC,IAAV,MAWDD,IAAOC,IAAV,M,47BCjBjB,IAAM4N,GAAsB7N,IAAOC,IAAV,MAWnB6N,GAAwB9N,IAAOC,IAAV,MAYrB8N,GAAoB/N,IAAOC,IAAV,MAahB,SAAS+N,KACZ,IAAM9L,EAAoBwG,aAAY,SAACC,GAAD,OAAWA,EAAMlG,MAAMV,KAAKG,qBAC1CwG,aAAY,SAAC4C,GAAD,OAAOA,EAAE7I,MAAMtB,UAAUgC,UAC7D,OACI,eAAC0K,GAAD,WACI,cAACC,GAAD,WAE4B,IAAvB5L,EAA2B,cAACuG,GAAD,IAAmB,cAAC2B,GAAD,MAEnD,cAAC2D,GAAD,UACI,cAACb,GAAD,S,+PClDhB,IAAMe,GAAmBjO,IAAOC,IAAV,MAWf,SAASiO,KACZ,OACI,eAACD,GAAD,CAAkB5D,WAAS,GAAGC,WAAS,gBAAvC,UACI,cAAC,KAAD,IACA,cAAC,KAAD,CAAcrH,GAAG,gBAAgBsH,WAAY,iBAAM,yBCdxD,SAAS4D,KACZ,IAAM/M,EAASsH,aAAY,SAAC4C,GAAD,OAAOA,EAAE7I,MAAMrB,UACpCgN,EAAkB1F,aAAY,SAAC4C,GAAD,OAAOA,EAAE7I,MAAMtB,UAAUgC,UAFtC,EAISoI,mBAAS,GAJlB,oBAIhB8C,EAJgB,KAINC,EAJM,OAKO/C,wBAASjH,GALhB,oBAKhBiK,EALgB,KAKPC,EALO,KAOnBC,EAAqB,EAErBC,EAAYhB,OAAOC,KAAKvM,GAAQuN,QAAO,SAACC,EAAU5L,GASlD,OARI5B,EAAO4B,GAAG1B,MAAQ,IAClBmN,GAAsBrN,EAAO4B,GAAG1B,MAChCsN,EAASvJ,KAAK,CACVwJ,QAAQ,IAAD,OAAM7L,EAAN,cAAa5B,EAAO4B,GAAG1B,MAAvB,UACPsI,MAAOxI,EAAO4B,GAAG1B,MACjBX,MAAOS,EAAO4B,GAAGrC,SAGlBiO,IACR,IAECR,EAAkBK,EAAqB,GACvCC,EAAUrJ,KAAK,CACXwJ,QAAQ,cAAD,OAAgBT,EAAkBK,EAAlC,UACP7E,MAAOwE,EAAkBK,EACzB9N,MAAO,SAIf+N,EAAYA,EAAUd,KAAI,SAAC5K,EAAGuB,GAC1B,OAAIgK,IAAYhK,GACZvB,EAAErC,MAAQ,UACHqC,GACGA,KAKlB,OACI,sBAAK3C,MAAO,CAAEE,MAAO,KAAO8J,WAAS,GAAGC,WAAS,gBAAjD,UAC4B,IAAvBmE,EACG,cAAC,YAAD,CACIpO,MAAO,CACHyO,SAAU,OACVC,WAAY,QAEhBC,KAAMN,EACNO,OAAQC,YAASC,aAAaF,OAAS,EACvCG,UAZE,GAaFC,cAAe,CAAEC,WAAY,aAAcC,OAAQ,WACnDC,cAAe,EACfC,SAAO,EACPhM,MAAO,qBAAGiM,UAA0B9F,OACpC+F,cAAe,GACfC,WAAY,CACRrJ,KAAM,OACNsJ,cAAe,QAEnB5F,QAAS,SAAC6F,EAAGC,GACTzB,EAAYyB,IAAU1B,OAAW/J,EAAYyL,IAEjDC,YAAa,SAACF,EAAGC,GACbvB,EAAWuB,IAEfE,WAAY,WACRzB,OAAWlK,MAInB,cAAC4J,GAAD,IAEJ,cAAC,KAAD,CAAcjL,GAAG,gBAAgBsH,WAAY,iBAA0B,kBAAZgE,EAAuBG,EAAUH,GAASM,QAAU,W,+9CCvE3H,IAAMqB,GAAkBlQ,IAAOC,IAAV,MASfkQ,GAAkBnQ,IAAOC,IAAV,MASfmQ,GAAwBpQ,IAAOC,IAAV,MAgBrBoQ,GAAgBrQ,IAAOC,IAAV,MASbqQ,GAAUtQ,IAAOC,IAAV,MAQPsQ,GAAiBvQ,IAAOC,IAAV,MAOduQ,GAAiBxQ,IAAOC,IAAV,MAGI,SAACiI,GAAD,OAAOA,EAAEvH,SAI1B,SAAS8P,KACZ,IAAMrO,EAAsBsG,aAAY,SAAC4C,GAAD,OAAOA,EAAE7I,MAAMV,KAAKK,uBACtDgM,EAAkB1F,aAAY,SAAC4C,GAAD,OAAOA,EAAE7I,MAAMtB,UAAUgC,UACzDuN,EAA4C,IAApBtC,EAAwB/G,KAAKC,MAAOlF,EAAsBgM,EAAmB,KAAO,GAE1G9L,EAAwBoG,aAAY,SAAC4C,GAAD,OAAOA,EAAE7I,MAAMV,KAAKO,yBACxDD,EAAoBqG,aAAY,SAAC4C,GAAD,OAAOA,EAAE7I,MAAMV,KAAKM,qBACtDsO,EAA8C,IAAtBtO,EAA0BgF,KAAKC,OAAQjF,EAAoBC,GAAyBD,EAAqB,KAAO,GAE5I,OACI,eAAC6N,GAAD,WACI,cAACC,GAAD,UACI,qBAAK9P,MAAO,CAAEE,MAAO,IAAKD,OAAQ,KAAlC,SACI,cAAC,IAAD,CACIsJ,MAAO8G,EACP7G,OAAQC,YAAY,CAChBC,UAAW,UACXC,WAAY,YAEhBpD,YAAa,GANjB,SAQI,qBAAKvG,MAAO,CAAEE,MAAO,GAAID,OAAQ,IAAjC,SACI,cAAC,IAAD,CACIsJ,MAAO+G,EACP9G,OAAQC,YAAY,CAChBC,UAAW,UACXC,WAAY,YAEhBpD,YAAa,aAMjC,eAACwJ,GAAD,WACI,yCACA,eAACC,GAAD,WACI,cAACG,GAAD,CAAgB7P,MAAM,YACtB,cAAC2P,GAAD,UACI,wCAKJ,cAACC,GAAD,UACI,iCAAOG,EAAP,YAGR,eAACL,GAAD,WACI,cAACG,GAAD,CAAgB7P,MAAM,YACtB,cAAC2P,GAAD,UACI,uCAEJ,cAACC,GAAD,UACI,iCAAOI,EAAP,kB,q0CCvHxB,IAAMC,GAAe5Q,IAAOC,IAAV,MAeZ4Q,GAAmB7Q,IAAOC,IAAV,MAchB6Q,GAAmB9Q,IAAOC,IAAV,MAchB8Q,GAAe/Q,IAAOC,IAAV,MAcX,SAAS+Q,KACZ,IAAM3O,EAAoBqG,aAAY,SAACC,GAAD,OAAWA,EAAMlG,MAAMV,KAAKM,qBAG5D4O,EAAUzJ,EAFckB,aAAY,SAACC,GAAD,OAAWA,EAAMlG,MAAMV,KAAKO,0BAGlE4O,EAAYD,EAAQxJ,MACpB0J,EAAWF,EAAQ1J,KAEjB6J,EAAU5J,EAA4BnF,GACxCgP,EAAYD,EAAQ3J,MACpB6J,EAAWF,EAAQ7J,KACvB,OACI,eAACqJ,GAAD,WACI,eAACC,GAAD,WACI,eAACC,GAAD,WACI,4BAAII,IACJ,qCACA,4BAAIC,IACJ,wCAGJ,qDAEJ,eAACN,GAAD,WACI,eAACC,GAAD,WACI,4BAAIO,IACJ,qCACA,4BAAIC,IACJ,wCAEJ,iDAEJ,cAACP,GAAD,UACI,cAAC,EAAD,S,wmCC1FhB,IAAMH,GAAe5Q,IAAOC,IAAV,MAeZ4Q,GAAmB7Q,IAAOC,IAAV,MAkBhBsR,GAAcvR,IAAOC,IAAV,MAeV,SAASuR,KACZ,IAAMpP,EAAsBsG,aAAY,SAAC4C,GAAD,OAAOA,EAAE7I,MAAMV,KAAKK,uBACtDgM,EAAkB1F,aAAY,SAAC4C,GAAD,OAAOA,EAAE7I,MAAMtB,UAAUgC,UAE7D,OACI,eAAC,GAAD,WACI,eAAC,GAAD,WACI,4BAAIf,IACJ,iDAEJ,eAAC,GAAD,WACI,4BAAIgM,IACJ,kDAEJ,cAACmD,GAAD,UACI,cAAC,EAAD,S,4qEC7DhB,IAAME,GAAqBzR,IAAOC,IAAV,MAYlByR,GAAuB1R,IAAOC,IAAV,MAqBpB0R,GAAwB3R,IAAOC,IAAV,MAUrB2R,GAAwB5R,IAAOC,IAAV,MAarB4R,GAAoB7R,IAAOC,IAAV,MAoBhB,SAAS6R,KACZ,OACI,eAACL,GAAD,WACI,eAACC,GAAD,WACI,cAACC,GAAD,UACI,cAAClB,GAAD,MAEJ,eAACmB,GAAD,WACI,cAACJ,GAAD,IACA,cAACR,GAAD,UAIR,cAACa,GAAD,UACI,cAAC1D,GAAD,S,yMC7FhB,IAAM4D,GAAyB/R,IAAOC,IAAV,MAQrB,SAAS+R,KACZ,OACI,eAACD,GAAD,WACI,cAACD,GAAD,IACA,cAAC9D,GAAD,O,2KCZZ,IAAMiE,GAAqBjS,IAAOC,IAAV,MAOT,SAASiS,KACpB,OACI,eAACD,GAAD,WACI,cAACpR,EAAD,IACA,cAACmR,GAAD,O,wCChBG,OAA0B,iCCA1B,OAA0B,qCCA1B,OAA0B,qC,oNCIzC,IAAMG,GAAkBnS,IAAOoS,OAAV,MAUN,SAASC,GAAUnK,GAC9B,IAAM9G,EAASsH,aAAY,SAAC4C,GAAD,OAAOA,EAAE7I,MAAMrB,UADT,EAEOmK,mBAASrD,EAAEoK,WAFlB,oBAE1BC,EAF0B,KAEZC,EAFY,KAIjC,OAEI,cADA,CACCL,GAAD,CACAM,WAAS,EACLxR,KAAK,SACLyR,OAAQ,kBAAMxK,EAAEwK,OAAOxK,EAAEyK,OAAOzK,EAAEoK,UAAWC,IAC7CK,aAAcL,EACd/F,SAAU,SAACqG,GAAD,OAAOL,EAAgBK,EAAEC,OAAOlJ,QAC1CmJ,UAAW,SAACF,GAAD,MAAkB,UAAVA,EAAEG,IAAkB9K,EAAEwK,OAAOxK,EAAEyK,OAAOzK,EAAEoK,UAAWC,GAAgB,MAN1F,UAQI,wBAAQ3I,MAAM,OAAd,kBAEC8D,OAAOC,KAAKvM,GAAQwM,KAAI,SAACiF,EAAGtO,GAAJ,OACrB,wBAAQlE,MAAO,CAACM,MAAM,GAAD,OAAIS,EAAOyR,GAAGlS,QAAoBiJ,MAAOiJ,EAA9D,SACKA,GAD6CtO,S,++HCjBlE,IAAM0O,GAAoBjT,IAAOC,IAAV,MAYjBiT,GAAmBlT,IAAOC,IAAV,MAgBhBkT,GAAcnT,IAAOC,IAAV,MAOG,SAACiI,GAAD,OATmD,QAA/BkL,EASkBlL,EAAEkL,YATJ,oBAAmCA,GAAe,OAAnE,IAACA,KAWd,SAAClL,GAAD,OAAQA,EAAEmL,WAAa,2BAA6B,sCAC5D,SAACnL,GAAD,OAAQA,EAAEmL,WAAa,2BAA6B,sCAGhEC,GAAgBtT,IAAOC,IAAV,MAgBF,SAACiI,GAAD,OAAQA,EAAEhF,YAAc,OAAS,UAI5CqQ,GAAiBvT,IAAOC,IAAV,MAUduT,GAAiBxT,IAAOC,IAAV,MAedwT,GAAgBzT,IAAO0T,SAAV,MAebC,GAAgB3T,IAAO4T,MAAV,MAabC,GAAmB7T,IAAOC,IAAV,MAqBhB6T,GAAqB9T,IAAOC,IAAV,MAaP,SAACiI,GAAD,OAAyB,OAAjBA,EAAEkL,WAAsBlL,EAAEkL,WAAa,aAM1DW,GAAmB/T,IAAOC,IAAV,MAUhB+T,GAAoBhU,IAAOC,IAAV,MAiBR,SAASgU,GAAT,GAAkH,IAL5GC,EAKc/O,EAA6F,EAA7FA,KAAMgP,EAAuF,EAAvFA,UAAWC,EAA4E,EAA5EA,sBAAuBC,EAAqD,EAArDA,mBAAoBhB,EAAiC,EAAjCA,WAAYnR,EAAqB,EAArBA,kBACjG2G,EAAWC,cAD2G,EAGlFyC,oBAAS,GAHyE,oBAGrH+I,EAHqH,KAGtGC,EAHsG,OAIxEhJ,mBAASpG,EAAK7B,SAJ0D,oBAIrHC,EAJqH,KAIjGiR,EAJiG,OAKlFjJ,oBAAS,GALyE,oBAKrHkJ,EALqH,KAKtGC,EALsG,OAMtFnJ,mBAASlE,KAAKC,MAAMnC,EAAKxC,KAAO,IAAK,KANiD,oBAMrHgB,EANqH,KAMxGgR,EANwG,OAOhFpJ,oBAAS,GAPuE,oBAOrHqJ,EAPqH,KAOrGC,EAPqG,OAQpFtJ,oBAAS,GAR2E,oBAQrHuJ,EARqH,KAQvGC,EARuG,KAUtH3T,EAASsH,aAAY,SAAC4C,GAAD,OAAOA,EAAE7I,MAAMrB,UAsB1C,OACI,cAAC,KAAD,CAAS4T,OAAM,UAAK7P,EAAKlC,IAAzB,SACI,eAACgQ,GAAD,wCACIgC,IAAKZ,EAAmBa,UACpBb,EAAmBc,gBACnBd,EAAmBe,iBAH3B,IAIIC,aAAc,kBAAMN,GAAiB5P,EAAKjC,cAAe,IACzDoS,aAAc,kBAAMP,GAAiB5P,EAAKjC,cAAe,IAL7D,UAOI,cAACgQ,GAAD,UAAmB4B,GAAgB,cAAC,KAAD,MAEnC,eAAC3B,GAAD,CAAaE,WAAYA,EAAYD,WAA2B,OAAfjO,EAAK1B,MAAiBrC,EAAO+D,EAAK1B,OAAO9C,MAAQ,KAAlG,UACI,eAAC2S,GAAD,CAAeD,WAAYA,EAAYnQ,YAAaiC,EAAKjC,YAAzD,UACKiC,EAAKjC,YACF,qBAAK/C,IAAKoV,GAAU/U,IAAI,SACxB6S,EACA,qBAAKlT,IAAKqV,GAAUhV,IAAI,aAExB,qBAAKL,IAAKsV,GAAMjV,IAAI,gBAEtB2E,EAAKjC,cACFuR,EACG,cAACd,GAAD,CACIlB,WAAS,EACT7I,MAAOjG,EACP+O,OAAQ,WACJ7J,EAASnF,EAAe,CAAET,GAAIkC,EAAKlC,GAAIU,iBACvC+Q,GAAiB,IAErB3B,UA3ChC,SAA2BF,GACT,UAAVA,EAAEG,MACFnK,EAASnF,EAAe,CAAET,GAAIkC,EAAKlC,GAAIU,iBACvC+Q,GAAiB,KAyCOlI,SAAU,SAACqG,GAAD,OAAO8B,EAAe9B,EAAEC,OAAOlJ,UAG7C,mBAAG8L,cAAe,kBAAMhB,GAAiB,IAAzC,SAAiDxN,EAAoB/B,EAAKvC,qBAItF,eAAC2Q,GAAD,WACI,cAACC,GAAD,UACKc,EACG,cAACb,GAAD,CACIhB,WAAS,EACT7I,MAAOrG,EACPmP,OAAQ,WACJ7J,EAASzF,EAAkB,CAAEH,GAAIkC,EAAKlC,GAAIM,wBAC1CgR,GAAiB,IAErBxB,UAnEhC,SAAkCF,GAChB,UAAVA,EAAEG,KAAmBzP,EAAmBoS,OAAOxS,QAAU,IACzD0F,EAASzF,EAAkB,CAAEH,GAAIkC,EAAKlC,GAAIM,wBAC1CgR,GAAiB,KAiEO/H,SAAU,SAACqG,GAAD,OAAO2B,EAAsB3B,EAAEC,OAAOlJ,UAGpD,mBAAG8L,cAAe,kBAAMnB,GAAiB,IAAzC,UAxFXL,EAwFwE/O,EAAK7B,QAvF1F4Q,EAAI/Q,QAAU,GAAW+Q,EACjBA,EAAI0B,UAAU,EAAG,IAAM,WA0Ff,eAAC5B,GAAD,YACM7O,EAAKjC,aACH,cAAC2Q,GAAD,CACIgC,WAAW,EACX5L,QACIoJ,EACM,WACQlO,EAAKf,WAAWyE,EAASxE,EAAgB,CAAEE,IAAKrC,KACpD2G,EAAS7E,KACT6E,EAASrD,GAAsB,KAEnC,YAC+B,IAAvBtD,GAA0B2G,EAASxE,EAAgB,CAAEE,IAAKrC,EAAmB2B,KAAK,KACtFgF,EAASrD,GAAsB,IAC/BqD,EAAS9E,EAAYoQ,KAZvC,SAgBI,4BAAId,EAAa,UAAY,YAIrC,cAACQ,GAAD,CACIgC,WAAW,EACX5L,QACI9E,EAAKjC,YACC,SAAC2P,IAC8B,IAAvB3Q,GAA4BkS,EAAwBjP,EAAKnD,WACzD6G,EAAS9E,EAAY7B,EAAoB,IAE7C2G,EAASpE,EAAkBU,EAAKlC,KAChC4F,EAAS9D,EAAU,CAAE9B,GAAIkC,EAAKlC,GAAI+B,kBAAkB,KACpD6N,EAAEiD,mBAEN,SAACjD,GACOsB,EAAYjS,GAAmB2G,EAAS9E,EAAY7B,EAAoB,IACxEiD,EAAKf,WAAWyE,EAASxE,EAAgB,CAAEE,IAAK4P,KAChDd,GAAYxK,EAAS7E,KACzB6E,EAASpE,EAAkBU,EAAKlC,KAChC4F,EAAS9D,EAAU,CAAE9B,GAAIkC,EAAKlC,GAAI+B,kBAAkB,KACjDmP,IAAYjS,GAAkB2G,EAASrD,GAAsB,IAChEqN,EAAEiD,mBAnBpB,SAuBI,4BAAI3Q,EAAKjC,YAAc,SAAW,WAGtC,cAAC4Q,GAAD,CAAoB7J,QAAS,kBAAM4K,GAAkB,IAAOzB,WAA2B,OAAfjO,EAAK1B,MAAiBrC,EAAO+D,EAAK1B,OAAO9C,MAAQ,KAAzH,SACKiU,EACG,cAACvC,GAAD,CAAiBK,OAhHjD,SAAkCC,EAAQL,EAAWC,GACjDsC,GAAkB,GAElBhM,EAASrF,EAAgB,CAAEP,GAAI0P,EAAQlP,MADvC8O,EAAgC,SAAjBA,EAA0B,KAAOA,KAE5CD,IAAcC,GAAc1J,EAASlE,EAAiB,CAAEC,SAAU0N,EAAWzN,SAAU0N,MA4GZI,OAAQxN,EAAKlC,GAAIqP,UAAWnN,EAAK1B,QACrE,OAAf0B,EAAK1B,MACL,kCAAK0B,EAAK1B,SAEV,6CAIN4P,GACE,cAACU,GAAD,CACI9J,QAAS,SAAC4I,GACFsB,EAAYjS,GAAmB2G,EAAS9E,EAAY7B,EAAoB,IAC5E2G,EAAS/F,EAAOqC,EAAKlC,KACF,OAAfkC,EAAK1B,OAAgBoF,EAASlE,EAAiB,CAAEC,SAAUO,EAAK1B,MAAOoB,SAAU,QACrFgO,EAAEiD,mBALV,SAQI,cAAC,IAAD,qB,myDCtVpC,IAAMC,GAAqB/V,IAAOC,IAAV,MAclB+V,GAAsBhW,IAAOC,IAAV,MAcnBgW,GAAwBjW,IAAO4T,MAAV,MAarBsC,GAAmBlW,IAAOC,IAAV,MAgBhBkW,GAAqBnW,IAAO4T,MAAV,MAqBT,SAASwC,KAAa,IAG7BC,EAAqBC,EAHO,EACR/K,mBAAS,IADD,oBACzBpG,EADyB,KACnBoR,EADmB,OAERhL,mBAAS,IAFD,oBAEzB5I,EAFyB,KAEnB6T,EAFmB,KAI1BzU,EAAO2G,aAAY,SAAC4C,GAAD,OAAOA,EAAE7I,MAAMV,QAClCX,EAASsH,aAAY,SAAC4C,GAAD,OAAOA,EAAE7I,MAAMrB,UACpCyH,EAAWC,cAEjB,SAAS2N,EAAW5D,GAChB,GAAc,UAAVA,EAAEG,KAAmB7N,EAAKwQ,OAAOxS,QAAU,EAAG,CAC9C,IAAI+B,EAAOC,EAAKwQ,OAAOe,MAAM,KAEzBC,EAAWhU,EACXc,EAAQ,KACZ,GAAoB,IAAhByB,EAAK/B,OACL,GAAKyT,MAAMC,SAAS3R,EAAKA,EAAK/B,OAAS,MAEhC,GAAiC,MAA7B+B,EAAKA,EAAK/B,OAAS,GAAG,IAAc+B,EAAKA,EAAK/B,OAAS,GAAGA,OAAS,GAAK,aAAa2T,SAAS5R,EAAKA,EAAK/B,OAAS,GAAG,IAAK,CAChI,IAAI4T,EAAY7R,EAAKA,EAAK/B,OAAS,GAAGyS,UAAU,GAAGoB,cAC/C/R,GAAQ,EACZ,IAAK,IAAIgS,KAAc7V,EAGnB,GAFA6D,EAAQgS,EAAWH,SAASC,GAC5B5Q,QAAQC,IAAI2Q,EAAUE,GAClBhS,EAAO,CACPxB,EAAQwT,EACR/R,EAAKgS,MACL,aAVRP,EAAWE,SAAS3R,EAAKgS,OAgBjChS,EAAOA,EAAKiS,KAAK,KACjB,IAAIC,EAAU,CACVnU,GAAIoE,KAAKC,MAAsB,IAAhBD,KAAKgQ,UACpBrV,UAAWD,EAAKC,UAChBsB,QAAS4B,EACTvC,KAAMgU,EACN/T,cAAe+T,EACfvS,WAAW,EACXlB,aAAa,EACboU,WAAW,IAAIvR,MAAOwR,cACtB9T,MAAOA,IAEqB,IAA5B1B,EAAKG,mBAA0B2G,EAAS9E,EAAYhC,EAAKG,kBAAoB,IACjF2G,EAASrG,EAAO4U,IAChBvO,EAAS/D,KACK,OAAVrB,GAAgBoF,EAASlE,EAAiB,CAAEC,SAAU,KAAMC,SAAUpB,KAC1E8S,EAAQ,IACRC,EAAQ,IACRH,EAAoBzM,MAAQ,GAC5B0M,EAAiB1M,MAAQ,GACzByM,EAAoBmB,SAI5B,OACI,eAACzB,GAAD,WACI,eAACC,GAAD,WACI,cAAC,KAAD,CAAkB/L,QAAS,kBAAMoM,EAAoBmB,WACrD,cAACvB,GAAD,CACIwB,KAAK,OACLC,YAAY,yBACZzC,IAAK,SAAC0C,GAAD,OAAStB,EAAsBsB,GACpCnL,SAAU,SAACqG,GAAD,OAAO0D,EAAQ1D,EAAEC,OAAOlJ,QAClCmJ,UAAW0D,OAGnB,eAACP,GAAD,WACI,cAAC,KAAD,CAAmBjM,QAAS,kBAAMqM,EAAiBkB,WACnD,cAACrB,GAAD,CACIsB,KAAK,SACLC,YAAY,KACZzC,IAAK,SAAC0C,GAAD,OAASrB,EAAmBqB,GACjCnL,SAAU,SAACqG,GAAD,OAAO2D,EAAQ3D,EAAEC,OAAOlJ,QAClCmJ,UAAW0D,IAEf,8C,09BC1JhB,IAAMmB,GAAmB5X,IAAOC,IAAV,MAIhB4X,GAAc7X,IAAOC,IAAV,MAOX6X,GAAc9X,IAAOC,IAAV,MAQQ,SAACiI,GAAD,OAAKA,EAAE/F,mBAAmB,MAAM,SAInD4V,GAAmB/X,IAAOC,IAAV,MAgBP,SAAS+X,KAAW,IAAD,EACYzM,oBAAS,GADrB,oBACvB0M,EADuB,KACRC,EADQ,KAExB/V,EAAqBuG,aAAY,SAAC4C,GAAD,OAAOA,EAAE7I,MAAMV,KAAKI,sBACrDC,EAAsBsG,aAAY,SAAC4C,GAAD,OAAKA,EAAE7I,MAAMV,KAAKK,uBACpDyG,EAAWC,cACjB,OACI,cAAC,KAAD,CAASkM,OAAM,KAAf,SACI,eAAC4C,GAAD,WACI,cAACC,GAAD,IACA,cAACC,GAAD,CAAa3V,mBAAoBA,EAAoBkT,aAAc,kBAAM6C,GAAiB,IAAO5C,aAAc,kBAAM4C,GAAiB,IAAtI,SACKD,EACG,eAACF,GAAD,WACK5V,EACG,cAAC,KAAD,CAAQ8H,QAAS,kBAAMpB,EAASrE,QAEhC,cAAC,KAAD,CAAQyF,QAAS,kBAAMpB,EAASrE,QAEpC,cAAC,KAAD,CAAgByF,QAAS,kBAAMpB,EAASnE,WAG5C,4BAAIvC,EAAmB,OAAD,eAAgBC,EAAhB,SAI9B,cAACyV,GAAD,SCvED,WAA0B,oC,mfCKzC,IAAMM,GAAanY,IAAOC,IAAV,MAKH,SAACiI,GAAD,OAAKA,EAAEkQ,aAAa,MAAM,SAIjCC,GAAcrY,IAAOC,IAAV,MAMGD,IAAOC,IAAV,MAQF,SAASqY,GAAT,GAAoC,IAAjBF,EAAgB,EAAhBA,aAC9B,OACI,cAACD,GAAD,CAAYC,aAAcA,EAA1B,SACI,eAACC,GAAD,CAAahO,WAAS,GAAGC,WAAS,WAAlC,UACI,qBAAKnK,IAAKoY,GAAS/X,IAAK,aACxB,cAAC,KAAD,CAAcyC,GAAG,WAAWsH,WAAY,kBAAI6N,EAAe,oBAAsB,+B,uTCrBjG,IAAMI,GAAqBxY,IAAOC,IAAV,MAUjB,SAASwY,KACZ,IAAMhW,EAAQiG,aAAY,SAACC,GAAD,OAAWA,EAAMlG,MAAMtB,aAC3CY,EAAO2G,aAAY,SAACC,GAAD,OAAWA,EAAMlG,MAAMV,QAC5C6G,GAA2C,IAA5B7G,EAAKG,kBAA2BO,EAAMV,EAAKG,mBAAqB,KAC7E2G,EAAWC,cAoDjB,SAASuK,EAAWpQ,GAChB,OAAqB,OAAjB2F,GAAyBA,EAAa3F,KAAOA,EAMrD,OACI,eAACuV,GAAD,WACI,cAACpC,GAAD,CAAWlU,kBAAmBH,EAAKG,oBACjB,IAAjBO,EAAMU,OAAe,cAACmV,GAAD,IAAc7V,EAAMU,SAAWpB,EAAKK,qBAAuB,cAACkW,GAAD,CAASF,cAAc,IACxG,eAAC,KAAD,CAASM,QApBjB,WACI,IAAIA,EAAU,GAKd,OAJAjW,EAAMY,SAAQ,SAACL,GACX0V,GAAO,UAAO1V,EAAEhB,cAEpB0W,GAAO,UAAO3W,EAAKE,yBAeG0W,GAAlB,UACI,cAAC,KAAD,CAAiBC,UA9D7B,SAAyBC,GACrB,GAAKA,EAAOC,YAAZ,CAEA,IAAIC,EAAK,aAAOtW,EAAMmL,KAAI,SAAC5K,GAAD,uBAAaA,OAHV,EAIL+V,EAAMzT,OAAOuT,EAAOG,OAAOjJ,MAAO,GAAnDkJ,EAJsB,qBAK7BF,EAAMzT,OAAOuT,EAAOC,YAAY/I,MAAO,EAAGkJ,GAK1C,IAHA,IAAIjW,EAAI6V,EAAOG,OAAOjJ,MAClBmJ,EAAYL,EAAOC,YAAY/I,MAAQ8I,EAAOG,OAAOjJ,MAElD/M,GAAK6V,EAAOC,YAAY/I,OACvBmJ,GACAH,EAAM/V,GAAGhB,UAAYS,EAAMO,GAAGhB,UAC9BgB,MAEA+V,EAAM/V,GAAGhB,UAAYS,EAAMO,GAAGhB,UAC9BgB,KAEAA,GAAK6V,EAAOC,YAAY/I,QACxBgJ,EAAM/V,GAAGhB,UAAYS,EAAMO,GAAGhB,WAItC,IAAgC,IAA5BD,EAAKG,kBAA0B,CAC/B,IAAIiX,EAAe9R,KAAK+R,IAAIP,EAAOC,YAAY/I,MAAO8I,EAAOG,OAAOjJ,OAChEsJ,EAAehS,KAAKiS,IAAIT,EAAOC,YAAY/I,MAAO8I,EAAOG,OAAOjJ,OAEhE8I,EAAOG,OAAOjJ,QAAUhO,EAAKG,kBAC7B2G,EAAS9E,EAAY8U,EAAOC,YAAY/I,QACjChO,EAAKG,mBAAqBmX,GAAgBtX,EAAKG,mBAAqBiX,IACvEN,EAAOC,YAAY/I,MAAQ8I,EAAOG,OAAOjJ,MACzClH,EAAS9E,EAAYhC,EAAKG,kBAAoB,IAE9C2G,EAAS9E,EAAYhC,EAAKG,kBAAoB,KAK1D2G,EAAS/E,EAAYiV,MAwBb,SACI,cAAC,KAAD,CAAWQ,YAAY,WAAvB,SACK,SAACC,GAAD,OACG,kDAASA,EAASC,gBAAlB,IAAkCxE,IAAKuE,EAAStE,SAAhD,UACKzS,EAAMmL,KAAI,SAAC5K,EAAG+M,GAAJ,OACN/M,EAAEE,YAcC,GAbA,cAAC,KAAD,CAAWwW,eAAgB1W,EAAEE,YAAwByW,YAAW,UAAK3W,EAAEC,IAAM8M,MAAOA,EAApF,SACK,SAAC6J,GAAD,OACG,cAAC3F,GAAD,CACI/R,kBAAmBH,EAAKG,kBACxBkS,uBAAmD,IAA5BrS,EAAKG,kBAA2BO,EAAMV,EAAKG,mBAAmBF,WAAa,EAClGmS,UAAWpE,EACXsE,mBAAoBuF,EACpBzU,KAAMnC,EACNqQ,WAAYA,EAAWrQ,EAAEC,QARUD,EAAEC,OAgBxDuW,EAAS9B,sBAMS,IAAlC3V,EAAKE,yBAAkC,cAAC+V,GAAD,IAEvCjW,EAAKI,oBACFM,EAAMmL,KAAI,SAAC5K,EAAG+M,GAAJ,OACN/M,EAAEE,YACE,cAAC+Q,GAAD,CACI/R,kBAAmBH,EAAKG,kBACxBkS,uBAAmD,IAA5BrS,EAAKG,kBAA2BO,EAAMV,EAAKG,mBAAmBF,WAAa,EAClGmS,UAAWpE,EAEXsE,mBAAoB,CAAEa,SAAU,MAChC/P,KAAMnC,EACNqQ,WAAYA,EAAWrQ,EAAEC,KAHpBD,EAAEC,IAMX,Y,aCnIrB,SAAS4W,KACZ,OAAO,qBAAKxZ,MAAO,CAAEoM,gBAAiB,UAAWlM,MAAO,OAAQD,OAAQ,OAAQK,MAAO,QAAhF,qC,gHCKX,IAAMmZ,GAAe9Z,IAAOC,IAAV,MAuBH8Z,OAlBf,WACI,OAAKC,YAUG,cAACF,GAAD,UACI,cAACD,GAAD,MATJ,eAACC,GAAD,WACI,cAAC5Z,EAAD,IACA,cAACgS,GAAD,IACA,cAACuG,GAAD,QChBDwB,eAAe,CAC1BC,QAAS,CACLzX,MAAO0X,KCOKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.65f80e27.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/WIP.990e5318.svg\";","import React from \"react\";\nimport styled from \"styled-components\";\nimport WIP from \"./../../images/WIP.svg\";\n\nconst MenuContainer = styled.div`\n    width: 10%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    background-color:#FABB18;\n`;\n\nexport function Menu() {\n    return (\n        <MenuContainer>\n            <img src={WIP} style={{ height: 100, width: 100 }} alt=\"work in progress\"></img>\n            <div>\n                <h4 style={{ textAlign: \"center\", letterSpacing: 3, color: \"#f7f7fa\" }}>This is a prototype. currently under development.</h4>\n            </div>\n        </MenuContainer>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst DashboardHeroContainer = styled.div`\n    flex: 1 1 0;\n    display: flex;\n    background-color: #020202;\n`;\n\nexport function DashboardHero() {\n    return <DashboardHeroContainer>\n        \n    </DashboardHeroContainer>;\n}\n","export const MIN_TO_MS = 60 * 1000;","import { createSlice } from \"@reduxjs/toolkit\";\nimport { MIN_TO_MS } from \"./../../helpers/constants\";\n\nconst labelOptions = {\n    work: {\n        color: \"#de1738\",\n        count: 0,\n    },\n    personal: {\n        color: \"#89CFF0\",\n        count: 0,\n    },\n    fitness: {\n        color: \"#76ff7a\",\n        count: 0,\n    },\n    metime: {\n        color: \"#7442c8\",\n        count: 0,\n    },\n    explore: {\n        color: \"#efc0fe\",\n        count: 0,\n    },\n};\n\nexport const tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        taskArray: [],\n        labels: labelOptions,\n        soundscape: {\n            track: \"bell\",\n            isPlaying: false,\n            volume: 0.7,\n        },\n        meta: {\n            globalKey: 0,\n            completedTaskStartIndex: -1,\n            focussedTaskIndex: -1,\n            showCompletedTasks: true,\n            completedTasksCount: 0,\n            totalTaskListTime: 0,\n            remainingTaskListTime: 0,\n        },\n    },\n    reducers: {\n        create: (tasks, { payload }) => {\n            payload.time = payload.time * MIN_TO_MS;\n            payload.remainingTime = payload.remainingTime * MIN_TO_MS;\n            tasks.taskArray.unshift(payload);\n            tasks.meta.totalTaskListTime += payload.time;\n            tasks.meta.remainingTaskListTime += payload.time;\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\n        },\n        remove: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.filter((i) => {\n                if (i.id !== payload) return true;\n                else {\n                    if (!i.isCompleted) {\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\n                    } else {\n                        tasks.meta.completedTasksCount--;\n                        if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length - 1) {\n                            tasks.meta.completedTaskStartIndex = -1;\n                        }\n                    }\n\n                    if (!i.isCompleted) {\n                        tasks.meta.remainingTaskListTime -= i.remainingTime;\n                    }\n                    tasks.meta.totalTaskListTime -= i.time;\n\n                    return false;\n                }\n            });\n        },\n        updateTaskContent: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.content = payload.updatedTaskContent;\n                }\n            });\n        },\n        updateTaskLabel: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.label = payload.label;\n                }\n            });\n        },\n        updateTaskTime: (tasks, { payload }) => {\n            tasks.taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    tasks.meta.totalTaskListTime -= i.time;\n                    tasks.meta.remainingTaskListTime -= i.remainingTime;\n                    tasks.meta.totalTaskListTime += payload.updatedTime * MIN_TO_MS;\n                    tasks.meta.remainingTaskListTime += payload.updatedTime * MIN_TO_MS;\n                    i.remainingTime = payload.updatedTime * MIN_TO_MS;\n                    i.time = payload.updatedTime * MIN_TO_MS;\n                }\n            });\n        },\n        updateTaskTimeByVal: (tasks, { payload }) => {\n            if (tasks.taskArray[payload.focussedTaskIndex].remainingTime + payload.val * MIN_TO_MS < 0) {\n                tasks.meta.remainingTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\n            } else {\n                tasks.meta.remainingTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime += payload.val * MIN_TO_MS;\n                tasks.meta.remainingTaskListTime += tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n            }\n\n            if (tasks.taskArray[payload.focussedTaskIndex].time + payload.val * MIN_TO_MS < 0) {\n                tasks.meta.totalTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].time;\n                tasks.taskArray[payload.focussedTaskIndex].time = 0;\n            } else {\n                tasks.meta.totalTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].time;\n                tasks.taskArray[payload.focussedTaskIndex].time += payload.val * MIN_TO_MS;\n                tasks.meta.totalTaskListTime += tasks.taskArray[payload.focussedTaskIndex].time;\n            }\n        },\n        updateOrder: (tasks, { payload }) => {\n            tasks.taskArray = payload;\n        },\n\n        focusOnTask: (tasks, { payload }) => {\n            tasks.meta.focussedTaskIndex = payload;\n        },\n        resetFocussedTask: (tasks) => {\n            tasks.meta.focussedTaskIndex = -1;\n        },\n        tick: (tasks, { payload }) => {\n            tasks.taskArray[payload.focussedTaskIndex].remainingTime -= payload.deltaMS;\n            tasks.meta.remainingTaskListTime -= payload.deltaMS;\n\n            if (tasks.taskArray[payload.focussedTaskIndex].remainingTime < 0) {\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\n            }\n            if (tasks.meta.remainingTaskListTime < 0) {\n                tasks.meta.remainingTaskListTime = 0;\n            }\n        },\n        resetTaskTimer: (tasks, { payload }) => {\n            tasks.taskArray[payload].isRunning = false;\n\n            tasks.meta.remainingTaskListTime -= tasks.taskArray[payload].remainingTime;\n            tasks.meta.remainingTaskListTime += tasks.taskArray[payload].time;\n\n            tasks.taskArray[payload].remainingTime = tasks.taskArray[payload].time;\n        },\n        toggleIsRunning: (tasks, { payload }) => {\n            if (payload.val !== undefined) tasks.taskArray[payload.idx].isRunning = payload.val;\n            else tasks.taskArray[payload.idx].isRunning = !tasks.taskArray[payload.idx].isRunning;\n        },\n        toggleShowCompletedTasks: (tasks) => {\n            tasks.meta.showCompletedTasks = !tasks.meta.showCompletedTasks;\n        },\n        toggleIsCompleted: (tasks, { payload }) => {\n            tasks.taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    if (i.isCompleted) {\n                        tasks.meta.remainingTaskListTime += i.remainingTime;\n                        --tasks.meta.completedTasksCount;\n                    } else {\n                        tasks.meta.remainingTaskListTime -= i.remainingTime;\n                        ++tasks.meta.completedTasksCount;\n                    }\n\n                    i.isCompleted = !i.isCompleted;\n                }\n            });\n        },\n        clearCompletedTasks: (tasks) => {\n            if (tasks.meta.completedTaskStartIndex !== -1) {\n                for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                    if (tasks.taskArray[i].label !== null) tasks.labels[tasks.taskArray[i].label].count--;\n\n                    tasks.meta.totalTaskListTime -= tasks.taskArray[i].time;\n                }\n\n                tasks.taskArray.length = tasks.meta.completedTaskStartIndex;\n                tasks.meta.completedTaskStartIndex = -1;\n                tasks.meta.completedTasksCount = 0;\n            }\n        },\n        updateLabelCount: (tasks, { payload }) => {\n            if (payload.oldLabel !== null) tasks.labels[payload.oldLabel].count--;\n            if (payload.newLabel !== null) tasks.labels[payload.newLabel].count++;\n        },\n        incrementGlobalKey: ({ meta }) => {\n            ++meta.globalKey;\n        },\n        rearrange: (tasks, { payload }) => {\n            let id = payload.id;\n\n            if (payload.markedAsComplete) {\n                if (tasks.meta.completedTaskStartIndex === -1) {\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                    let found = false;\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\n                        if (found) {\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        } else if (tasks.taskArray[i].id === id) {\n                            found = true;\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }\n                    }\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                } else {\n                    let task, idx;\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n                    let pos = -1;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    if (pos === -1) {\n                        tasks.taskArray.push(task);\n                    } else {\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.meta.completedTaskStartIndex -= 1;\n                }\n            } else {\n                if (tasks.meta.completedTaskStartIndex == 0) {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.taskArray.unshift(task);\n                    tasks.meta.completedTaskStartIndex = 1;\n                } else {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    let start = tasks.meta.completedTaskStartIndex - 1;\n                    let pos = -1;\n                    for (let i = start; i >= 0; i--) {\n                        if (tasks.taskArray[i].globalKey < task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    if (pos === -1) {\n                        tasks.taskArray.unshift(task);\n                    } else {\n                        pos++;\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.meta.completedTaskStartIndex += 1;\n                }\n\n                if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length) {\n                    tasks.meta.completedTaskStartIndex = -1;\n                }\n            }\n        },\n        changeSoundscapeTrack: ({ soundscape }, { payload }) => {\n            soundscape.track = payload;\n        },\n        toggleSoundscapeState: ({ soundscape }, { payload }) => {\n            soundscape.isPlaying = payload;\n        },\n        updateSoundscapeVolume: ({ soundscape }, { payload }) => {\n            soundscape.volume = payload;\n        },\n    },\n});\n\nexport const {\n    create,\n    remove,\n    updateTaskContent,\n    updateTaskLabel,\n    updateTaskTime,\n    updateTaskTimeByVal,\n    focusOnTask,\n    resetFocussedTask,\n    tick,\n    resetTaskTimer,\n    toggleIsRunning,\n    toggleShowCompletedTasks,\n    toggleIsCompleted,\n    clearCompletedTasks,\n    updateOrder,\n    updateLabelCount,\n    incrementGlobalKey,\n    rearrange,\n    changeSoundscapeTrack,\n    toggleSoundscapeState,\n    updateSoundscapeVolume,\n} = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n","import { useEffect, useRef } from \"react\";\n\nexport default function useTimer(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n\nexport function useTimer2(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick(deltaMS) {\n            savedCallback.current(deltaMS);\n        }\n        if (delay !== null) {\n            let id = absoluteSetInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n\nconst absoluteSetInterval = (handler, delay) => {\n    let baseTime = Date.now();\n    const callHandler = () => {\n        let timePassedSinceLastCall = Date.now() - baseTime;\n        console.log('timePassedSinceLastCall: ',timePassedSinceLastCall)\n        if (timePassedSinceLastCall > 1000) {\n            baseTime = Date.now(); // must be set before calling handler to avoid time delay in executing it\n            handler(timePassedSinceLastCall);\n        }\n    };\n    return setInterval(callHandler, delay);\n};\n","import React from \"react\";\n\nexport const GlobeIcon = () => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n                stroke-width=\"2\"\n                d=\"M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n            />\n        </svg>\n    );\n};\n\nexport const ResetIcon = () => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\n            />\n        </svg>\n    );\n};\n\nexport const SummaryCardTick = () => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path\n                fillRule=\"evenodd\"\n                d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\"\n                clipRule=\"evenodd\"\n            />\n        </svg>\n    );\n};\n\nexport const SummaryCardClock = () => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path\n                fillRule=\"evenodd\"\n                d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\"\n                clipRule=\"evenodd\"\n            />\n        </svg>\n    );\n};\n","export default __webpack_public_path__ + \"static/media/ding.48474537.mp3\";","export function formattedTimeString(x) {\n    x = Math.floor(x/1000);\n    let secs = x % 60;\n    let mins = Math.floor(x/ 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}:${secs}`;\n}\n\nexport function formattedTimeStringv2(x) {\n    x = Math.floor(x/1000);\n    let secs = x % 60;\n    let mins = Math.floor(x/ 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return { mins, secs };\n}\n\nexport function getFormattedDate() {\n    let d = new Date();\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    return {\n        day: days[d.getDay()],\n        month: months[d.getMonth()],\n        date: d.getDate(),\n        year: d.getFullYear(),\n    };\n}\n\nexport function getFormattedListTimeSummary(x) {\n    x = Math.floor(x/1000);\n    let mins = Math.floor((x % 3600) / 60);\n    let hours = Math.floor(x / 3600);\n    \n    if (mins == 0) {\n        mins = `0`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n    if (hours == 0) {\n        hours = `0`;\n    } else if (hours < 10) {\n        hours = `${hours}`;\n    }\n\n    return { hours, mins };\n}\n\nexport function debounce(fn, wait) {\n    let t;\n    return function () {\n        clearTimeout(t);\n        t = setTimeout(() => fn.apply(this, arguments), wait);\n    };\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled, { css } from \"styled-components\";\nimport { toggleIsRunning, tick, updateTaskTimeByVal, resetTaskTimer, toggleSoundscapeState } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport useTimer , {useTimer2}from \"../../hooks/useTimer\";\nimport { CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { ResetIcon } from \"./../../components/customIcons\";\nimport dingSound from \"./../../sounds/ding.mp3\";\nimport { BsFillPauseFill, BsFillPlayFill } from \"react-icons/bs\";\nimport { formattedTimeStringv2, getFormattedDate } from \"./../../helpers\";\n\nlet dingSoundElement = new Audio(dingSound);\n\nconst FocussedTaskDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    flex-direction: column;\n    background-color:#FABB18;\n    width: 100%;\n    height:100%;\n    border-radius:20px;\n`;\n\nconst FocussedTaskPlayer = styled.div`\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    position: relative;\n    width: 100%;\n    height: 50%;\n    border-radius: 10px;\n    /* background-color: #FABB18; */\n    /* box-shadow: 0 2px 10px rgba(166, 173, 201, 0.5);\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.5); */\n`;\n\nconst FocussedTaskContent = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    text-align: center;\n    margin: 5px;\n    padding: 5px;\n    height: 30%;\n    width: 90%;\n    max-width: 376px;\n    border-radius: 10px;\n    word-wrap: break-word;\n    p {\n        min-width: 0;\n        font-weight: bold;\n        margin: 3px;\n    }\n    /* -webkit-box-shadow: 0 1px 8px rgb(248, 185, 23, 0.8);\n    box-shadow: 0 1px 8px rgb(248, 185, 23, 0.8); */\n    background-color: #fff;\n`;\n\n\nconst FocussedTaskTimer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 80%;\n    width: 50%;\n    /* background-color: #df1aa1; */\n`;\n\nconst CountdownTimerDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 85%;\n    height: 85%;\n    background-color: #fff;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    border-radius: 50%;\n    p {\n        margin: 0;\n        font-weight: bold;\n        color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#000\")};\n    }\n    span {\n        margin: 0 2px;\n        color: #4a4b46;\n        font-size: 0.8em;\n        font-weight: bold;\n    }\n`;\n\nconst FocussedTaskController = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n    height: 90%;\n    width: 30%;\n    /* background-color: #f1f7dd; */\n`;\n\nconst PlayPauseButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 55px;\n    height: 55px;\n    background-color: #000;\n    border-radius: 50%;\n    margin: 10px 20px;\n    svg {\n        color: #FABB18;\n        font-size: 1.8em;\n        margin-left: ${(p) => (p.isPlayBtn ? \"3px\" : \"0\")};\n    }\n    cursor: pointer;\n`;\n\nconst UpdateTimeButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 30px;\n    height: 30px;\n    cursor: pointer;\n`;\n\nconst ResetButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    background-color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#0000cd\")};\n    border-radius: 50%;\n    width: 30px;\n    height: 30px;\n    top: 5px;\n    left: 7px;\n    background-color: #000;\n    cursor: ${(p) => (p.isDisabled ? \"default\" : \"pointer\")};\n    svg {\n        color: #FABB18;\n        width: 20px;\n    }\n`;\n\nexport function FocussedTask() {\n    const focussedTaskIndex = useSelector((state) => state.tasks.meta.focussedTaskIndex);\n    let focussedTask = useSelector((state) => (focussedTaskIndex !== -1 ? state.tasks.taskArray[focussedTaskIndex] : null));\n    const dispatch = useDispatch();\n    const delay = 1010; // to account for the delay in executing code.\n    // useTimer(\n    //     () => {\n    //         if (focussedTask === null) return;\n    //         else if (focussedTask.remainingTime > 0) {\n    //             dispatch(tick(focussedTaskIndex));\n    //         } else if (focussedTask.remainingTime === 0) {\n    //             dispatch(toggleSoundscapeState(false));\n    //             dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n    //             dingSoundElement.play();\n    //         }\n    //     },\n    //     focussedTask !== null && focussedTask.isRunning ? delay : null\n    // );\n    useTimer2(\n        (deltaMS) => {\n            if (focussedTask === null) return;\n            else if (focussedTask.remainingTime > 0) {\n                dispatch(tick({focussedTaskIndex,deltaMS}));\n            } else if (focussedTask.remainingTime === 0) {\n                dispatch(toggleSoundscapeState(false));\n                dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n                dingSoundElement.play();\n            }\n        },\n        focussedTask !== null && focussedTask.isRunning ? delay : null\n    );\n\n    function updateTaskTimeHandler(val) {\n        if (focussedTask.isCompleted) return;\n        if (focussedTask.isRunning) dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n        dispatch(updateTaskTimeByVal({ focussedTaskIndex, val }));\n        dispatch(toggleSoundscapeState(false));\n    }\n\n    function playPauseHandler(focussedTaskIndex, wasTaskRunning) {\n        dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n        if (wasTaskRunning) {\n            dispatch(toggleSoundscapeState(false));\n        } else {\n            dispatch(toggleSoundscapeState(true));\n        }\n    }\n\n    const countdownObj = formattedTimeStringv2(focussedTask.remainingTime);\n    let countdownMins = countdownObj.mins;\n    let countdownSecs = countdownObj.secs;\n\n    return (\n        <FocussedTaskDiv>\n\n            <FocussedTaskPlayer>\n                <FocussedTaskTimer>\n                    <div style={{ width: 110, height: 110 }}>\n                        <CircularProgressbarWithChildren\n                            value={focussedTask.time !== 0 ? Math.floor((focussedTask.remainingTime / focussedTask.time) * 100) : 0}\n                            styles={buildStyles({\n                                strokeLinecap: \"butt\",\n                                pathColor: \"#020202\",\n                                trailColor: \"#F0F8FF\",\n                            })}\n                            strokeWidth={8}\n                        >\n                            <CountdownTimerDiv>\n                                <p>{countdownMins}</p>\n                                <span>m</span>\n                                <p>{countdownSecs}</p>\n                                <span>s</span>\n                            </CountdownTimerDiv>\n                        </CircularProgressbarWithChildren>\n                    </div>\n                </FocussedTaskTimer>\n\n                <FocussedTaskController>\n                    <UpdateTimeButtonDiv onClick={() => updateTaskTimeHandler(5)}>\n                        <h4>+5</h4>\n                    </UpdateTimeButtonDiv>\n                    <PlayPauseButtonDiv isPlayBtn={!focussedTask.isRunning} onClick={() => playPauseHandler(focussedTaskIndex, focussedTask.isRunning)}>\n                        {focussedTask.isRunning ? <BsFillPauseFill /> : <BsFillPlayFill />}\n                    </PlayPauseButtonDiv>\n\n                    <UpdateTimeButtonDiv onClick={() => updateTaskTimeHandler(-5)}>\n                        <h4>-5</h4>\n                    </UpdateTimeButtonDiv>\n                </FocussedTaskController>\n\n                <ResetButtonDiv\n                    onClick={() => {\n                        dispatch(toggleSoundscapeState(false));\n                        dispatch(resetTaskTimer(focussedTaskIndex));\n                    }}\n                >\n                    <ResetIcon />\n                </ResetButtonDiv>\n            </FocussedTaskPlayer>\n            <FocussedTaskContent>\n                <p>{focussedTask.content}</p>\n            </FocussedTaskContent>\n        </FocussedTaskDiv>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { ResetIcon } from \"./../../components/customIcons\";\nimport { FaPen } from \"react-icons/fa\";\nimport { CgNotes } from \"react-icons/cg\";\nimport ReactTooltip from \"react-tooltip\";\n\nconst FocussedTaskDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    flex-direction: column;\n    background-color: #fabb18;\n    width: 100%;\n    height: 100%;\n    border-radius: 20px;\n`;\n\nconst FocussedTaskPlayer = styled.div`\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    position: relative;\n    width: 100%;\n    height: 50%;\n    border-radius: 10px;\n    /* background-color: #FABB18; */\n    /* box-shadow: 0 2px 10px rgba(166, 173, 201, 0.5);\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.5); */\n`;\n\nconst FocussedTaskContent = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin: 5px;\n    padding: 5px;\n    height: 30%;\n    width: 90%;\n    max-width: 376px;\n    border-radius: 10px;\n    word-wrap: break-word;\n    svg {\n        font-size: 3em;\n    }\n    background-color: #fff;\n`;\n\nconst FocussedTaskTimer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 80%;\n    width: 50%;\n    /* background-color: #df1aa1; */\n`;\n\nconst CountdownTimerDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 85%;\n    height: 85%;\n    background-color: #fff;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    border-radius: 50%;\n    p {\n        margin: 0;\n        font-weight: bold;\n        color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#000\")};\n    }\n    span {\n        margin: 0 2px;\n        color: #4a4b46;\n        font-size: 0.8em;\n        font-weight: bold;\n    }\n`;\n\nconst FocussedTaskController = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n    height: 90%;\n    width: 30%;\n    /* background-color: #f1f7dd; */\n`;\n\nconst PlayPauseButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 55px;\n    height: 55px;\n    background-color: #000;\n    border-radius: 50%;\n    margin: 10px 20px;\n    svg {\n        color: #fabb18;\n        font-size: 1.2em;\n        margin-left: ${(p) => (p.isPlayBtn ? \"3px\" : \"0\")};\n    }\n`;\n\nconst UpdateTimeButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 30px;\n    height: 30px;\n`;\n\nconst ResetButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    background-color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#0000cd\")};\n    border-radius: 50%;\n    width: 30px;\n    height: 30px;\n    top: 5px;\n    left: 7px;\n    background-color: #000;\n    svg {\n        color: #fabb18;\n        width: 20px;\n    }\n`;\n\nexport function EmptyFocusBox() {\n\n    return (\n        <FocussedTaskDiv>\n            <FocussedTaskPlayer>\n                <FocussedTaskTimer>\n                    <div style={{ width: 110, height: 110 }}>\n                        <CircularProgressbarWithChildren\n                            value={100}\n                            styles={buildStyles({\n                                pathColor: \"#020202\",\n                                trailColor: \"#F0F8FF\",\n                            })}\n                            strokeWidth={8}\n                        >\n                            <CountdownTimerDiv>\n                                <p>00</p>\n                                <span>m</span>\n                                <p>00</p>\n                                <span>s</span>\n                            </CountdownTimerDiv>\n                        </CircularProgressbarWithChildren>\n                    </div>\n                </FocussedTaskTimer>\n\n                <FocussedTaskController>\n                    <PlayPauseButtonDiv data-tip=\"\" data-for=\"Create\">\n                        <FaPen />\n                        <ReactTooltip id=\"Create\" getContent={()=>\"Focus on task\"} />\n                    </PlayPauseButtonDiv>\n                </FocussedTaskController>\n\n            </FocussedTaskPlayer>\n            <FocussedTaskContent>\n                <CgNotes />\n            </FocussedTaskContent>\n        </FocussedTaskDiv>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/bell.91678370.mp3\";","export default __webpack_public_path__ + \"static/media/piano.78d7546a.mp3\";","export default __webpack_public_path__ + \"static/media/river.fcc5ffa7.mp3\";","export default __webpack_public_path__ + \"static/media/forest.3adc2705.mp3\";","export default __webpack_public_path__ + \"static/media/alphaWave.8e5f0b7f.mp3\";","export default __webpack_public_path__ + \"static/media/bell.08f34c07.svg\";","export default __webpack_public_path__ + \"static/media/piano.4d0c5909.svg\";","export default __webpack_public_path__ + \"static/media/alphaWave.d69179ba.svg\";","export default __webpack_public_path__ + \"static/media/river.2ba3e3d5.svg\";","import bell from \"./../../sounds/bell.mp3\";\nimport piano from \"./../../sounds/piano.mp3\";\nimport river from \"./../../sounds/river.mp3\";\nimport forest from \"./../../sounds/forest.mp3\";\nimport alphaWave from \"./../../sounds/alphaWave.mp3\";\nimport ImgBell from \"./../../images/bell.svg\";\nimport ImgPiano from \"./../../images/piano.svg\";\nimport ImgAlphaWave from \"./../../images/alphaWave.svg\";\nimport ImgRiver from \"./../../images/river.svg\";\nimport ImgForest from \"./../../images/forest.svg\";\n\nexport const soundOptions = {\n    alphaWave: {\n        src: alphaWave,\n        img: ImgAlphaWave,\n        label: \"Waves\",\n    },\n    piano: {\n        src: piano,\n        img: ImgPiano,\n        label: \"Piano\",\n    },\n    bell: {\n        src: bell,\n        img: ImgBell,\n        label: \"Bell\",\n    },\n    Forest: {\n        src: forest,\n        img: ImgForest,\n        label: \"Forest\",\n    },\n    river: {\n        src: river,\n        img: ImgRiver,\n        label: \"River\",\n    },\n};\n\nexport function generateAudioElement(trackname) {\n    let audioElement = new Audio(soundOptions[trackname].src);\n    audioElement.loop = true;\n    return audioElement;\n}\n","export default __webpack_public_path__ + \"static/media/forest.b8f0f4d7.svg\";","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Slider from \"react-input-slider\";\nimport { updateSoundscapeVolume } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport { debounce } from \"./../../helpers\";\nimport styled from \"styled-components\";\n\nconst VolumeFeedbackText = styled.div`\n    span{\n        font-weight:bold;\n        font-size:0.7em;\n    }\n`;\n\nexport function MusicVolumeControl({ isDisabled }) {\n    const ssVolume = useSelector((s) => s.tasks.soundscape.volume);\n    const dispatch = useDispatch();\n    const [volume, setVolume] = useState(ssVolume * 100);\n\n    const debouncedUpdateSoundscapeVolume = debounce((vol) => {\n        dispatch(updateSoundscapeVolume(vol / 100));\n    }, 200);\n\n    function onVolumeChangeHandler(vol) {\n        setVolume(vol);\n        debouncedUpdateSoundscapeVolume(vol);\n    }\n\n    return (\n        <>\n            <Slider\n                axis=\"x\"\n                disabled={isDisabled}\n                xstep={5}\n                xmin={0}\n                xmax={100}\n                x={volume}\n                onChange={({ x }) => onVolumeChangeHandler(x)}\n                styles={{\n                    track: {\n                        backgroundColor: \"#c1c1d7\",\n                        width: \"100%\",\n                    },\n                    active: {\n                        backgroundColor: \"#FABB18\",\n                    },\n                    disabled: {\n                        opacity: 0.2,\n                    },\n                }}\n            />\n            {/* <VolumeFeedbackText>\n                <span>{volume}</span>\n            </VolumeFeedbackText> */}\n        </>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { soundOptions, generateAudioElement } from \"./musicUtils\";\nimport { changeSoundscapeTrack } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport { MusicVolumeControl } from \"./MusicVolumeControl\";\n\nconst SoundscapesContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n    border-radius: 20px;\n    transition: box-shadow 0.2s ease-in-out,transform 0.2s ease-in-out ;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\n    &:hover {\n        transform: scale(1.02);\n        -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.8);\n        box-shadow: 0 2px 10px rgba(166, 173, 201, 0.8);\n    }\n`;\n\nconst SoundscapesDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    width: 100%;\n    height: 70%;\n    /* background-color: orange; */\n    color: #fabb18;\n    p {\n        margin: 0;\n        font-weight: bold;\n    }\n`;\n\nconst SoundOptionsDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 85%;\n    /* background-color: #f8faaa; */\n`;\n\nconst SoundOptionsInput = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    flex-direction: column;\n    /* background-color: #b16afa; */\n    height: 80%;\n    margin: 0 5px;\n    img {\n        width: 50px;\n        cursor: pointer;\n        transition: transform 0.2s;\n        &:hover {\n            transform: scale(1.1);\n        }\n    }\n    span {\n        margin: 0;\n        font-size: 0.8em;\n        font-weight: bold;\n        color: ${(p) => (p.isSelectedSound ? \"#FABB18\" : \"#c1c1d7\")};\n        cursor: pointer;\n    }\n`;\n\nconst SoundVolumeControl = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    /* background-color: #cad1ff; */\n    width: 90%;\n    height: 15%;\n`;\n\nexport function Soundscapes() {\n    const soundscape = useSelector((s) => s.tasks.soundscape);\n    const dispatch = useDispatch();\n\n    const [soundscapeAudioElement, setSoundscapeAudioElement] = useState(() => generateAudioElement(soundscape.track, soundscape.volume));\n\n    // ---- danger zone: don't change without full surety , this code is prone to issues ---///\n\n    useEffect(() => {\n        soundscapeAudioElement.src = soundOptions[soundscape.track].src;\n    }, [soundscape.track, soundscapeAudioElement, soundscape.isPlaying]);\n\n    soundscapeAudioElement.volume = soundscape.volume;\n    soundscapeAudioElement.addEventListener(\"canplay\", () => {\n        if (soundscape.isPlaying) {\n            soundscapeAudioElement.play();\n        } else {\n            soundscapeAudioElement.pause();\n        }\n    });\n\n    // ---- danger zone: this might be due to my lack of knowledge of useEffect or weird Audio element behaviour ---///\n\n    function isSelectedSound(track) {\n        return soundscape.track === track;\n    }\n\n    return (\n        <SoundscapesContainer>\n            <SoundscapesDiv>\n                <p>Soundscapes</p>\n                <SoundOptionsDiv>\n                    {Object.keys(soundOptions).map((i) => (\n                        <SoundOptionsInput key={i} onClick={() => dispatch(changeSoundscapeTrack(i))} isSelectedSound={isSelectedSound(i)}>\n                            <img src={soundOptions[i].img} alt={i} />\n                            <span>{soundOptions[i].label}</span>\n                        </SoundOptionsInput>\n                    ))}\n                </SoundOptionsDiv>\n            </SoundscapesDiv>\n            <SoundVolumeControl>\n                <MusicVolumeControl />\n            </SoundVolumeControl>\n        </SoundscapesContainer>\n    );\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { BsCalendarFill } from \"react-icons/bs\";\nimport { getFormattedDate } from \"./../../helpers\";\n\nconst DayDateDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    width: 100%;\n    height: 15%;\n    background-color: #000;\n    border-radius: 10px;\n`;\n\nconst CalendarIconDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 20%;\n    svg {\n        color: #fff;\n        font-size: 1.7em;\n    }\n`;\n\nconst DayDateText = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    width: 65%;\n    font-weight: bold;\n    font-size: 0.9em;\n    color:#fff;\n    span {\n    }\n    p {\n        margin: 0;\n    }\n`;\n\nexport function DayDate() {\n    const DateObj = getFormattedDate();\n    return (\n        <DayDateDiv>\n            <DayDateText>\n                <span>\n                    {DateObj.day} {DateObj.date}\n                </span>\n                <p>\n                    {DateObj.month} {DateObj.year}\n                </p>\n            </DayDateText>\n            <CalendarIconDiv>\n                <BsCalendarFill />\n            </CalendarIconDiv>\n        </DayDateDiv>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { FocussedTask } from \"./../../components/FocusBoard/FocussedTask\";\nimport { EmptyFocusBox } from \"./../../components/FocusBoard/EmptyFocusBox\";\nimport { Soundscapes } from \"./../../components/MusicBox/Soundscapes\";\nimport { DayDate } from \"../../components/FocusBoard/DayDate\";\n\nconst FocusBoardContainer = styled.div`\n    flex: 1 1 0;\n    min-width: 346px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin:0 0 0 20px;\n    height:100%;\n    /* background-color:silver; */\n`;\n\nconst FocussedTaskContainer = styled.div`\n    display: flex;\n    align-items:center;\n    justify-content: space-between;\n    flex-direction: column;\n    width: 90%;\n    max-width: 376px;\n    height: 300px;\n    margin: 10px 0;\n    /* background-color: green; */\n`;\n\nconst MusicBoxContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    width: 90%;\n    max-width: 376px;\n    height: 200px;\n    margin: 10px 0;\n    /* border-radius: 10px;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    background-color: #f7f7fa; */\n`;\n\nexport function FocusBoard() {\n    const focussedTaskIndex = useSelector((state) => state.tasks.meta.focussedTaskIndex);\n    const totalTasksCount = useSelector((s) => s.tasks.taskArray.length);\n    return (\n        <FocusBoardContainer>\n            <FocussedTaskContainer>\n                {/* <DayDate /> */}\n                {focussedTaskIndex !== -1 ? <FocussedTask /> : <EmptyFocusBox />}\n            </FocussedTaskContainer>\n            <MusicBoxContainer>\n                <Soundscapes />\n            </MusicBoxContainer>\n        </FocusBoardContainer>\n    );\n}\n","import React, { useState } from \"react\";\nimport ReactTooltip from \"react-tooltip\";\nimport { ImPieChart } from \"react-icons/im\";\nimport styled from \"styled-components\";\n\nconst EmptyLabelPieDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 160px;\n    svg {\n        color: #fff;\n        font-size: 6em;\n    }\n`;\n\nexport function EmptyLabelPie() {\n    return (\n        <EmptyLabelPieDiv data-tip=\"\" data-for=\"EmptyLabelPie\">\n            <ImPieChart />\n            <ReactTooltip id=\"EmptyLabelPie\" getContent={() => \"Tasks/Labels Pie\"} />\n        </EmptyLabelPieDiv>\n    );\n}\n","import React, { useState } from \"react\";\nimport { PieChart } from \"react-minimal-pie-chart\";\nimport { useSelector } from \"react-redux\";\nimport ReactTooltip from \"react-tooltip\";\nimport { EmptyLabelPie } from \"./EmptyLabelPie\";\n\nexport function LabelPie() {\n    const labels = useSelector((s) => s.tasks.labels);\n    const totalTasksCount = useSelector((s) => s.tasks.taskArray.length);\n\n    const [selected, setSelected] = useState(0);\n    const [hovered, setHovered] = useState(undefined);\n\n    let labelledTasksCount = 0;\n\n    let labelData = Object.keys(labels).reduce((filtered, i) => {\n        if (labels[i].count > 0) {\n            labelledTasksCount += labels[i].count;\n            filtered.push({\n                tooltip: `#${i} - ${labels[i].count} tasks`,\n                value: labels[i].count,\n                color: labels[i].color,\n            });\n        }\n        return filtered;\n    }, []);\n\n    if (totalTasksCount - labelledTasksCount > 0) {\n        labelData.push({\n            tooltip: `No Label - ${totalTasksCount - labelledTasksCount} tasks`,\n            value: totalTasksCount - labelledTasksCount,\n            color: \"#fff\",\n        });\n    }\n\n    labelData = labelData.map((i, idx) => {\n        if (hovered === idx) {\n            i.color = \"#FABB18\";\n            return i;\n        } else return i;\n    });\n\n    const lineWidth = 60;\n\n    return (\n        <div style={{ width: 160 }} data-tip=\"\" data-for=\"LabelPieChart\">\n            {labelledTasksCount !== 0 ? (\n                <PieChart\n                    style={{\n                        fontSize: \"12px\",\n                        fontWeight: \"bold\",\n                    }}\n                    data={labelData}\n                    radius={PieChart.defaultProps.radius - 6}\n                    lineWidth={lineWidth}\n                    segmentsStyle={{ transition: \"stroke .3s\", cursor: \"pointer\" }}\n                    segmentsShift={2}\n                    animate\n                    label={({ dataEntry }) => dataEntry.value}\n                    labelPosition={100 - lineWidth / 2}\n                    labelStyle={{\n                        fill: \"#fff\",\n                        pointerEvents: \"none\",\n                    }}\n                    onClick={(_, index) => {\n                        setSelected(index === selected ? undefined : index);\n                    }}\n                    onMouseOver={(_, index) => {\n                        setHovered(index);\n                    }}\n                    onMouseOut={() => {\n                        setHovered(undefined);\n                    }}\n                />\n            ) : (\n                <EmptyLabelPie />\n            )}\n            <ReactTooltip id=\"LabelPieChart\" getContent={() => (typeof hovered === \"number\" ? labelData[hovered].tooltip : null)} />\n        </div>\n    );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { buildStyles, CircularProgressbarWithChildren, CircularProgressbar } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport styled from \"styled-components\";\n\nconst ProgressRingBox = styled.div`\n    display: flex;\n    flex-direction:column;\n    justify-content: space-around;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n`;\n\nconst ProgressRingDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 90%;\n    height: 55%;\n    /* background-color:#afa1d1; */\n`;\n\nconst ProgressRingLegendDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    width: 80%;\n    height: 30%;\n    /* background-color: #1fadef; */\n    color: #FABB18;\n    font-weight: bold;\n    p {\n        margin: 3px 0;\n        font-size: 0.9em;\n        letter-spacing: 2;\n    }\n`;\n\nconst LegendDataDiv = styled.div`\n    display: flex;\n    align-items: center;\n    width: 95%;\n    /* background-color: #fdadef; */\n    margin: 4px 0;\n    color: #000;\n`;\n\nconst TextDiv = styled.div`\n    font-weight: bold;\n    font-size: 0.8em;\n    p {\n        margin: 0 5px;\n    }\n`;\n\nconst PercentTextDiv = styled.div`\n    font-weight: bold;\n    font-size: 0.8em;\n    margin-left: auto;\n    color: #000;\n`;\n\nconst LegendColorDot = styled.div`\n    width: 12px;\n    height: 12px;\n    background-color: ${(p) => p.color};\n    border-radius: 50%;\n`;\n\nexport function ProgressRings() {\n    const completedTasksCount = useSelector((s) => s.tasks.meta.completedTasksCount);\n    const totalTasksCount = useSelector((s) => s.tasks.taskArray.length);\n    let taskCompletionPercent = totalTasksCount !== 0 ? Math.floor((completedTasksCount / totalTasksCount) * 100) : 45;\n\n    const remainingTaskListTime = useSelector((s) => s.tasks.meta.remainingTaskListTime);\n    const totalTaskListTime = useSelector((s) => s.tasks.meta.totalTaskListTime);\n    let timeCompletionPercent = totalTaskListTime !== 0 ? Math.floor(((totalTaskListTime - remainingTaskListTime) / totalTaskListTime) * 100) : 60;\n\n    return (\n        <ProgressRingBox>\n            <ProgressRingDiv>\n                <div style={{ width: 130, height: 130 }}>\n                    <CircularProgressbarWithChildren\n                        value={taskCompletionPercent}\n                        styles={buildStyles({\n                            pathColor: \"#77dd77\",\n                            trailColor: \"#FFE39E\",\n                        })}\n                        strokeWidth={10}\n                    >\n                        <div style={{ width: 90, height: 90 }}>\n                            <CircularProgressbar\n                                value={timeCompletionPercent}\n                                styles={buildStyles({\n                                    pathColor: \"#0000cd\",\n                                    trailColor: \"#FFE39E\",\n                                })}\n                                strokeWidth={14}\n                            />\n                        </div>\n                    </CircularProgressbarWithChildren>\n                </div>\n            </ProgressRingDiv>\n            <ProgressRingLegendDiv>\n                <p>Progress</p>\n                <LegendDataDiv>\n                    <LegendColorDot color=\"#77dd77\" />\n                    <TextDiv>\n                        <p>\n                            tasks\n                        </p>\n                    </TextDiv>\n\n                    <PercentTextDiv>\n                        <span>{taskCompletionPercent}%</span>\n                    </PercentTextDiv>\n                </LegendDataDiv>\n                <LegendDataDiv>\n                    <LegendColorDot color=\"#0000cd\" />\n                    <TextDiv>\n                        <p>time</p>\n                    </TextDiv>\n                    <PercentTextDiv>\n                        <span>{timeCompletionPercent}%</span>\n                    </PercentTextDiv>\n                </LegendDataDiv>\n            </ProgressRingLegendDiv>\n        </ProgressRingBox>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useSelector } from \"react-redux\";\nimport { getFormattedListTimeSummary } from \"../../helpers\";\nimport {SummaryCardClock} from \"./../customIcons\";\n\nconst ProgressCard = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    position: relative;\n    width: 95%;\n    height: 45%;\n    border-radius: 10px;\n    border-left: 8px solid #0000cd;\n    /* -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4); */\n    background-color: #F0F8FF;\n`;\n\nconst ProgressCardText = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    width: 85%;\n    height: 45%;\n    /* background-color: #d1effa; */\n    span {\n        color:#4a4b46;\n        font-weight: bold;\n        font-size: 0.6em;\n    }\n`;\n\nconst FormattedTimeDiv = styled.div`\n    display: flex;\n    align-items:center;\n    p {\n        margin: 0;\n        font-weight: bold;\n        font-size: 1.4em;\n    }\n    span {\n        margin: 0 3px;\n        font-size: 0.6em;\n    }\n`;\n\nconst ClockIconDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    width: 25px;\n    height: 25px;\n    top: 5px;\n    right: 5px;\n    svg {\n        color: #0000cd;\n    }\n`;\n\nexport function TimeProgressCard() {\n    const totalTaskListTime = useSelector((state) => state.tasks.meta.totalTaskListTime);\n    const remainingTaskListTime = useSelector((state) => state.tasks.meta.remainingTaskListTime);\n\n    const rTLTObj = getFormattedListTimeSummary(remainingTaskListTime);\n    let rTLTHours = rTLTObj.hours;\n    let rTLTMins = rTLTObj.mins;\n\n    const tTLTObj = getFormattedListTimeSummary(totalTaskListTime);\n    let tTLTHours = tTLTObj.hours;\n    let tTLTMins = tTLTObj.mins;\n    return (\n        <ProgressCard>\n            <ProgressCardText>\n                <FormattedTimeDiv>\n                    <p>{rTLTHours}</p>\n                    <span>h</span>\n                    <p>{rTLTMins}</p>\n                    <span>m</span>\n                </FormattedTimeDiv>\n\n                <span>remaining time</span>\n            </ProgressCardText>\n            <ProgressCardText>\n                <FormattedTimeDiv>\n                    <p>{tTLTHours}</p>\n                    <span>h</span>\n                    <p>{tTLTMins}</p>\n                    <span>m</span>\n                </FormattedTimeDiv>\n                <span>total time</span>\n            </ProgressCardText>\n            <ClockIconDiv>\n                <SummaryCardClock/>\n            </ClockIconDiv>\n        </ProgressCard>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useSelector } from \"react-redux\";\nimport {SummaryCardTick} from \"./../customIcons\";\n\n\nconst ProgressCard = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    position:relative;\n    width: 95%;\n    height: 45%;\n    border-radius: 10px;\n    border-left: 8px solid #77dd77;\n    /* -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4); */\n    background-color: #f0fff0;\n`;\n\nconst ProgressCardText = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    width: 85%;\n    height: 45%;\n    /* background-color: #d1effa; */\n    font-weight: bold;\n    p {\n        font-size: 1.6em;\n        margin: 0;\n    }\n    span {\n        color:#4a4b46;\n        font-size: 0.6em;\n    }\n`;\n\nconst TickIconDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    width: 25px;\n    height: 25px;\n    top: 5px;\n    right: 5px;\n    svg {\n        color: #77dd77;\n    }\n`;\n\n\nexport function TaskProgressCard() {\n    const completedTasksCount = useSelector((s) => s.tasks.meta.completedTasksCount);\n    const totalTasksCount = useSelector((s) => s.tasks.taskArray.length);\n\n    return (\n        <ProgressCard>\n            <ProgressCardText>\n                <p>{completedTasksCount}</p>\n                <span>done tasks</span>\n            </ProgressCardText>\n            <ProgressCardText>\n                <p>{totalTasksCount}</p>\n                <span>total tasks</span>\n            </ProgressCardText>\n            <TickIconDiv>\n                <SummaryCardTick/>\n            </TickIconDiv>\n        </ProgressCard>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { LabelPie } from \"./../../components/MiscBoard/LabelPie\";\nimport { ProgressRings } from \"./../../components/MiscBoard/ProgressRings\";\nimport {TimeProgressCard} from \"./../../components/MiscBoard/TimeProgressCard\";\nimport {TaskProgressCard} from \"./../../components/MiscBoard/TaskProgressCard\";\n\nconst MiscBoardContainer = styled.div`\n    flex: 1 1 0;\n    min-width: 346px;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    justify-content: center;\n    height:100%;\n    /* background-color:orange; */\n`;\n\n\nconst MainSummaryContainer = styled.div`\n    display: flex;\n    align-items:center;\n    justify-content:space-around;\n    width: 90%;\n    max-width: 376px;\n    height: 300px;\n    margin: 10px 0;\n    border-radius:20px;\n    backface-visibility: hidden;\n    transform: translateZ(0);\n    transition: box-shadow 0.2s ease-in-out,transform 0.2s ease-in-out ;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\n    &:hover {\n        transform: scale(1.02);\n        -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.8);\n        box-shadow: 0 2px 10px rgba(166, 173, 201, 0.8);\n    }\n`;\n\nconst ProgressRingContainer = styled.div`\n    display: flex;\n    width: 45%;\n    height: 85%;\n    border-radius: 10px;\n    /* -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    background-color: #f7f7fa; */\n`;\n\nconst ProgressCardContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n    width: 35%;\n    height: 85%;\n    border-radius: 10px;\n    /* -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4); */\n    /* background-color: #f7adfa; */\n`;\n\nconst LabelPieContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 50%;\n    max-width:220px;\n    height: 200px;\n    margin: 10px 0;\n    border-radius: 10px;\n    /* -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4); */\n    background-color: #020202;\n    transition:transform 0.2s ease-in-out ;\n    &:hover {\n        transform: scale(1.02);\n    }\n`;\n\n\nexport function MiscBoard() {\n    return (\n        <MiscBoardContainer>\n            <MainSummaryContainer>\n                <ProgressRingContainer>\n                    <ProgressRings />\n                </ProgressRingContainer>\n                <ProgressCardContainer>\n                    <TaskProgressCard/>\n                    <TimeProgressCard/>\n                </ProgressCardContainer>\n            </MainSummaryContainer>\n\n            <LabelPieContainer>\n                <LabelPie />\n            </LabelPieContainer>\n        </MiscBoardContainer>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { FocusBoard } from \"../focusBoard/FocusBoard\";\nimport { MiscBoard } from \"../miscBoard/MiscBoard\";\n\nconst DashboardMainContainer = styled.div`\n    flex: 4 1 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    /* background-color: red; */\n`;\n\nexport function DashboardMain() {\n    return (\n        <DashboardMainContainer>\n            <MiscBoard />\n            <FocusBoard />\n        </DashboardMainContainer>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {DashboardHero} from \"./DashboardHero\";\nimport {DashboardMain} from \"./DashboardMain\";\n\nconst DashboardContainer = styled.div`\n    flex: 2 1 0;\n    display: flex;\n    flex-direction: column;\n    background-color:#FFFFF3;\n`;\n\nexport default function Dashboard() {\n    return (\n        <DashboardContainer>\n            <DashboardHero />\n            <DashboardMain />\n        </DashboardContainer>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/bulb.b245cbae.svg\";","export default __webpack_public_path__ + \"static/media/glowBulb.b782ade4.svg\";","export default __webpack_public_path__ + \"static/media/tickmark.efd5763f.svg\";","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\n\nconst TaskSelectInput = styled.select`\n    font-weight: bold;\n    text-align: center;\n    border:0;\n    background-color:#fff;\n    option{\n        font-weight:bold;\n    }\n`;\n\nexport default function TaskLabel(p) {\n    const labels = useSelector((s) => s.tasks.labels);\n    const [updatedLabel, setUpdatedLabel] = useState(p.taskLabel);\n\n    return (\n        // <div style={{ height: \"100%\", width: 80 }}>\n        <TaskSelectInput\n        autoFocus\n            name=\"labels\"\n            onBlur={() => p.onBlur(p.taskId,p.taskLabel, updatedLabel)}\n            defaultValue={updatedLabel}\n            onChange={(e) => setUpdatedLabel(e.target.value)}\n            onKeyDown={(e) => (e.key === \"Enter\" ? p.onBlur(p.taskId,p.taskLabel, updatedLabel) : null)}\n        >\n            <option value=\"none\">none</option> \n            {/* keeping option:none at top makes it show up if taskLabel is null which is desired */}\n            {Object.keys(labels).map((e, idx) => (\n                <option style={{color:`${labels[e].color}`}} key={idx} value={e}>\n                    {e}\n                </option>\n            ))}\n        </TaskSelectInput>\n        // </div>\n    );\n}\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { remove, updateTaskContent, toggleIsCompleted, rearrange, updateTaskTime } from \"../../containers/taskBoard/taskBoardSlice\";\nimport { focusOnTask, resetFocussedTask, toggleIsRunning, updateTaskLabel, updateLabelCount , toggleSoundscapeState} from \"../../containers/taskBoard/taskBoardSlice\";\nimport styled from \"styled-components\";\nimport { BsTrash } from \"react-icons/bs\";\nimport { Flipped } from \"react-flip-toolkit\";\nimport { GrDrag } from \"react-icons/gr\";\nimport { formattedTimeString } from \"../../helpers\";\nimport bulb from \"./../../images/bulb.svg\";\nimport glowBulb from \"./../../images/glowBulb.svg\";\nimport tickmark from \"./../../images/tickmark.svg\";\nimport TaskLabelSelect from \"./../../components/TaskBoard/TaskLabelSelect\";\n\nconst TaskCardContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    width: 376px; // % not working here (maybe due to animation library wrappers)\n    height: 110px;\n    margin-top: 15px;\n    cursor:default !important;\n    /* background-color: #fff4e1; */\n`;\n\nconst TaskCardDragIcon = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    width: 5%;\n    height: 100%;\n    /* background-color: #ff09ac; */\n    svg {\n        cursor: url(\"https://ssl.gstatic.com/ui/v1/icons/mail/images/2/openhand.cur\"), default !important;\n        opacity: 0.7;\n    }\n`;\n\nconst getTaskCardDivBorderLabelColor = (labelColor) => (labelColor !== null ? `7px solid ${labelColor}` : \"none\");\n\nconst TaskCardDiv = styled.div`\n    display: flex;\n    justify-content: space-around;\n    flex-direction: row;\n    height: 100%;\n    width: 90%;\n    border-radius: 10px;\n    border-right: ${(p) => getTaskCardDivBorderLabelColor(p.labelColor)};\n    background-color: #fff;\n    -webkit-box-shadow: ${(p) => (p.isFocussed ? \"0 0 14px rgb(248,185,23)\" : \"0 2px 10px rgba(166,173,201,0.4)\")};\n    box-shadow: ${(p) => (p.isFocussed ? \"0 0 14px rgb(248,185,23)\" : \"0 2px 10px rgba(166,173,201,0.4)\")};\n`;\n\nconst TaskStatusDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    width: 15%;\n    /* background-color: #f8f8ff; */\n    position: relative;\n    p {\n        margin: 5px;\n        font-weight: bold;\n        font-size: 0.7em;\n        cursor: text;\n    }\n    img {\n        width: ${(p) => (p.isCompleted ? \"35px\" : \"60px\")};\n    }\n`;\n\nconst TaskDetailsDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    height: 100%;\n    width: 75%;\n    /* margin: 0 0 0 10px; */\n    /* background-color: #fff1fc; */\n`;\n\nconst TaskContentDiv = styled.div`\n    display: flex;\n    align-items: center;\n    height: 65%;\n    margin: 0 0 0 5px;\n    word-wrap: break-word;\n    /* background-color: #fffcec; */\n    p {\n        font-size: 0.9em;\n        font-weight: bold;\n        min-width: 0;\n        cursor: text;\n    }\n`;\n\nconst TaskEditInput = styled.textarea`\n    resize: none;\n    height: 90%;\n    width: 100%;\n    font-size: 0.9em;\n    overflow: hidden;\n    vertical-align: center;\n    font-weight: bold;\n    &:focus {\n        outline: none;\n        border: 2px #4a4b46 dashed;\n        border-radius: 5px;\n    }\n`;\n\nconst TimeEditInput = styled.input`\n    height: 15px;\n    width: 30px;\n    margin-top: 5px;\n    text-align: center;\n    font-weight: bold;\n    &:focus {\n        outline: none;\n        border: 2px #4a4b46 dashed;\n        border-radius: 2px;\n    }\n`;\n\nconst TaskActionButton = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    border-radius: 5px;\n    margin: 4px;\n    cursor: pointer;\n    &:hover {\n        background-color: #FABB18;\n        p {\n            color: #fff;\n        }\n    }\n    p {\n        margin: 5px;\n        font-weight: bold;\n        font-size: 0.65em;\n    }\n`;\n\nconst TaskLabelContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    border-radius: 5px;\n    margin: 4px;\n    cursor: pointer;\n    &:hover {\n        background-color: #f7f7fa;\n    }\n    p {\n        margin: 5px;\n        color: ${(p) => (p.labelColor !== null ? p.labelColor : \"#c1c1d7\")};\n        font-weight: bold;\n        font-size: 0.65em;\n    }\n`;\n\nconst TaskDeleteButton = styled.div`\n    height: 80%;\n    cursor: pointer;\n    margin-left: auto;\n    color: #FABB18;\n    &:hover {\n        color: red;\n    }\n`;\n\nconst TaskControllerDiv = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    height: 25%;\n    /* background-color: #fffa91; */\n    svg {\n        font-size: 0.8em;\n        margin: 5px;\n    }\n`;\n\nfunction previewTask(str) {\n    if (str.length <= 60) return str;\n    else return str.substring(0, 60) + \"...\";\n}\n\nexport default function TaskCard({ task, taskIndex, focussedTaskGlobalKey, forwardRBDProvided, isFocussed, focussedTaskIndex }) {\n    const dispatch = useDispatch();\n\n    const [taskUnderEdit, setTaskUnderEdit] = useState(false);\n    const [updatedTaskContent, setUpdatedTaskContent] = useState(task.content);\n    const [timeUnderEdit, setTimeUnderEdit] = useState(false);\n    const [updatedTime, setUpdatedTime] = useState(Math.floor(task.time / 1000/60));\n    const [labelUnderEdit, setLabelUnderEdit] = useState(false);\n    const [showDragIcon, setShowDragIcon] = useState(false);\n\n    const labels = useSelector((s) => s.tasks.labels);\n\n    function submitUpdatedTaskContent(e) {\n        if (e.key === \"Enter\" && updatedTaskContent.trim().length >= 3) {\n            dispatch(updateTaskContent({ id: task.id, updatedTaskContent }));\n            setTaskUnderEdit(false);\n        }\n    }\n    function submitUpdatedTime(e) {\n        if (e.key === \"Enter\") {\n            dispatch(updateTaskTime({ id: task.id, updatedTime }));\n            setTimeUnderEdit(false);\n        }\n    }\n\n    function labelSelectOnBlurHandler(taskId, taskLabel, updatedLabel) {\n        setLabelUnderEdit(false);\n        updatedLabel = updatedLabel === \"none\" ? null : updatedLabel;\n        dispatch(updateTaskLabel({ id: taskId, label: updatedLabel }));\n        if (taskLabel !== updatedLabel) dispatch(updateLabelCount({ oldLabel: taskLabel, newLabel: updatedLabel }));\n    }\n\n    return (\n        <Flipped flipId={`${task.id}`}>\n            <TaskCardContainer\n                ref={forwardRBDProvided.innerRef}\n                {...forwardRBDProvided.draggableProps}\n                {...forwardRBDProvided.dragHandleProps}\n                onMouseEnter={() => setShowDragIcon(!task.isCompleted && true)}\n                onMouseLeave={() => setShowDragIcon(!task.isCompleted && false)}\n            >\n                <TaskCardDragIcon>{showDragIcon && <GrDrag />}</TaskCardDragIcon>\n\n                <TaskCardDiv isFocussed={isFocussed} labelColor={task.label !== null ? labels[task.label].color : null}>\n                    <TaskStatusDiv isFocussed={isFocussed} isCompleted={task.isCompleted}>\n                        {task.isCompleted ? (\n                            <img src={tickmark} alt=\"Done\" />\n                        ) : isFocussed ? (\n                            <img src={glowBulb} alt=\"Focussed\" />\n                        ) : (\n                            <img src={bulb} alt=\"Unfocussed\" />\n                        )}\n                        {!task.isCompleted &&\n                            (timeUnderEdit ? (\n                                <TimeEditInput\n                                    autoFocus\n                                    value={updatedTime}\n                                    onBlur={() => {\n                                        dispatch(updateTaskTime({ id: task.id, updatedTime }));\n                                        setTimeUnderEdit(false);\n                                    }}\n                                    onKeyDown={submitUpdatedTime}\n                                    onChange={(e) => setUpdatedTime(e.target.value)}\n                                />\n                            ) : (\n                                <p onDoubleClick={() => setTimeUnderEdit(true)}>{formattedTimeString(task.remainingTime)}</p>\n                            ))}\n                    </TaskStatusDiv>\n\n                    <TaskDetailsDiv>\n                        <TaskContentDiv>\n                            {taskUnderEdit ? (\n                                <TaskEditInput\n                                    autoFocus\n                                    value={updatedTaskContent}\n                                    onBlur={() => {\n                                        dispatch(updateTaskContent({ id: task.id, updatedTaskContent }));\n                                        setTaskUnderEdit(false);\n                                    }}\n                                    onKeyDown={submitUpdatedTaskContent}\n                                    onChange={(e) => setUpdatedTaskContent(e.target.value)}\n                                />\n                            ) : (\n                                <p onDoubleClick={() => setTaskUnderEdit(true)}>{previewTask(task.content)}</p>\n                            )}\n                        </TaskContentDiv>\n\n                        <TaskControllerDiv>\n                            {!task.isCompleted && (\n                                <TaskActionButton\n                                    isDoneBtn={false}\n                                    onClick={\n                                        isFocussed\n                                            ? () => {\n                                                  if (task.isRunning) dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n                                                  dispatch(resetFocussedTask());\n                                                  dispatch(toggleSoundscapeState(false));\n                                              }\n                                            : () => {\n                                                  if (focussedTaskIndex !== -1) dispatch(toggleIsRunning({ idx: focussedTaskIndex, val: false }));\n                                                  dispatch(toggleSoundscapeState(false));\n                                                  dispatch(focusOnTask(taskIndex));\n                                              }\n                                    }\n                                >\n                                    <p>{isFocussed ? \"Unfocus\" : \"Focus\"}</p>\n                                </TaskActionButton>\n                            )}\n\n                            <TaskActionButton\n                                isDoneBtn={true}\n                                onClick={\n                                    task.isCompleted\n                                        ? (e) => {\n                                              if (focussedTaskIndex !== -1 && focussedTaskGlobalKey < task.globalKey) {\n                                                  dispatch(focusOnTask(focussedTaskIndex + 1));\n                                              }\n                                              dispatch(toggleIsCompleted(task.id));\n                                              dispatch(rearrange({ id: task.id, markedAsComplete: false }));\n                                              e.stopPropagation();\n                                          }\n                                        : (e) => {\n                                              if (taskIndex < focussedTaskIndex) dispatch(focusOnTask(focussedTaskIndex - 1));\n                                              if (task.isRunning) dispatch(toggleIsRunning({ idx: taskIndex }));\n                                              if (isFocussed) dispatch(resetFocussedTask());\n                                              dispatch(toggleIsCompleted(task.id));\n                                              dispatch(rearrange({ id: task.id, markedAsComplete: true }));\n                                              if(taskIndex===focussedTaskIndex)dispatch(toggleSoundscapeState(false));\n                                              e.stopPropagation();\n                                          }\n                                }\n                            >\n                                <p>{task.isCompleted ? \"Undone\" : \"Done\"}</p>\n                            </TaskActionButton>\n\n                            <TaskLabelContainer onClick={() => setLabelUnderEdit(true)} labelColor={task.label !== null ? labels[task.label].color : null}>\n                                {labelUnderEdit ? (\n                                    <TaskLabelSelect onBlur={labelSelectOnBlurHandler} taskId={task.id} taskLabel={task.label} />\n                                ) : task.label !== null ? (\n                                    <p>#{task.label}</p>\n                                ) : (\n                                    <p>Add label</p>\n                                )}\n                            </TaskLabelContainer>\n\n                            {!isFocussed && (\n                                <TaskDeleteButton\n                                    onClick={(e) => {\n                                        if (taskIndex < focussedTaskIndex) dispatch(focusOnTask(focussedTaskIndex - 1));\n                                        dispatch(remove(task.id));\n                                        if (task.label !== null) dispatch(updateLabelCount({ oldLabel: task.label, newLabel: null }));\n                                        e.stopPropagation();\n                                    }}\n                                >\n                                    <BsTrash />\n                                </TaskDeleteButton>\n                            )}\n                        </TaskControllerDiv>\n                    </TaskDetailsDiv>\n                </TaskCardDiv>\n            </TaskCardContainer>\n        </Flipped>\n    );\n}\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { create, incrementGlobalKey, focusOnTask, updateLabelCount } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport styled from \"styled-components\";\nimport { AiFillPlusCircle, AiFillClockCircle } from \"react-icons/ai\";\n\n\nconst TaskInputContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin: 20px 0;\n    width: 90%;\n    max-width:396px;\n    border-radius: 10px;\n    background-color: #fff;\n    height: 50px;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\n`;\n\nconst TaskContentInputDiv = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    height: 90%;\n    width: 70%;\n    margin-left: 10px;\n    svg {\n        font-size: 1.3em;\n        margin-right: 5px;\n        color: #FABB18;\n    }\n`;\n\nconst TaskContentInputField = styled.input`\n    height: 100%;\n    width: 90%;\n    font-size: 0.9em;\n    background-color: #fff;\n    border: 0;\n    outline: none;\n    font-weight: bold;\n    &::placeholder {\n        color: #c1c1d7;\n    }\n`;\n\nconst TaskTimeInputDiv = styled.div`\n    display: flex;\n    align-items: center;\n    height: 90%;\n    width: 25%;\n    color: #c1c1d7;\n    span {\n        font-size: 0.7em;\n        font-weight: bold;\n    }\n    svg {\n        font-size: 1.2em;\n        color: #FABB18;\n    }\n`;\n\nconst TaskTimeInputField = styled.input`\n    height: 100%;\n    width: 30%;\n    font-size: 0.9em;\n    text-align: center;\n    background-color: #fff;\n    border: 0;\n    outline: none;\n    font-weight: bold;\n    &::placeholder {\n        color: #c1c1d7;\n    }\n    &::-webkit-inner-spin-button,\n    &::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        appearance: none;\n        margin: 0;\n    }\n`;\n\nexport default function TaskInput() {\n    const [task, setTask] = useState(\"\");\n    const [time, setTime] = useState(20);\n    let taskContentInputRef, taskTimeInputRef;\n    const meta = useSelector((s) => s.tasks.meta);\n    const labels = useSelector((s) => s.tasks.labels);\n    const dispatch = useDispatch();\n\n    function submitTask(e) {\n        if (e.key === \"Enter\" && task.trim().length >= 1) {\n            let temp = task.trim().split(\" \");\n            // add a max time limit\n            let taskTime = time;\n            let label = null;\n            if (temp.length !== 1) {\n                if (!isNaN(parseInt(temp[temp.length - 1]))) {\n                    taskTime = parseInt(temp.pop());\n                } else if (temp[temp.length - 1][0] === \"#\" && temp[temp.length - 1].length > 1 && \"wpfmeWPFME\".includes(temp[temp.length - 1][1])) {\n                    let userLabel = temp[temp.length - 1].substring(1).toLowerCase();\n                    let found = false;\n                    for (let validLabel in labels) {\n                        found = validLabel.includes(userLabel);\n                        console.log(userLabel,validLabel)\n                        if (found) {\n                            label = validLabel;\n                            temp.pop();\n                            break;\n                        }\n                    }\n                }\n            }\n\n            temp = temp.join(\" \");\n            let newTask = {\n                id: Math.floor(Math.random() * 10000),\n                globalKey: meta.globalKey,\n                content: temp,\n                time: taskTime,\n                remainingTime: taskTime,\n                isRunning: false,\n                isCompleted: false,\n                createdAt: new Date().toISOString(),\n                label: label,\n            };\n            if (meta.focussedTaskIndex !== -1) dispatch(focusOnTask(meta.focussedTaskIndex + 1));\n            dispatch(create(newTask));\n            dispatch(incrementGlobalKey());\n            if (label !== null) dispatch(updateLabelCount({ oldLabel: null, newLabel: label }));\n            setTask(\"\");\n            setTime(20);\n            taskContentInputRef.value = \"\";\n            taskTimeInputRef.value = \"\";\n            taskContentInputRef.focus();\n        }\n    }\n\n    return (\n        <TaskInputContainer>\n            <TaskContentInputDiv>\n                <AiFillPlusCircle onClick={() => taskContentInputRef.focus()} />\n                <TaskContentInputField\n                    type=\"text\"\n                    placeholder=\"i have to focus on ...\"\n                    ref={(el) => (taskContentInputRef = el)}\n                    onChange={(e) => setTask(e.target.value)}\n                    onKeyDown={submitTask}\n                />\n            </TaskContentInputDiv>\n            <TaskTimeInputDiv>\n                <AiFillClockCircle onClick={() => taskTimeInputRef.focus()} />\n                <TaskTimeInputField\n                    type=\"number\"\n                    placeholder=\"20\"\n                    ref={(el) => (taskTimeInputRef = el)}\n                    onChange={(e) => setTime(e.target.value)}\n                    onKeyDown={submitTask}\n                />\n                <span>mins</span>\n            </TaskTimeInputDiv>\n        </TaskInputContainer>\n    );\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { BiShow, BiHide } from \"react-icons/bi\";\nimport { AiOutlineClear } from \"react-icons/ai\";\nimport { Flipped } from \"react-flip-toolkit\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { clearCompletedTasks, toggleShowCompletedTasks } from \"./../../containers/taskBoard/taskBoardSlice\";\n\nconst DoneTasksDivider = styled.div`\n    display: flex;\n    margin: 15px 0 15px 25px;\n`;\nconst DividerLine = styled.div`\n    width: 100%;\n    position: relative;\n    margin: 15px;\n    border-bottom: 3px solid #FABB18;\n`;\n\nconst DividerIcon = styled.div`\n    width: 90px;\n    position: relative;\n    top: 3px;\n    color: #FABB18;\n    p {\n        margin: 0;\n        font-weight: bold;\n        letter-spacing:${(p)=>p.showCompletedTasks?\"3px\":\"1px\"};\n    }\n`;\n\nconst DividerActionDiv = styled.div`\n    display: flex;\n    width: 70px;\n    height: 30px;\n    justify-content: space-around;\n    align-items: center;\n    border-radius: 5px;\n    background-color: #fff;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    svg {\n        color: #FABB18;\n        cursor:pointer;\n    }\n`;\n\nexport default function Divider() {\n    const [showActionBtn, setShowActionBtn] = useState(false);\n    const showCompletedTasks = useSelector((s) => s.tasks.meta.showCompletedTasks);\n    const completedTasksCount = useSelector((s)=>s.tasks.meta.completedTasksCount);\n    const dispatch = useDispatch();\n    return (\n        <Flipped flipId={`-1`}>\n            <DoneTasksDivider>\n                <DividerLine />\n                <DividerIcon showCompletedTasks={showCompletedTasks} onMouseEnter={() => setShowActionBtn(true)} onMouseLeave={() => setShowActionBtn(false)}>\n                    {showActionBtn ? (\n                        <DividerActionDiv>\n                            {showCompletedTasks ? (\n                                <BiHide onClick={() => dispatch(toggleShowCompletedTasks())} />\n                            ) : (\n                                <BiShow onClick={() => dispatch(toggleShowCompletedTasks())} />\n                            )}\n                            <AiOutlineClear onClick={() => dispatch(clearCompletedTasks())} />\n                        </DividerActionDiv>\n                    ) : (\n                        <p>{showCompletedTasks?\"DONE\":`DONE(${completedTasksCount})`}</p>\n                        \n                    )}\n                </DividerIcon>\n                <DividerLine />\n            </DoneTasksDivider>\n        </Flipped>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/noTasks.6827a406.svg\";","import React from \"react\";\nimport styled from \"styled-components\";\nimport noTasks from \"./../../images/noTasks.svg\";\nimport ReactTooltip from \"react-tooltip\";\n\nconst NoTasksDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-evenly;\n    width: ${(p)=>p.allCompleted?\"40%\":\"70%\"};\n    margin: 30px 10px;\n`;\n\nconst NoTasksIcon = styled.div`\n    img {\n        width: 90%;\n    }\n`;\n\nconst NoTasksText = styled.div`\n    p {\n        font-weight: bold;\n        margin: 0;\n        color: #c1c1d7;\n    }\n`;\n\nexport default function NoTasks({ allCompleted }) {\n    return (\n        <NoTasksDiv allCompleted={allCompleted}>\n            <NoTasksIcon data-tip=\"\" data-for=\"taskIcon\">\n                <img src={noTasks} alt={\"No Tasks\"} />\n                <ReactTooltip id=\"taskIcon\" getContent={()=>allCompleted ? \"create more tasks\" : \"create task to begin\"} />\n            </NoTasksIcon>\n        </NoTasksDiv>\n    );\n}\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateOrder } from \"./taskBoardSlice\";\nimport TaskCard from \"./../../components/TaskBoard/TaskCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Flipper } from \"react-flip-toolkit\";\nimport { focusOnTask } from \"./taskBoardSlice\";\nimport styled from \"styled-components\";\nimport TaskInput from \"./../../components/TaskBoard/TaskInput\";\nimport Divider from \"./../../components/TaskBoard/Divider\";\nimport NoTasks from \"../../components/TaskBoard/NoTasks\";\n\nconst TaskBoardContainer = styled.div`\n    flex: 1 1 0;\n    display: flex;\n    min-width:396px;\n    flex-direction: column;\n    align-items: center;\n    overflow-y:scroll; // to enable scrolling by default for this flex-container only\n    /* background-color:orange; */\n`;\n\nexport function TaskBoard() {\n    const tasks = useSelector((state) => state.tasks.taskArray);\n    const meta = useSelector((state) => state.tasks.meta);\n    let focussedTask = meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex] : null;\n    const dispatch = useDispatch();\n\n    function handleOnDragEnd(result) {\n        if (!result.destination) return;\n\n        let items = [...tasks.map((i) => ({ ...i }))];\n        const [reorderedItem] = items.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorderedItem);\n\n        let i = result.source.index;\n        let direction = result.destination.index > result.source.index; // direction true means moving right & swapping\n        // below is logic to reset globalKeys to maintain correct sort order.\n        while (i != result.destination.index) {\n            if (direction) {\n                items[i].globalKey = tasks[i].globalKey;\n                i++;\n            } else {\n                items[i].globalKey = tasks[i].globalKey;\n                i--;\n            }\n            if (i == result.destination.index) {\n                items[i].globalKey = tasks[i].globalKey;\n            }\n        }\n\n        if (meta.focussedTaskIndex !== -1) {\n            let greaterIndex = Math.max(result.destination.index, result.source.index);\n            let smallerIndex = Math.min(result.destination.index, result.source.index);\n\n            if (result.source.index === meta.focussedTaskIndex) {\n                dispatch(focusOnTask(result.destination.index));\n            } else if (meta.focussedTaskIndex >= smallerIndex && meta.focussedTaskIndex <= greaterIndex) {\n                if (result.destination.index > result.source.index) {\n                    dispatch(focusOnTask(meta.focussedTaskIndex - 1)); // -1\n                } else {\n                    dispatch(focusOnTask(meta.focussedTaskIndex + 1)); // +1\n                }\n            }\n        }\n\n        dispatch(updateOrder(items)); // order is imp. focus then updateOrder\n    }\n\n    function getFlipKey() {\n        let flipKey = \"\";\n        tasks.forEach((i) => {\n            flipKey += `${i.globalKey}`;\n        });\n        flipKey += `${meta.completedTaskStartIndex}`;\n        return flipKey;\n    }\n\n    function isFocussed(id) {\n        if (focussedTask !== null && focussedTask.id === id) return true;\n        return false;\n    }\n\n    // input has both onChange and onKeyDown - can be optimised by using one and combining\n\n    return (\n        <TaskBoardContainer>\n            <TaskInput focussedTaskIndex={meta.focussedTaskIndex} />\n            {tasks.length === 0 ? <NoTasks /> : tasks.length === meta.completedTasksCount && <NoTasks allCompleted={true} />}\n            <Flipper flipKey={getFlipKey()}>\n                <DragDropContext onDragEnd={handleOnDragEnd}>\n                    <Droppable droppableId=\"dropArea\">\n                        {(provided) => (\n                            <div {...provided.droppableProps} ref={provided.innerRef}>\n                                {tasks.map((i, index) =>\n                                    !i.isCompleted ? (\n                                        <Draggable isDragDisabled={i.isCompleted} key={i.id} draggableId={`${i.id}`} index={index}>\n                                            {(provided2) => (\n                                                <TaskCard\n                                                    focussedTaskIndex={meta.focussedTaskIndex}\n                                                    focussedTaskGlobalKey={meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1}\n                                                    taskIndex={index}\n                                                    forwardRBDProvided={provided2}\n                                                    task={i}\n                                                    isFocussed={isFocussed(i.id)}\n                                                />\n                                            )}\n                                        </Draggable>\n                                    ) : (\n                                        \"\"\n                                    )\n                                )}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n\n                {meta.completedTaskStartIndex !== -1 && <Divider />}\n\n                {meta.showCompletedTasks &&\n                    tasks.map((i, index) =>\n                        i.isCompleted ? (\n                            <TaskCard\n                                focussedTaskIndex={meta.focussedTaskIndex}\n                                focussedTaskGlobalKey={meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1}\n                                taskIndex={index}\n                                key={i.id}\n                                forwardRBDProvided={{ innerRef: null }}\n                                task={i}\n                                isFocussed={isFocussed(i.id)}\n                            />\n                        ) : (\n                            \"\"\n                        )\n                    )}\n            </Flipper>\n        </TaskBoardContainer>\n    );\n}\n","import React from \"react\";\n\nexport function MobileView() {\n    return <div style={{ backgroundColor: \"#FABB18\", width: \"100%\", height: \"100%\", color: \"#000\" }}>Not Supported on mobile</div>;\n}\n","import React from \"react\";\r\nimport { Menu } from \"./menu/Menu\";\r\nimport Dashboard from \"./dashboard\";\r\nimport { TaskBoard } from \"./taskBoard/TaskBoard\";\r\nimport styled from \"styled-components\";\r\nimport { isMobile } from \"react-device-detect\";\r\nimport { MobileView } from \"./mobileView\";\r\n\r\nconst AppContainer = styled.div`\r\n    display: flex;\r\n    height: 100%;\r\n`;\r\n\r\nfunction App() {\r\n    if (!isMobile)\r\n        return (\r\n            <AppContainer>\r\n                <Menu />\r\n                <Dashboard />\r\n                <TaskBoard />\r\n            </AppContainer>\r\n        );\r\n    else {\r\n        return (\r\n            <AppContainer>\r\n                <MobileView />\r\n            </AppContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"../containers/taskBoard/taskBoardSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}