{"version":3,"sources":["containers/taskBoard/taskBoardSlice.js","containers/focusBoard/focusBoardSlice.js","helpers/index.js","components/TaskBoard/TaskCard.js","components/TaskBoard/TaskInput.js","components/TaskBoard/Divider.js","containers/taskBoard/TaskBoard.js","sounds/ding.mp3","containers/focusBoard/FocusBoard.js","hooks/useTimer.js","containers/App.js","store/index.js","serviceWorker.js","index.js"],"names":["tasksSlice","createSlice","name","initialState","taskArray","meta","globalKey","completedTaskStartIndex","reducers","create","tasks","payload","unshift","remove","filter","i","id","isCompleted","length","updateTask","map","updateTaskContent","forEach","content","updatedTaskContent","updateOrder","toggleIsCompleted","incrementGlobalKey","rearrange","markedAsComplete","found","temp","task","idx","pos","push","splice","actions","reset","toggleIsRunning","tick","focusBoardSlice","focussedTask","focusOnTask","focusBoard","resetFocussedTask","remainingTime","isRunning","undefined","resetTask","time","updateTaskTime","formattedTimeString","x","secs","mins","Math","floor","TaskCardContainer","styled","div","TaskCardDragIcon","TaskCardDiv","props","isFocussed","TaskDetailsDiv","TaskContentDiv","TaskEditInput","textarea","TaskStatusDiv","p","TaskActionButton","TaskDeleteButton","TaskControllerDiv","TaskCard","str","forwardRBDProvided","dispatch","useDispatch","useState","taskUnderEdit","setTaskUnderEdit","setUpdatedTaskContent","showDragIcon","setShowDragIcon","flipId","ref","innerRef","draggableProps","dragHandleProps","onMouseEnter","onMouseLeave","autoFocus","value","onBlur","onKeyDown","e","key","trim","split","isNaN","parseInt","pop","join","onChange","target","style","minWidth","onDoubleClick","substring","onClick","stopPropagation","TaskInputContainer","TaskContentInputDiv","TaskContentInputField","input","TaskTimeInputDiv","TaskTimeInputField","TaskInput","taskContentInputRef","taskTimeInputRef","setTask","setTime","useSelector","state","submitTask","taskTime","newTask","random","createdAt","Date","toISOString","focus","type","placeholder","el","DoneTasksDivider","DividerLine","DividerIcon","Divider","TaskBoardContainer","TaskBoard","flipKey","getFlipKey","onDragEnd","result","destination","items","source","index","reorderedItem","direction","droppableId","provided","droppableProps","isDragDisabled","draggableId","provided2","dingSoundElement","Audio","dingSound","FocusBoardContainer","FocussedTaskDiv","FocussedTaskTimer","TimerDiv","ButtonContainer","FocussedTaskContent","FocussedTaskController","FocusBoard","updateTaskTimeHandler","val","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useTimer","play","width","height","styles","buildStyles","strokeLinecap","pathColor","trailColor","fontSize","resetHandler","Container","App","configureStore","reducer","tasksReducer","focusBoardReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c43cd5ce.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        taskArray: [],\n        meta: {\n            globalKey: 0,\n            completedTaskStartIndex: -1,\n        },\n    },\n    reducers: {\n        create: (tasks, { payload }) => {\n            tasks.taskArray.unshift(payload);\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\n        },\n        remove: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.filter((i) => {\n                if (i.id !== payload) return true;\n                else {\n                    if (!i.isCompleted) {\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\n                    } else if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length - 1) {\n                        tasks.meta.completedTaskStartIndex = -1;\n                    }\n                    return false;\n                }\n            });\n        },\n        updateTask: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.map((i) => (i.id === payload.id ? payload : i));\n        },\n        updateTaskContent: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.content = payload.updatedTaskContent;\n                }\n            });\n        },\n        updateOrder: (tasks, { payload }) => {\n            tasks.taskArray = payload;\n        },\n        // tick: ({ taskArray }, { payload }) => {\n        //     taskArray.forEach((i) => {\n        //         if (i.id === payload) {\n        //             i.remainingTime = i.remainingTime - 1;\n        //         }\n        //     });\n        // },\n        // reset: ({taskArray}, { payload }) => {\n        //     taskArray.forEach((i) => {\n        //         if (i.id === payload) {\n        //             i.remainingTime = i.time;\n        //             i.isRunning = false;\n        //         }\n        //     });\n        // },\n        // toggleIsRunning: ({ taskArray }, { payload }) => {\n        //     taskArray.forEach((i) => {\n        //         if (i.id === payload) {\n        //             i.isRunning = !i.isRunning;\n        //         }\n        //     });\n        // },\n        toggleIsCompleted: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.isCompleted = !i.isCompleted;\n                }\n            });\n        },\n        incrementGlobalKey: ({ meta }) => {\n            ++meta.globalKey;\n        },\n        rearrange: (tasks, { payload }) => {\n            let id = payload.id;\n\n            if (payload.markedAsComplete) {\n                if (tasks.meta.completedTaskStartIndex === -1) {\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                    let found = false;\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\n                        if (found) {\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        } else if (tasks.taskArray[i].id === id) {\n                            found = true;\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }\n                    }\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                } else {\n                    let task, idx;\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n                    let pos = -1;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    if (pos === -1) {\n                        tasks.taskArray.push(task);\n                    } else {\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.meta.completedTaskStartIndex -= 1;\n                }\n            } else {\n                if (tasks.meta.completedTaskStartIndex == 0) {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.taskArray.unshift(task);\n                    tasks.meta.completedTaskStartIndex = 1;\n                } else {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    let start = tasks.meta.completedTaskStartIndex - 1;\n                    let pos = -1;\n                    for (let i = start; i >= 0; i--) {\n                        if (tasks.taskArray[i].globalKey < task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    if (pos === -1) {\n                        tasks.taskArray.unshift(task);\n                    } else {\n                        pos++;\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.meta.completedTaskStartIndex += 1;\n                }\n\n                if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length) {\n                    tasks.meta.completedTaskStartIndex = -1;\n                }\n            }\n        },\n    },\n});\n\nexport const {\n    create,\n    remove,\n    updateTask,\n    updateTaskContent,\n    reset,\n    toggleIsRunning,\n    tick,\n    toggleIsCompleted,\n    updateOrder,\n    incrementGlobalKey,\n    rearrange,\n} = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const focusBoardSlice = createSlice({\n    name: \"focusBoard\",\n    initialState: {\n        focussedTask: null,\n    },\n    reducers: {\n        focusOnTask: (focusBoard, { payload }) => {\n            focusBoard.focussedTask = payload;\n        },\n        resetFocussedTask: (focusBoard) => {\n            focusBoard.focussedTask = null;\n        },\n        tick: (focusBoard) => {\n            --focusBoard.focussedTask.remainingTime;\n        },\n        toggleIsRunning: (focusBoard, { payload }) => {\n            if (payload !== undefined) focusBoard.focussedTask.isRunning = payload;\n            else focusBoard.focussedTask.isRunning = !focusBoard.focussedTask.isRunning;\n        },\n        resetTask: (focusBoard) => {\n            focusBoard.focussedTask.isRunning = false;\n            focusBoard.focussedTask.remainingTime = focusBoard.focussedTask.time;\n        },\n        updateTaskTime: (focusBoard, { payload }) => {\n            focusBoard.focussedTask.time += payload * 60;\n            focusBoard.focussedTask.remainingTime += payload * 60;\n        },\n    },\n});\n\nexport const { focusOnTask, resetFocussedTask, tick, resetTask, toggleIsRunning, updateTaskTime } = focusBoardSlice.actions;\n\nexport default focusBoardSlice.reducer;\n","export function formattedTimeString(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}:${secs}`;\n}\n\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { remove, updateTaskContent, toggleIsCompleted, rearrange, updateTask } from \"../../containers/taskBoard/taskBoardSlice\";\nimport { focusOnTask, resetFocussedTask , toggleIsRunning} from \"../../containers/focusBoard/focusBoardSlice\";\nimport styled from \"styled-components\";\nimport { FaRegLightbulb, FaLightbulb, FaCheckCircle } from \"react-icons/fa\";\nimport { BsTrashFill } from \"react-icons/bs\";\nimport { Flipped } from \"react-flip-toolkit\";\nimport { GrDrag } from \"react-icons/gr\";\nimport { formattedTimeString } from \"../../helpers\";\n\nconst TaskCardContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    width: 476px;\n    height: 120px;\n    margin-top: 25px;\n    /* background-color: #fff4e1; */\n`;\n\nconst TaskCardDragIcon = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    width: 30px;\n    height: 100%;\n    /* background-color: #ff09ac; */\n    svg {\n        cursor: url(\"https://ssl.gstatic.com/ui/v1/icons/mail/images/2/openhand.cur\"), default !important;\n        font-size: 2em;\n        opacity: 0.6;\n    }\n`;\n\nconst TaskCardDiv = styled.div`\n    display: flex;\n    justify-content: space-around;\n    flex-direction: row;\n    height: 100%;\n    width: 420px;\n    border-radius: 5px;\n    -webkit-box-shadow: ${(props) => (props.isFocussed ? \"0 0 6px rgb(255, 216, 0, 0.6)\" : \"0 0 4px rgb(0, 0, 0, 0.2)\")};\n    box-shadow: ${(props) => (props.isFocussed ? \"0 0 6px rgb(255, 216, 0, 0.6)\" : \"0 0 4px rgb(0, 0, 0, 0.2)\")};\n    border: ${(props) => (props.isFocussed ? \"2px solid #ffd800\" : \"none\")};\n`;\n\nconst TaskDetailsDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    height: 100%;\n    width: 75%;\n    margin: 0 0 0 10px;\n    /* background-color: #fff1fc; */\n`;\n\nconst TaskContentDiv = styled.div`\n    display: flex;\n    align-items: center;\n    height: 65%;\n    margin: 0 0 0 5px;\n    word-wrap: break-word;\n    /* background-color: #fffcec; */\n    h3:hover {\n        cursor: text;\n    }\n`;\n\nconst TaskEditInput = styled.textarea`\n    resize: none;\n    height: 90%;\n    width: 100%;\n    font-size: 1.17em;\n    font-weight: bold;\n    overflow: hidden;\n    vertical-align: center;\n    &:focus {\n        outline: none;\n        border: 2px #7e8d9f dashed;\n        border-radius: 5px;\n    }\n`;\n\nconst TaskStatusDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    width: 15%;\n    /* background-color: #f8f8ff; */\n    position: relative;\n    p {\n        margin: 5px;\n        font-size: 0.8em;\n    }\n    svg {\n        font-size: 2.5em;\n        color: ${(p) => (p.isCompleted ? \"#00a86b\" : p.isFocussed ? \"#ffd800\" : \"#000\")};\n    }\n`;\n\nconst TaskActionButton = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 80%;\n    border-radius: 5px;\n    margin: 5px;\n    cursor: pointer;\n    &:hover {\n        background-color: #c0c0c0;\n    }\n    p {\n        margin: 5px;\n        font-size: 0.7em;\n    }\n`;\n\nconst TaskDeleteButton = styled.div`\n    height: 80%;\n    cursor: pointer;\n    margin-left: auto;\n    color: #d0d0d0;\n    &:hover {\n        color: #e44d2e;\n    }\n`;\n\nconst TaskControllerDiv = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    height: 25%;\n    /* background-color: #fffa91; */\n    svg {\n        font-size: 20px;\n        margin: 5px;\n    }\n`;\n\nfunction previewTask(str) {\n    if (str.length <= 70) return str;\n    else return str.substring(0, 70) + \"...\";\n}\n\nexport default function TaskCard({ task, forwardRBDProvided, isFocussed }) {\n    const dispatch = useDispatch();\n\n    const [taskUnderEdit, setTaskUnderEdit] = useState(false);\n    const [updatedTaskContent, setUpdatedTaskContent] = useState(task.content);\n    const [showDragIcon, setShowDragIcon] = useState(false);\n\n    function submitUpdatedTaskContent(e) {\n        if (e.key === \"Enter\" && updatedTaskContent.trim().length >= 3) {\n            let temp = updatedTaskContent.trim().split(\" \");\n            let time = 0;\n            if (temp.length !== 1 && !isNaN(parseInt(temp[temp.length - 1]))) {\n                time = parseInt(temp.pop());\n            }\n            temp = temp.join(\" \");\n            // manage to update time also\n            dispatch(updateTaskContent({ id: task.id, updatedTaskContent }));\n            setTaskUnderEdit(false);\n        }\n    }\n\n    return (\n        <Flipped flipId={`${task.id}`}>\n            <TaskCardContainer\n                ref={forwardRBDProvided.innerRef}\n                {...forwardRBDProvided.draggableProps}\n                {...forwardRBDProvided.dragHandleProps}\n                onMouseEnter={() => setShowDragIcon(!task.isCompleted && true)}\n                onMouseLeave={() => setShowDragIcon(!task.isCompleted && false)}\n            >\n                <TaskCardDragIcon>{showDragIcon && <GrDrag />}</TaskCardDragIcon>\n\n                <TaskCardDiv isFocussed={isFocussed}>\n                    <TaskStatusDiv isFocussed={isFocussed} isCompleted={task.isCompleted}>\n                        {task.isCompleted ? <FaCheckCircle /> : isFocussed ? <FaLightbulb /> : <FaRegLightbulb />}\n                        {!task.isCompleted && <p>{formattedTimeString(task.remainingTime)}</p>}\n                    </TaskStatusDiv>\n\n                    <TaskDetailsDiv>\n                        <TaskContentDiv>\n                            {taskUnderEdit ? (\n                                <TaskEditInput\n                                    autoFocus\n                                    value={updatedTaskContent}\n                                    onBlur={() => {\n                                        dispatch(updateTaskContent({ id: task.id, updatedTaskContent }));\n                                        setTaskUnderEdit(false);\n                                    }}\n                                    onKeyDown={submitUpdatedTaskContent}\n                                    onChange={(e) => setUpdatedTaskContent(e.target.value)}\n                                />\n                            ) : (\n                                <h3 style={{ minWidth: 0 }} onDoubleClick={() => setTaskUnderEdit(true)}>\n                                    {previewTask(task.content)}\n                                </h3>\n                            )}\n                        </TaskContentDiv>\n\n                        <TaskControllerDiv>\n                            {!task.isCompleted && (\n                                <TaskActionButton\n                                    onClick={() => {\n                                        isFocussed ? dispatch(resetFocussedTask()) : dispatch(focusOnTask(task));\n                                    }}\n                                >\n                                    <p>{isFocussed ? \"Unfocus\" : \"Focus\"}</p>\n                                </TaskActionButton>\n                            )}\n\n                            <TaskActionButton\n                                onClick={\n                                    task.isCompleted\n                                        ? (e) => {\n                                              dispatch(toggleIsCompleted(task.id));\n                                              dispatch(rearrange({ id: task.id, markedAsComplete: false }));\n                                              e.stopPropagation();\n                                          }\n                                        : (e) => {\n                                              dispatch(toggleIsCompleted(task.id));\n                                              dispatch(rearrange({ id: task.id, markedAsComplete: true }));\n                                              if(isFocussed)dispatch(resetFocussedTask());\n                                              e.stopPropagation();\n                                          }\n                                }\n                            >\n                                <p>{task.isCompleted ? \"Undone\" : \"Done\"}</p>\n                            </TaskActionButton>\n\n                            {!isFocussed && (\n                                <TaskDeleteButton\n                                    onClick={(e) => {\n                                        dispatch(remove(task.id));\n                                        e.stopPropagation();\n                                        if (isFocussed) {\n                                            dispatch(resetFocussedTask());\n                                        }\n                                    }}\n                                >\n                                    <BsTrashFill />\n                                </TaskDeleteButton>\n                            )}\n                        </TaskControllerDiv>\n                    </TaskDetailsDiv>\n                </TaskCardDiv>\n            </TaskCardContainer>\n        </Flipped>\n    );\n}\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { create, incrementGlobalKey } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport styled from \"styled-components\";\nimport { MdAddCircle } from \"react-icons/md\";\nimport { ImClock2 } from \"react-icons/im\";\n\nconst TaskInputContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin: 20px;\n    width: 476px;\n    border-bottom: 5px solid black;\n    height: 50px;\n`;\n\nconst TaskContentInputDiv = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    height: 80%;\n    width: 70%;\n    margin-left:10px;\n    svg {\n        font-size: 1.3em;\n    }\n`;\n\nconst TaskContentInputField = styled.input`\n    height: 100%;\n    width: 90%;\n    font-size: 1em;\n    font-weight: bold;\n    border: 0;\n    outline: none;\n`;\n\nconst TaskTimeInputDiv = styled.div`\n    display: flex;\n    align-items: center;\n    height: 80%;\n    width: 25%;\n    span {\n        font-size: 0.8em;\n        font-weight:bold;\n        color:rgb(118,118,118);\n    }\n`;\n\nconst TaskTimeInputField = styled.input`\n    height: 100%;\n    width: 35%;\n    font-size: 1em;\n    font-weight: bold;\n    text-align:center;\n    border: 0;\n    outline: none;\n    &::-webkit-inner-spin-button,\n    &::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        appearance: none;\n        margin: 0;\n    }\n`;\n\nexport default function TaskInput() {\n    const [task, setTask] = useState(\"\");\n    const [time, setTime] = useState(20);\n    let taskContentInputRef, taskTimeInputRef;\n    const meta = useSelector((state) => state.tasks.meta);\n    const dispatch = useDispatch();\n\n    function submitTask(e) {\n        if (e.key === \"Enter\" && task.trim().length >= 1) {\n            let temp = task.trim().split(\" \");\n            // add a max time limit\n            let taskTime = time;\n            if (temp.length !== 1 && !isNaN(parseInt(temp[temp.length - 1]))) {\n                taskTime = parseInt(temp.pop());\n            }\n            temp = temp.join(\" \");\n\n            let newTask = {\n                id: Math.floor(Math.random() * 10000),\n                globalKey: meta.globalKey,\n                content: temp,\n                time: taskTime * 60,\n                remainingTime: taskTime * 60,\n                isRunning: false,\n                isCompleted: false,\n                createdAt: new Date().toISOString(),\n            };\n            dispatch(create(newTask));\n            dispatch(incrementGlobalKey());\n            setTask(\"\");\n            setTime(20);\n            taskContentInputRef.value = \"\";\n            taskTimeInputRef.value = \"\";\n            taskContentInputRef.focus();\n        }\n    }\n\n    return (\n        <TaskInputContainer>\n            <TaskContentInputDiv>\n                <MdAddCircle />\n                <TaskContentInputField\n                    type=\"text\"\n                    placeholder=\"i have to focus on ...\"\n                    ref={(el) => (taskContentInputRef = el)}\n                    onChange={(e) => setTask(e.target.value)}\n                    onKeyDown={submitTask}\n                />\n            </TaskContentInputDiv>\n            <TaskTimeInputDiv>\n                <ImClock2 />\n                <TaskTimeInputField\n                    type=\"number\"\n                    placeholder=\"20\"\n                    ref={(el) => (taskTimeInputRef = el)}\n                    onChange={(e) => setTime(e.target.value)}\n                    onKeyDown={submitTask}\n                />\n                <span>mins</span>\n            </TaskTimeInputDiv>\n        </TaskInputContainer>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { FaCheckCircle } from \"react-icons/fa\";\nimport { Flipped } from \"react-flip-toolkit\";\n\nconst DoneTasksDivider = styled.div`\n    display: flex;\n`;\nconst DividerLine = styled.div`\n    width: 100%;\n    position: relative;\n    margin: 15px;\n    border-bottom: 5px dashed #c0c0c0;\n`;\n\nconst DividerIcon = styled.div`\n    width: 50px;\n    position: relative;\n    top: 3px;\n    color: #00a86b;\n    svg {\n        font-size: 2em;\n    }\n`;\n\nexport default function Divider() {\n    return (\n        <Flipped flipId={`-1`}>\n            <DoneTasksDivider>\n                <DividerLine />\n                <DividerIcon>\n                    <FaCheckCircle />\n                </DividerIcon>\n                <DividerLine />\n            </DoneTasksDivider>\n        </Flipped>\n    );\n}\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateOrder } from \"./taskBoardSlice\";\nimport TaskCard from \"./../../components/TaskBoard/TaskCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Flipper } from \"react-flip-toolkit\";\nimport styled from \"styled-components\";\nimport TaskInput from \"./../../components/TaskBoard/TaskInput\";\nimport Divider from \"./../../components/TaskBoard/Divider\";\n\nconst TaskBoardContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    flex: 3 1 0;\n`;\n\nexport function TaskBoard() {\n    const tasks = useSelector((state) => state.tasks.taskArray);\n    const meta = useSelector((state) => state.tasks.meta);\n    const focussedTask = useSelector((state) => state.focusBoard.focussedTask);\n    const dispatch = useDispatch();\n\n    function handleOnDragEnd(result) {\n        if (!result.destination) return;\n\n        let items = [...tasks.map((i) => ({ ...i }))];\n        //let items = [...tasks]\n        // let x = JSON.stringify(items);\n        // items = JSON.parse(x);\n\n        const [reorderedItem] = items.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorderedItem);\n\n        let i = result.source.index;\n        let direction = result.destination.index > result.source.index; // direction true means moving right & swapping\n        while (i != result.destination.index) {\n            if (direction) {\n                items[i].globalKey = tasks[i].globalKey;\n                i++;\n            } else {\n                items[i].globalKey = tasks[i].globalKey;\n                i--;\n            }\n            if (i == result.destination.index) {\n                items[i].globalKey = tasks[i].globalKey;\n            }\n        }\n\n        dispatch(updateOrder(items));\n    }\n\n    function getFlipKey() {\n        let flipKey = \"\";\n        tasks.forEach((i) => {\n            flipKey += `${i.globalKey}`;\n        });\n        flipKey += `${meta.completedTaskStartIndex}`;\n        return flipKey;\n    }\n\n    function isFocussed(id) {\n        if (focussedTask !== null && focussedTask.id === id) return true;\n        return false;\n    }\n\n    // input has both onChange and onKeyDown - can be optimised by using one and combining\n\n    return (\n        <TaskBoardContainer>\n            <TaskInput />\n\n            <Flipper flipKey={getFlipKey()}>\n                <DragDropContext onDragEnd={handleOnDragEnd}>\n                    <Droppable droppableId=\"dropArea\">\n                        {(provided) => (\n                            <div {...provided.droppableProps} ref={provided.innerRef}>\n                                {tasks.map((i, index) =>\n                                    !i.isCompleted ? (\n                                        <Draggable isDragDisabled={i.isCompleted} key={i.id} draggableId={`${i.id}`} index={index}>\n                                            {(provided2) => <TaskCard forwardRBDProvided={provided2} task={i} isFocussed={isFocussed(i.id)} />}\n                                        </Draggable>\n                                    ) : (\n                                        \"\"\n                                    )\n                                )}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n\n                {meta.completedTaskStartIndex !== -1 && meta.completedTaskStartIndex !== 0 && <Divider />}\n\n                {tasks.map((i, index) =>\n                    i.isCompleted ? <TaskCard key={i.id} forwardRBDProvided={{ innerRef: null }} task={i} isFocussed={isFocussed(i.id)} /> : \"\"\n                )}\n            </Flipper>\n        </TaskBoardContainer>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/ding.86b39a2c.mp3\";","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { toggleIsRunning, resetTask, tick, updateTaskTime } from \"./focusBoardSlice\";\nimport { updateTask } from \"../taskBoard/taskBoardSlice\";\nimport useTimer from \"../../hooks/useTimer\";\nimport { formattedTimeString } from \"../../helpers\";\nimport { CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { BsFillPlayFill, BsFillPauseFill } from \"react-icons/bs\";\nimport { ImLoop2 } from \"react-icons/im\";\nimport dingSound from \"./../../sounds/ding.mp3\";\n\nlet dingSoundElement = new Audio(dingSound);\n\nconst FocusBoardContainer = styled.div`\n    flex: 2 1 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    box-shadow: 0 4px 4px rgba(0, 0, 0, 0.2);\n    /* background-color: #f8f8ff; */\n`;\n\nconst FocussedTaskDiv = styled.div`\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    justify-content: space-around;\n    width: 400px;\n    height: 400px;\n    margin: 20px;\n    box-shadow: 0 0 6px rgba(0, 0, 2, 0.3);\n    /* background-color: #fffccc; */\n`;\n\nconst FocussedTaskTimer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 90%;\n    height: 40%;\n    /* background-color: #ffeaca; */\n`;\n\nconst TimerDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 100px;\n    height: 100px;\n    /* background-color: #ff1c1c; */\n    box-shadow: 0 0 6px rgba(0, 0, 0, 0.4);\n    border-radius: 50%;\n`;\n\nconst ButtonContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 40px;\n    height: 40px;\n    /* background-color: #ffaa1c; */\n    box-shadow: 0 0 2px rgba(0, 0, 0, 0.4);\n    border-radius: 50%;\n    margin: 15px;\n`;\n\nconst FocussedTaskContent = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n    width: 90%;\n    height: 30%;\n    word-wrap: break-word;\n    /* background-color: #ffea1c; */\n`;\n\nconst FocussedTaskController = styled.div`\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n    width: 90%;\n    height: 20%;\n    /* background-color: #efaaa1; */\n`;\n\nexport function FocusBoard() {\n    const focussedTask = useSelector((state) => state.focusBoard.focussedTask);\n    const dispatch = useDispatch();\n\n    const delay = 1000;\n    useTimer(\n        () => {\n            if (focussedTask === null) return;\n            else if (focussedTask.remainingTime > 0) {\n                dispatch(tick());\n            } else if (focussedTask.remainingTime === 0) {\n                dispatch(toggleIsRunning());\n                dingSoundElement.play();\n            }\n        },\n        focussedTask !== null && focussedTask.isRunning ? delay : null\n    );\n\n    function playStateHandler(task) {\n        if(task.isCompleted) return;\n        dispatch(toggleIsRunning());\n        // this is done to update remaining time in the corresponding task inside arr of tasks(when pause clicked)\n        if(task.isRunning){\n            let temp = { ...task };\n            temp.isRunning = false;\n            dispatch(updateTask(task));\n        }\n    }\n\n    function resetHandler(task) {\n        if(task.isCompleted) return;\n        dispatch(resetTask());\n        let temp = { ...task };\n        // below is done to update remaining time in corresponding task inside arr of tasks (when reset clicked)\n        temp.isRunning = false;\n        temp.remainingTime = temp.time;\n        dispatch(updateTask(temp));\n    }\n\n    function updateTaskTimeHandler(task, val) {\n        if(task.isCompleted) return;\n        dispatch(toggleIsRunning(false));\n        dispatch(updateTaskTime(val));\n        let temp = { ...task };\n        temp.time += val * 60;\n        temp.remainingTime += val * 60;\n        dispatch(updateTask(temp));\n    }\n\n    return (\n        <FocusBoardContainer>\n            {focussedTask != null && (\n                <div>\n                    <FocussedTaskDiv>\n                        <FocussedTaskTimer>\n                            <ButtonContainer onClick={() => updateTaskTimeHandler(focussedTask, -5)}>\n                                <h4>-5</h4>\n                            </ButtonContainer>\n                            <div style={{ width: 140, height: 140 }}>\n                                <CircularProgressbarWithChildren\n                                    value={Math.floor((focussedTask.remainingTime / focussedTask.time) * 100)}\n                                    styles={buildStyles({\n                                        strokeLinecap: \"butt\",\n                                        pathColor: \"black\",\n                                        trailColor: \"white\",\n                                    })}\n                                >\n                                    <TimerDiv>\n                                        <h3>{formattedTimeString(focussedTask.remainingTime)}</h3>\n                                    </TimerDiv>\n                                </CircularProgressbarWithChildren>\n                            </div>\n                            <ButtonContainer onClick={() => updateTaskTimeHandler(focussedTask, 5)}>\n                                <h4>+5</h4>\n                            </ButtonContainer>\n                        </FocussedTaskTimer>\n                        <FocussedTaskContent>\n                            <h4 style={{ minWidth: 0 }}>{focussedTask.content}</h4>\n                        </FocussedTaskContent>\n                        <FocussedTaskController>\n                            <ButtonContainer onClick={() => playStateHandler(focussedTask)} style={{ fontSize: \"1.5em\" }}>\n                                {focussedTask.isRunning ? <BsFillPauseFill /> : <BsFillPlayFill />}\n                            </ButtonContainer>\n                            <ButtonContainer onClick={() => resetHandler(focussedTask)}>\n                                <ImLoop2 />\n                            </ButtonContainer>\n                        </FocussedTaskController>\n                    </FocussedTaskDiv>\n                </div>\n            )}\n        </FocusBoardContainer>\n    );\n}\n","import { useEffect, useRef } from \"react\";\n\nexport default function useTimer(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n","import React from \"react\";\r\nimport { TaskBoard } from \"./taskBoard/TaskBoard\";\r\nimport { FocusBoard } from \"./focusBoard/FocusBoard\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    height:100%;\r\n`;\r\n\r\nfunction App() {\r\n    return (\r\n        <Container>\r\n            <FocusBoard/>\r\n            <TaskBoard />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"../containers/taskBoard/taskBoardSlice\";\r\nimport focusBoardReducer from \"../containers/focusBoard/focusBoardSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n        focusBoard:focusBoardReducer\r\n    },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}