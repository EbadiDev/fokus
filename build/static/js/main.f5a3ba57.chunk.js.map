{"version":3,"sources":["containers/taskBoard/taskBoardSlice.js","helpers/index.js","images/bulb.svg","images/glowBulb.svg","images/tickmark.svg","components/TaskBoard/TaskLabelSelect.js","components/TaskBoard/TaskCard.js","components/TaskBoard/TaskInput.js","components/TaskBoard/Divider.js","images/tasksDone.svg","components/TaskBoard/NoTasks.js","containers/taskBoard/TaskBoard.js","components/customIcons/index.js","sounds/ding.mp3","components/FocusBoard/FocussedTask.js","hooks/useTimer.js","components/FocusBoard/EmptyFocusBox.js","components/FocusBoard/TaskSummary.js","components/FocusBoard/EmptyTaskSummary.js","containers/focusBoard/FocusBoard.js","sounds/sample5MB.mp3","sounds/none.mp3","components/musicBox/musicUtils.js","images/rain.svg","images/piano.svg","images/none.svg","components/musicBox/MusicVolumeControl.js","components/musicBox/Soundscapes.js","components/FocusBoard/LabelPie.js","containers/miscBoard/MiscBoard.js","images/WIP.svg","containers/menu/Menu.js","containers/App.js","store/index.js","serviceWorker.js","index.js"],"names":["tasksSlice","createSlice","name","initialState","taskArray","labels","work","color","count","personal","fitness","metime","explore","soundscape","track","isPlaying","volume","meta","globalKey","completedTaskStartIndex","focussedTaskIndex","showCompletedTasks","completedTasksCount","reducers","create","tasks","payload","unshift","remove","filter","i","id","isCompleted","length","updateTask","map","updateTaskContent","forEach","content","updatedTaskContent","updateTaskLabel","label","updateTaskTime","remainingTime","updatedTime","time","updateTaskTimeByVal","val","updateOrder","focusOnTask","resetFocussedTask","tick","resetTaskTimer","isRunning","toggleIsRunning","undefined","idx","toggleShowCompletedTasks","toggleIsCompleted","clearCompletedTasks","updateLabelCount","oldLabel","newLabel","incrementGlobalKey","rearrange","markedAsComplete","found","temp","task","pos","push","splice","changeSoundscapeTrack","toggleSoundscapeState","updateSoundscapeVolume","actions","formattedTimeString","x","secs","mins","Math","floor","formattedTimeStringv2","TaskSelectInput","styled","select","TaskLabel","p","useSelector","s","useState","taskLabel","updatedLabel","setUpdatedLabel","autoFocus","onBlur","taskId","defaultValue","onChange","e","target","value","onKeyDown","key","Object","keys","style","TaskCardContainer","div","TaskCardDragIcon","TaskCardDiv","labelColor","isFocussed","TaskStatusDiv","TaskDetailsDiv","TaskContentDiv","TaskEditInput","textarea","TimeEditInput","input","TaskActionButton","TaskLabelContainer","TaskDeleteButton","TaskControllerDiv","TaskCard","str","taskIndex","focussedTaskGlobalKey","forwardRBDProvided","dispatch","useDispatch","taskUnderEdit","setTaskUnderEdit","setUpdatedTaskContent","timeUnderEdit","setTimeUnderEdit","labelUnderEdit","setLabelUnderEdit","setUpdatedTime","showDragIcon","setShowDragIcon","flipId","ref","innerRef","draggableProps","dragHandleProps","onMouseEnter","onMouseLeave","src","tickmark","alt","glowBulb","bulb","onDoubleClick","trim","split","substring","isDoneBtn","onClick","stopPropagation","TaskInputContainer","TaskContentInputDiv","TaskContentInputField","TaskTimeInputDiv","TaskTimeInputField","TaskInput","taskContentInputRef","taskTimeInputRef","setTask","setTime","submitTask","taskTime","isNaN","parseInt","includes","userLabel","toLowerCase","validLabel","pop","join","newTask","random","createdAt","Date","toISOString","focus","type","placeholder","el","DoneTasksDivider","DividerLine","DividerIcon","DividerActionDiv","Divider","showActionBtn","setShowActionBtn","NoTasksDiv","NoTasksIcon","NoTasksText","NoTasks","allCompleted","tasksDone","TaskBoardContainer","TaskBoard","state","focussedTask","flipKey","getFlipKey","onDragEnd","result","destination","items","source","index","reorderedItem","direction","greaterIndex","max","smallerIndex","min","droppableId","provided","droppableProps","isDragDisabled","draggableId","provided2","ResetIcon","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","dingSoundElement","Audio","dingSound","FocussedTaskDiv","FocussedTaskTimer","CountdownTimerDiv","isDisabled","PlayPauseButtonDiv","isPlayBtn","UpdateTimeButtonDiv","ResetButtonDiv","FocussedTaskContent","FocussedTaskController","FocussedTask","updateTaskTimeHandler","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useTimer","play","width","height","styles","buildStyles","pathColor","trailColor","wasTaskRunning","console","log","playPauseHandler","EmptyFocusDiv","NotesIconDiv","EmptyFocusDivText","EmptyFocusBox","TaskSummaryDiv","SummaryDataContainer","ColorDot","SummaryDataDiv","CompletionPercentContainer","TaskSummary","totalTasksCount","completionPercent","percent","trailWidth","strokeColor","EmptyTaskSummaryDiv","EmptySummaryTextContainer","EmptyTaskSummary","FocusBoardContainer","TaskSummaryContainer","FocussedTaskContainer","FocusBoard","soundOptions","nature","img","piano","none","MusicVolumeControl","ssVolume","setVolume","debouncedUpdateSoundscapeVolume","fn","wait","t","clearTimeout","setTimeout","apply","arguments","debounce","vol","axis","xstep","xmin","xmax","SoundscapesContainer","SoundscapesDiv","SoundOptionsDiv","SoundOptionsInput","isSelectedSound","SoundVolumeControl","Soundscapes","trackname","audioElement","loop","generateAudioElement","soundscapeAudioElement","addEventListener","pause","LabelPie","selected","setSelected","hovered","setHovered","labelledTasksCount","labelData","reduce","filtered","title","fontSize","fontWeight","data","radius","PieChart","defaultProps","lineWidth","segmentsStyle","transition","cursor","segmentsShift","animate","dataEntry","labelPosition","labelStyle","pointerEvents","_","onMouseOver","onMouseOut","MiscBoardContainer","MusicBoxContainer","LabelPieContainer","MiscBoard","MenuContainer","Menu","WIP","textAlign","letterSpacing","AppContainer","App","configureStore","reducer","tasksReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f5a3ba57.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst labelOptions = {\n    work: {\n        color: \"#de1738\",\n        count: 0,\n    },\n    personal: {\n        color: \"#89CFF0\",\n        count: 0,\n    },\n    fitness: {\n        color: \"#76ff7a\",\n        count: 0,\n    },\n    metime: {\n        color: \"#7442c8\",\n        count: 0,\n    },\n    explore: {\n        color: \"#efc0fe\",\n        count: 0,\n    },\n};\n\nexport const tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        taskArray: [],\n        labels: labelOptions,\n        soundscape:  {\n            track:\"none\",\n            isPlaying:false,\n            volume:0.6\n        },\n        meta: {\n            globalKey: 0,\n            completedTaskStartIndex: -1,\n            focussedTaskIndex: -1,\n            showCompletedTasks: true,\n            completedTasksCount: 0,\n        },\n    },\n    reducers: {\n        create: (tasks, { payload }) => {\n            tasks.taskArray.unshift(payload);\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\n        },\n        remove: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.filter((i) => {\n                if (i.id !== payload) return true;\n                else {\n                    if (!i.isCompleted) {\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\n                    } else {\n                        tasks.meta.completedTasksCount--;\n                        if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length - 1) {\n                            tasks.meta.completedTaskStartIndex = -1;\n                        }\n                    }\n                    return false;\n                }\n            });\n        },\n        updateTask: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.map((i) => (i.id === payload.id ? payload : i));\n        },\n        updateTaskContent: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.content = payload.updatedTaskContent;\n                }\n            });\n        },\n        updateTaskLabel: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.label = payload.label;\n                }\n            });\n        },\n        updateTaskTime: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.remainingTime = payload.updatedTime * 60;\n                    i.time = payload.updatedTime * 60;\n                }\n            });\n        },\n        updateTaskTimeByVal: (tasks, { payload }) => {\n            tasks.taskArray[payload.focussedTaskIndex].remainingTime += payload.val * 60;\n            tasks.taskArray[payload.focussedTaskIndex].time += payload.val * 60;\n            if (tasks.taskArray[payload.focussedTaskIndex].remainingTime < 0) {\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\n            }\n            if (tasks.taskArray[payload.focussedTaskIndex].time < 0) {\n                tasks.taskArray[payload.focussedTaskIndex].time = 0;\n            }\n        },\n        updateOrder: (tasks, { payload }) => {\n            tasks.taskArray = payload;\n        },\n\n        focusOnTask: (tasks, { payload }) => {\n            tasks.meta.focussedTaskIndex = payload;\n        },\n        resetFocussedTask: (tasks) => {\n            tasks.meta.focussedTaskIndex = -1;\n        },\n        tick: (tasks, { payload }) => {\n            --tasks.taskArray[payload].remainingTime;\n        },\n        resetTaskTimer: (tasks, { payload }) => {\n            tasks.taskArray[payload].isRunning = false;\n            tasks.taskArray[payload].remainingTime = tasks.taskArray[payload].time;\n        },\n        toggleIsRunning: (tasks, { payload }) => {\n            if (payload.val !== undefined) tasks.taskArray[payload.idx].isRunning = payload.val;\n            else tasks.taskArray[payload.idx].isRunning = !tasks.taskArray[payload.idx].isRunning;\n        },\n        toggleShowCompletedTasks: (tasks) => {\n            tasks.meta.showCompletedTasks = !tasks.meta.showCompletedTasks;\n        },\n        toggleIsCompleted: (tasks, { payload }) => {\n            tasks.taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.isCompleted ? --tasks.meta.completedTasksCount : ++tasks.meta.completedTasksCount;\n                    i.isCompleted = !i.isCompleted;\n                }\n            });\n        },\n        clearCompletedTasks: (tasks) => {\n            if (tasks.meta.completedTaskStartIndex !== -1) {\n                tasks.taskArray.length = tasks.meta.completedTaskStartIndex;\n                tasks.meta.completedTaskStartIndex = -1;\n                tasks.meta.completedTasksCount = 0;\n            }\n        },\n        updateLabelCount: (tasks, { payload }) => {\n            if (payload.oldLabel !== null) tasks.labels[payload.oldLabel].count--;\n            if (payload.newLabel !== null) tasks.labels[payload.newLabel].count++;\n        },\n        incrementGlobalKey: ({ meta }) => {\n            ++meta.globalKey;\n        },\n        rearrange: (tasks, { payload }) => {\n            let id = payload.id;\n\n            if (payload.markedAsComplete) {\n                if (tasks.meta.completedTaskStartIndex === -1) {\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                    let found = false;\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\n                        if (found) {\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        } else if (tasks.taskArray[i].id === id) {\n                            found = true;\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }\n                    }\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                } else {\n                    let task, idx;\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n                    let pos = -1;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    if (pos === -1) {\n                        tasks.taskArray.push(task);\n                    } else {\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.meta.completedTaskStartIndex -= 1;\n                }\n            } else {\n                if (tasks.meta.completedTaskStartIndex == 0) {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.taskArray.unshift(task);\n                    tasks.meta.completedTaskStartIndex = 1;\n                } else {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    let start = tasks.meta.completedTaskStartIndex - 1;\n                    let pos = -1;\n                    for (let i = start; i >= 0; i--) {\n                        if (tasks.taskArray[i].globalKey < task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    if (pos === -1) {\n                        tasks.taskArray.unshift(task);\n                    } else {\n                        pos++;\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.meta.completedTaskStartIndex += 1;\n                }\n\n                if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length) {\n                    tasks.meta.completedTaskStartIndex = -1;\n                }\n            }\n        },\n        changeSoundscapeTrack: ({ soundscape }, { payload }) => {\n            soundscape.track = payload;\n        },\n        toggleSoundscapeState: ({ soundscape }, { payload }) => {\n            soundscape.isPlaying = payload;\n        },\n        updateSoundscapeVolume: ({ soundscape }, { payload }) => {\n            soundscape.volume = payload;\n        },\n    },\n});\n\nexport const {\n    create,\n    remove,\n    updateTask,\n    updateTaskContent,\n    updateTaskLabel,\n    updateTaskTime,\n    updateTaskTimeByVal,\n    focusOnTask,\n    resetFocussedTask,\n    tick,\n    resetTaskTimer,\n    toggleIsRunning,\n    toggleShowCompletedTasks,\n    toggleIsCompleted,\n    clearCompletedTasks,\n    updateOrder,\n    updateLabelCount,\n    incrementGlobalKey,\n    rearrange,\n    changeSoundscapeTrack,\n    toggleSoundscapeState,\n    updateSoundscapeVolume,\n} = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n","export function formattedTimeString(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}:${secs}`;\n}\n\nexport function formattedTimeStringv2(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}m ${secs}s`;\n}\n\nexport function getFormattedDate() {\n    let d = new Date();\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    return {\n        day: days[d.getDay()],\n        month: months[d.getMonth()],\n        date: d.getDate(),\n        year: d.getFullYear(),\n    };\n}\n\nexport function debounce(fn, wait) {\n    let t;\n    return function () {\n        clearTimeout(t);\n        t = setTimeout(() => fn.apply(this, arguments), wait);\n    };\n}\n","export default __webpack_public_path__ + \"static/media/bulb.3da54d2d.svg\";","export default __webpack_public_path__ + \"static/media/glowBulb.c67ad172.svg\";","export default __webpack_public_path__ + \"static/media/tickmark.ce1bc136.svg\";","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\n\nconst TaskSelectInput = styled.select`\n    font-weight: bold;\n    text-align: center;\n    border:0;\n    background-color:#fff;\n    option{\n        font-weight:bold;\n    }\n`;\n\nexport default function TaskLabel(p) {\n    const labels = useSelector((s) => s.tasks.labels);\n    const [updatedLabel, setUpdatedLabel] = useState(p.taskLabel);\n\n    return (\n        // <div style={{ height: \"100%\", width: 80 }}>\n        <TaskSelectInput\n        autoFocus\n            name=\"labels\"\n            onBlur={() => p.onBlur(p.taskId,p.taskLabel, updatedLabel)}\n            defaultValue={updatedLabel}\n            onChange={(e) => setUpdatedLabel(e.target.value)}\n            onKeyDown={(e) => (e.key === \"Enter\" ? p.onBlur(p.taskId,p.taskLabel, updatedLabel) : null)}\n        >\n            <option value=\"none\">none</option> \n            {/* keeping option:none at top makes it show up if taskLabel is null which is desired */}\n            {Object.keys(labels).map((e, idx) => (\n                <option style={{color:`${labels[e].color}`}} key={idx} value={e}>\n                    {e}\n                </option>\n            ))}\n        </TaskSelectInput>\n        // </div>\n    );\n}\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { remove, updateTaskContent, toggleIsCompleted, rearrange, updateTaskTime } from \"../../containers/taskBoard/taskBoardSlice\";\nimport { focusOnTask, resetFocussedTask, toggleIsRunning, updateTaskLabel, updateLabelCount , toggleSoundscapeState} from \"../../containers/taskBoard/taskBoardSlice\";\nimport styled from \"styled-components\";\nimport { BsTrash } from \"react-icons/bs\";\nimport { Flipped } from \"react-flip-toolkit\";\nimport { GrDrag } from \"react-icons/gr\";\nimport { formattedTimeString } from \"../../helpers\";\nimport bulb from \"./../../images/bulb.svg\";\nimport glowBulb from \"./../../images/glowBulb.svg\";\nimport tickmark from \"./../../images/tickmark.svg\";\nimport TaskLabelSelect from \"./../../components/TaskBoard/TaskLabelSelect\";\n\nconst TaskCardContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    width: 420px;\n    height: 100px;\n    margin-top: 15px;\n    /* background-color: #fff4e1; */\n`;\n\nconst TaskCardDragIcon = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    width: 25px;\n    height: 100%;\n    /* background-color: #ff09ac; */\n    svg {\n        cursor: url(\"https://ssl.gstatic.com/ui/v1/icons/mail/images/2/openhand.cur\"), default !important;\n        opacity: 0.7;\n    }\n`;\n\nconst getTaskCardDivBorderLabelColor = (labelColor) => (labelColor !== null ? `7px solid ${labelColor}` : \"none\");\n\nconst TaskCardDiv = styled.div`\n    display: flex;\n    justify-content: space-around;\n    flex-direction: row;\n    height: 100%;\n    width: 376px;\n    border-radius: 10px;\n    border-right: ${(p) => getTaskCardDivBorderLabelColor(p.labelColor)};\n    background-color: #fff;\n    -webkit-box-shadow: ${(p) => (p.isFocussed ? \"0 1px 8px rgb(248,185,23,0.8)\" : \"0 5px 10px rgba(166,173,201,0.2)\")};\n    box-shadow: ${(p) => (p.isFocussed ? \"0 1px 8px rgb(248,185,23,0.8)\" : \"0 5px 10px rgba(166,173,201,0.2)\")};\n`;\n\nconst TaskStatusDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    width: 15%;\n    /* background-color: #f8f8ff; */\n    position: relative;\n    p {\n        margin: 5px;\n        font-weight: bold;\n        font-size: 0.7em;\n    }\n    img {\n        width: ${(p) => (p.isCompleted ? \"35px\" : \"60px\")};\n    }\n`;\n\nconst TaskDetailsDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    height: 100%;\n    width: 75%;\n    margin: 0 0 0 10px;\n    /* background-color: #fff1fc; */\n`;\n\nconst TaskContentDiv = styled.div`\n    display: flex;\n    align-items: center;\n    height: 65%;\n    margin: 0 0 0 5px;\n    word-wrap: break-word;\n    /* background-color: #fffcec; */\n    p {\n        font-size: 0.9em;\n        font-weight: bold;\n        min-width: 0;\n        &:hover {\n            cursor: text;\n        }\n    }\n`;\n\nconst TaskEditInput = styled.textarea`\n    resize: none;\n    height: 90%;\n    width: 100%;\n    font-size: 0.9em;\n    overflow: hidden;\n    vertical-align: center;\n    font-weight: bold;\n    &:focus {\n        outline: none;\n        border: 2px #0000cd dashed;\n        border-radius: 5px;\n    }\n`;\n\nconst TimeEditInput = styled.input`\n    height: 15px;\n    width: 30px;\n    margin-top: 5px;\n    text-align: center;\n    font-weight: bold;\n    &:focus {\n        outline: none;\n        border: 2px #0000cd dashed;\n        border-radius: 2px;\n    }\n`;\n\nconst TaskActionButton = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    border-radius: 5px;\n    margin: 4px;\n    cursor: pointer;\n    &:hover {\n        background-color: #0000cd;\n        p {\n            color: #fff;\n        }\n    }\n    p {\n        margin: 5px;\n        font-weight: bold;\n        font-size: 0.65em;\n    }\n`;\n\nconst TaskLabelContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    border-radius: 5px;\n    margin: 4px;\n    cursor: pointer;\n    &:hover {\n        background-color: #f7f7fa;\n    }\n    p {\n        margin: 5px;\n        color: ${(p) => (p.labelColor !== null ? p.labelColor : \"#c1c1d7\")};\n        font-weight: bold;\n        font-size: 0.65em;\n    }\n`;\n\nconst TaskDeleteButton = styled.div`\n    height: 80%;\n    cursor: pointer;\n    margin-left: auto;\n    color: #0000cd;\n    &:hover {\n        color: red;\n    }\n`;\n\nconst TaskControllerDiv = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    height: 25%;\n    /* background-color: #fffa91; */\n    svg {\n        font-size: 0.8em;\n        margin: 5px;\n    }\n`;\n\nfunction previewTask(str) {\n    if (str.length <= 60) return str;\n    else return str.substring(0, 60) + \"...\";\n}\n\nexport default function TaskCard({ task, taskIndex, focussedTaskGlobalKey, forwardRBDProvided, isFocussed, focussedTaskIndex }) {\n    const dispatch = useDispatch();\n\n    const [taskUnderEdit, setTaskUnderEdit] = useState(false);\n    const [updatedTaskContent, setUpdatedTaskContent] = useState(task.content);\n    const [timeUnderEdit, setTimeUnderEdit] = useState(false);\n    const [labelUnderEdit, setLabelUnderEdit] = useState(false);\n    const [updatedTime, setUpdatedTime] = useState(Math.floor(task.time / 60));\n    const [showDragIcon, setShowDragIcon] = useState(false);\n\n    const labels = useSelector((s) => s.tasks.labels);\n\n    function submitUpdatedTaskContent(e) {\n        if (e.key === \"Enter\" && updatedTaskContent.trim().length >= 3) {\n            let temp = updatedTaskContent.trim().split(\" \");\n            // let time = 0;\n            // if (temp.length !== 1 && !isNaN(parseInt(temp[temp.length - 1]))) {\n            //     time = parseInt(temp.pop());\n            // }\n            // temp = temp.join(\" \");\n            // wont be managing to update time here also\n            dispatch(updateTaskContent({ id: task.id, updatedTaskContent }));\n            setTaskUnderEdit(false);\n        }\n    }\n    function submitUpdatedTime(e) {\n        if (e.key === \"Enter\") {\n            dispatch(updateTaskTime({ id: task.id, updatedTime }));\n            setTimeUnderEdit(false);\n        }\n    }\n\n    function labelSelectOnBlurHandler(taskId, taskLabel, updatedLabel) {\n        setLabelUnderEdit(false);\n        updatedLabel = updatedLabel === \"none\" ? null : updatedLabel;\n        dispatch(updateTaskLabel({ id: taskId, label: updatedLabel }));\n        if (taskLabel !== updatedLabel) dispatch(updateLabelCount({ oldLabel: taskLabel, newLabel: updatedLabel }));\n    }\n\n    return (\n        <Flipped flipId={`${task.id}`}>\n            <TaskCardContainer\n                ref={forwardRBDProvided.innerRef}\n                {...forwardRBDProvided.draggableProps}\n                {...forwardRBDProvided.dragHandleProps}\n                onMouseEnter={() => setShowDragIcon(!task.isCompleted && true)}\n                onMouseLeave={() => setShowDragIcon(!task.isCompleted && false)}\n            >\n                <TaskCardDragIcon>{showDragIcon && <GrDrag />}</TaskCardDragIcon>\n\n                <TaskCardDiv isFocussed={isFocussed} labelColor={task.label !== null ? labels[task.label].color : null}>\n                    <TaskStatusDiv isFocussed={isFocussed} isCompleted={task.isCompleted}>\n                        {task.isCompleted ? (\n                            <img src={tickmark} alt=\"Done\" />\n                        ) : isFocussed ? (\n                            <img src={glowBulb} alt=\"Focussed\" />\n                        ) : (\n                            <img src={bulb} alt=\"Unfocussed\" />\n                        )}\n                        {!task.isCompleted &&\n                            (timeUnderEdit ? (\n                                <TimeEditInput\n                                    autoFocus\n                                    value={updatedTime}\n                                    onBlur={() => {\n                                        dispatch(updateTaskTime({ id: task.id, updatedTime }));\n                                        setTimeUnderEdit(false);\n                                    }}\n                                    onKeyDown={submitUpdatedTime}\n                                    onChange={(e) => setUpdatedTime(e.target.value)}\n                                />\n                            ) : (\n                                <p onDoubleClick={() => setTimeUnderEdit(true)}>{formattedTimeString(task.remainingTime)}</p>\n                            ))}\n                    </TaskStatusDiv>\n\n                    <TaskDetailsDiv>\n                        <TaskContentDiv>\n                            {taskUnderEdit ? (\n                                <TaskEditInput\n                                    autoFocus\n                                    value={updatedTaskContent}\n                                    onBlur={() => {\n                                        dispatch(updateTaskContent({ id: task.id, updatedTaskContent }));\n                                        setTaskUnderEdit(false);\n                                    }}\n                                    onKeyDown={submitUpdatedTaskContent}\n                                    onChange={(e) => setUpdatedTaskContent(e.target.value)}\n                                />\n                            ) : (\n                                <p onDoubleClick={() => setTaskUnderEdit(true)}>{previewTask(task.content)}</p>\n                            )}\n                        </TaskContentDiv>\n\n                        <TaskControllerDiv>\n                            {!task.isCompleted && (\n                                <TaskActionButton\n                                    isDoneBtn={false}\n                                    onClick={\n                                        isFocussed\n                                            ? () => {\n                                                  if (task.isRunning) dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n                                                  dispatch(resetFocussedTask());\n                                                  dispatch(toggleSoundscapeState(false));\n                                              }\n                                            : () => {\n                                                  if (focussedTaskIndex !== -1) dispatch(toggleIsRunning({ idx: focussedTaskIndex, val: false }));\n                                                  dispatch(focusOnTask(taskIndex));\n                                              }\n                                    }\n                                >\n                                    <p>{isFocussed ? \"Unfocus\" : \"Focus\"}</p>\n                                </TaskActionButton>\n                            )}\n\n                            <TaskActionButton\n                                isDoneBtn={true}\n                                onClick={\n                                    task.isCompleted\n                                        ? (e) => {\n                                              if (focussedTaskIndex !== -1 && focussedTaskGlobalKey < task.globalKey) {\n                                                  dispatch(focusOnTask(focussedTaskIndex + 1));\n                                              }\n                                              dispatch(toggleIsCompleted(task.id));\n                                              dispatch(rearrange({ id: task.id, markedAsComplete: false }));\n                                              e.stopPropagation();\n                                          }\n                                        : (e) => {\n                                              if (taskIndex < focussedTaskIndex) dispatch(focusOnTask(focussedTaskIndex - 1));\n                                              if (task.isRunning) dispatch(toggleIsRunning({ idx: taskIndex }));\n                                              if (isFocussed) dispatch(resetFocussedTask());\n                                              dispatch(toggleIsCompleted(task.id));\n                                              dispatch(rearrange({ id: task.id, markedAsComplete: true }));\n                                              if(taskIndex===focussedTaskIndex)dispatch(toggleSoundscapeState(false));\n                                              e.stopPropagation();\n                                          }\n                                }\n                            >\n                                <p>{task.isCompleted ? \"Undone\" : \"Done\"}</p>\n                            </TaskActionButton>\n\n                            <TaskLabelContainer onClick={() => setLabelUnderEdit(true)} labelColor={task.label !== null ? labels[task.label].color : null}>\n                                {labelUnderEdit ? (\n                                    <TaskLabelSelect onBlur={labelSelectOnBlurHandler} taskId={task.id} taskLabel={task.label} />\n                                ) : task.label !== null ? (\n                                    <p>#{task.label}</p>\n                                ) : (\n                                    <p>Add label</p>\n                                )}\n                            </TaskLabelContainer>\n\n                            {!isFocussed && (\n                                <TaskDeleteButton\n                                    onClick={(e) => {\n                                        if (taskIndex < focussedTaskIndex) dispatch(focusOnTask(focussedTaskIndex - 1));\n                                        dispatch(remove(task.id));\n                                        if (task.label !== null) dispatch(updateLabelCount({ oldLabel: task.label, newLabel: null }));\n                                        e.stopPropagation();\n                                    }}\n                                >\n                                    <BsTrash />\n                                </TaskDeleteButton>\n                            )}\n                        </TaskControllerDiv>\n                    </TaskDetailsDiv>\n                </TaskCardDiv>\n            </TaskCardContainer>\n        </Flipped>\n    );\n}\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { create, incrementGlobalKey, focusOnTask, updateLabelCount } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport styled from \"styled-components\";\nimport { AiFillPlusCircle, AiFillClockCircle } from \"react-icons/ai\";\n\nconst TaskInputContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin: 20px;\n    width: 420px;\n    border-radius: 10px;\n    background-color: #fff;\n    height: 50px;\n    -webkit-box-shadow: 0 5px 10px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 5px 10px rgba(166, 173, 201, 0.2);\n`;\n\nconst TaskContentInputDiv = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    height: 90%;\n    width: 70%;\n    margin-left: 10px;\n    svg {\n        font-size: 1.3em;\n        margin-right: 5px;\n        color: #c1c1d7;\n    }\n`;\n\nconst TaskContentInputField = styled.input`\n    height: 100%;\n    width: 90%;\n    font-size: 0.9em;\n    background-color: #fff;\n    border: 0;\n    outline: none;\n    font-weight: bold;\n    &::placeholder {\n        color: #c1c1d7;\n    }\n`;\n\nconst TaskTimeInputDiv = styled.div`\n    display: flex;\n    align-items: center;\n    height: 90%;\n    width: 25%;\n    color: #c1c1d7;\n    span {\n        font-size: 0.8em;\n        font-weight: bold;\n    }\n    svg {\n        font-size: 1.2em;\n        color: #c1c1d7;\n    }\n`;\n\nconst TaskTimeInputField = styled.input`\n    height: 100%;\n    width: 30%;\n    font-size: 0.9em;\n    text-align: center;\n    background-color: #fff;\n    border: 0;\n    outline: none;\n    font-weight: bold;\n    &::placeholder {\n        color: #c1c1d7;\n    }\n    &::-webkit-inner-spin-button,\n    &::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        appearance: none;\n        margin: 0;\n    }\n`;\n\nexport default function TaskInput() {\n    const [task, setTask] = useState(\"\");\n    const [time, setTime] = useState(20);\n    let taskContentInputRef, taskTimeInputRef;\n    const meta = useSelector((s) => s.tasks.meta);\n    const labels = useSelector((s) => s.tasks.labels);\n    const dispatch = useDispatch();\n\n    function submitTask(e) {\n        if (e.key === \"Enter\" && task.trim().length >= 1) {\n            let temp = task.trim().split(\" \");\n            // add a max time limit\n            let taskTime = time;\n            let label = null;\n            if (temp.length !== 1) {\n                if (!isNaN(parseInt(temp[temp.length - 1]))) {\n                    taskTime = parseInt(temp.pop());\n                } else if (temp[temp.length - 1][0] === \"#\" && temp[temp.length - 1].length > 1 && \"wpfme\".includes(temp[temp.length - 1][1])) {\n                    let userLabel = temp[temp.length - 1].substring(1).toLowerCase();\n                    let found = false;\n                    for (let validLabel in labels) {\n                        found = validLabel.includes(userLabel);\n                        if (found) {\n                            label = validLabel;\n                            temp.pop();\n                            break;\n                        }\n                    }\n                }\n            }\n\n            temp = temp.join(\" \");\n            let newTask = {\n                id: Math.floor(Math.random() * 10000),\n                globalKey: meta.globalKey,\n                content: temp,\n                time: taskTime * 60,\n                remainingTime: taskTime * 60,\n                isRunning: false,\n                isCompleted: false,\n                createdAt: new Date().toISOString(),\n                label: label,\n            };\n            if (meta.focussedTaskIndex !== -1) dispatch(focusOnTask(meta.focussedTaskIndex + 1));\n            dispatch(create(newTask));\n            dispatch(incrementGlobalKey());\n            if (label !== null) dispatch(updateLabelCount({ oldLabel: null, newLabel: label }));\n            setTask(\"\");\n            setTime(20);\n            taskContentInputRef.value = \"\";\n            taskTimeInputRef.value = \"\";\n            taskContentInputRef.focus();\n        }\n    }\n\n    return (\n        <TaskInputContainer>\n            <TaskContentInputDiv>\n                <AiFillPlusCircle onClick={() => taskContentInputRef.focus()} />\n                <TaskContentInputField\n                    type=\"text\"\n                    placeholder=\"i have to focus on ...\"\n                    ref={(el) => (taskContentInputRef = el)}\n                    onChange={(e) => setTask(e.target.value)}\n                    onKeyDown={submitTask}\n                />\n            </TaskContentInputDiv>\n            <TaskTimeInputDiv>\n                <AiFillClockCircle onClick={() => taskTimeInputRef.focus()} />\n                <TaskTimeInputField\n                    type=\"number\"\n                    placeholder=\"20\"\n                    ref={(el) => (taskTimeInputRef = el)}\n                    onChange={(e) => setTime(e.target.value)}\n                    onKeyDown={submitTask}\n                />\n                <span>mins</span>\n            </TaskTimeInputDiv>\n        </TaskInputContainer>\n    );\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { BiShow, BiHide } from \"react-icons/bi\";\nimport { AiOutlineClear } from \"react-icons/ai\";\nimport { Flipped } from \"react-flip-toolkit\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { clearCompletedTasks, toggleShowCompletedTasks } from \"./../../containers/taskBoard/taskBoardSlice\";\n\nconst DoneTasksDivider = styled.div`\n    display: flex;\n    margin: 15px 0 15px 25px;\n`;\nconst DividerLine = styled.div`\n    width: 100%;\n    position: relative;\n    margin: 15px;\n    border-bottom: 3px solid #0000cd;\n`;\n\nconst DividerIcon = styled.div`\n    width: 90px;\n    position: relative;\n    top: 3px;\n    color: #0000cd;\n    p {\n        margin: 0;\n        font-weight: bold;\n        letter-spacing:${(p)=>p.showCompletedTasks?\"3px\":\"1px\"};\n    }\n`;\n\nconst DividerActionDiv = styled.div`\n    display: flex;\n    width: 70px;\n    height: 30px;\n    justify-content: space-around;\n    align-items: center;\n    border-radius: 5px;\n    background-color: #fff;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    svg {\n        color: #0000cd;\n        cursor:pointer;\n    }\n`;\n\nexport default function Divider() {\n    const [showActionBtn, setShowActionBtn] = useState(false);\n    const showCompletedTasks = useSelector((s) => s.tasks.meta.showCompletedTasks);\n    const completedTasksCount = useSelector((s)=>s.tasks.meta.completedTasksCount);\n    const dispatch = useDispatch();\n    return (\n        <Flipped flipId={`-1`}>\n            <DoneTasksDivider>\n                <DividerLine />\n                <DividerIcon showCompletedTasks={showCompletedTasks} onMouseEnter={() => setShowActionBtn(true)} onMouseLeave={() => setShowActionBtn(false)}>\n                    {showActionBtn ? (\n                        <DividerActionDiv>\n                            {showCompletedTasks ? (\n                                <BiHide onClick={() => dispatch(toggleShowCompletedTasks())} />\n                            ) : (\n                                <BiShow onClick={() => dispatch(toggleShowCompletedTasks())} />\n                            )}\n                            <AiOutlineClear onClick={() => dispatch(clearCompletedTasks())} />\n                        </DividerActionDiv>\n                    ) : (\n                        <p>{showCompletedTasks?\"DONE\":`DONE(${completedTasksCount})`}</p>\n                        \n                    )}\n                </DividerIcon>\n                <DividerLine />\n            </DoneTasksDivider>\n        </Flipped>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/tasksDone.1ee36799.svg\";","import React from \"react\";\nimport styled from \"styled-components\";\nimport tasksDone from \"./../../images/tasksDone.svg\";\n\nconst NoTasksDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-evenly;\n    width: 246px;\n    min-height: 140px;\n    background-color: #fff;\n    border-radius: 10px;\n    margin: 20px;\n    -webkit-box-shadow: 0 3px 6px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 3px 6px rgba(166, 173, 201, 0.2);\n`;\n\nconst NoTasksIcon = styled.div`\n    img {\n        width: 60px;\n    }\n`;\n\nconst NoTasksText = styled.div`\n    p {\n        font-weight: bold;\n        margin: 0;\n        color: #c1c1d7;\n    }\n`;\n\nexport default function NoTasks({ allCompleted }) {\n    return (\n        <NoTasksDiv>\n            <NoTasksIcon>\n                <img src={tasksDone} alt={\"Tasks Done\"} />\n            </NoTasksIcon>\n            <NoTasksText>{allCompleted ? <p>create some more tasks</p> : <p>create a new task</p>}</NoTasksText>\n        </NoTasksDiv>\n    );\n}\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateOrder } from \"./taskBoardSlice\";\nimport TaskCard from \"./../../components/TaskBoard/TaskCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Flipper } from \"react-flip-toolkit\";\nimport { focusOnTask } from \"./taskBoardSlice\";\nimport styled from \"styled-components\";\nimport TaskInput from \"./../../components/TaskBoard/TaskInput\";\nimport Divider from \"./../../components/TaskBoard/Divider\";\nimport NoTasks from \"../../components/TaskBoard/NoTasks\";\n\nconst TaskBoardContainer = styled.div`\n    flex: 1 1 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-color: #f7f7fa;\n    -webkit-box-shadow: inset -3px 0 10px rgba(166, 173, 201, 0.3);\n    box-shadow: inset -3px 0 10px rgba(166, 173, 201, 0.3);\n`;\n\nexport function TaskBoard() {\n    const tasks = useSelector((state) => state.tasks.taskArray);\n    const meta = useSelector((state) => state.tasks.meta);\n    let focussedTask = meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex] : null;\n    const dispatch = useDispatch();\n\n    function handleOnDragEnd(result) {\n        if (!result.destination) return;\n\n        let items = [...tasks.map((i) => ({ ...i }))];\n        const [reorderedItem] = items.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorderedItem);\n\n        let i = result.source.index;\n        let direction = result.destination.index > result.source.index; // direction true means moving right & swapping\n        // below is logic to reset globalKeys to maintain correct sort order.\n        while (i != result.destination.index) {\n            if (direction) {\n                items[i].globalKey = tasks[i].globalKey;\n                i++;\n            } else {\n                items[i].globalKey = tasks[i].globalKey;\n                i--;\n            }\n            if (i == result.destination.index) {\n                items[i].globalKey = tasks[i].globalKey;\n            }\n        }\n\n        if (meta.focussedTaskIndex !== -1) {\n            let greaterIndex = Math.max(result.destination.index, result.source.index);\n            let smallerIndex = Math.min(result.destination.index, result.source.index);\n\n            if (result.source.index === meta.focussedTaskIndex) {\n                dispatch(focusOnTask(result.destination.index));\n            } else if (meta.focussedTaskIndex >= smallerIndex && meta.focussedTaskIndex <= greaterIndex) {\n                if (result.destination.index > result.source.index) {\n                    dispatch(focusOnTask(meta.focussedTaskIndex - 1)); // -1\n                } else {\n                    dispatch(focusOnTask(meta.focussedTaskIndex + 1)); // +1\n                }\n            }\n        }\n\n        dispatch(updateOrder(items)); // order is imp. focus then updateOrder\n    }\n\n    function getFlipKey() {\n        let flipKey = \"\";\n        tasks.forEach((i) => {\n            flipKey += `${i.globalKey}`;\n        });\n        flipKey += `${meta.completedTaskStartIndex}`;\n        return flipKey;\n    }\n\n    function isFocussed(id) {\n        if (focussedTask !== null && focussedTask.id === id) return true;\n        return false;\n    }\n\n    // input has both onChange and onKeyDown - can be optimised by using one and combining\n\n    return (\n        <TaskBoardContainer>\n            <TaskInput focussedTaskIndex={meta.focussedTaskIndex} />\n            {tasks.length === 0 ? <NoTasks /> : tasks.length === meta.completedTasksCount && <NoTasks allCompleted={true} />}\n            <Flipper flipKey={getFlipKey()}>\n                <DragDropContext onDragEnd={handleOnDragEnd}>\n                    <Droppable droppableId=\"dropArea\">\n                        {(provided) => (\n                            <div {...provided.droppableProps} ref={provided.innerRef}>\n                                {tasks.map((i, index) =>\n                                    !i.isCompleted ? (\n                                        <Draggable isDragDisabled={i.isCompleted} key={i.id} draggableId={`${i.id}`} index={index}>\n                                            {(provided2) => (\n                                                <TaskCard\n                                                    focussedTaskIndex={meta.focussedTaskIndex}\n                                                    focussedTaskGlobalKey={meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1}\n                                                    taskIndex={index}\n                                                    forwardRBDProvided={provided2}\n                                                    task={i}\n                                                    isFocussed={isFocussed(i.id)}\n                                                />\n                                            )}\n                                        </Draggable>\n                                    ) : (\n                                        \"\"\n                                    )\n                                )}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n\n                {meta.completedTaskStartIndex !== -1 && <Divider />}\n\n                {meta.showCompletedTasks &&\n                    tasks.map((i, index) =>\n                        i.isCompleted ? (\n                            <TaskCard\n                                focussedTaskIndex={meta.focussedTaskIndex}\n                                focussedTaskGlobalKey={meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1}\n                                taskIndex={index}\n                                key={i.id}\n                                forwardRBDProvided={{ innerRef: null }}\n                                task={i}\n                                isFocussed={isFocussed(i.id)}\n                            />\n                        ) : (\n                            \"\"\n                        )\n                    )}\n            </Flipper>\n        </TaskBoardContainer>\n    );\n}\n","import React from \"react\";\n\nexport const GlobeIcon = () => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n                stroke-width=\"2\"\n                d=\"M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n            />\n        </svg>\n    );\n};\n\nexport const ResetIcon = () => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\n            />\n        </svg>\n    );\n};\n","export default __webpack_public_path__ + \"static/media/ding.86b39a2c.mp3\";","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled, { css } from \"styled-components\";\nimport { toggleIsRunning, tick, updateTaskTimeByVal, resetTaskTimer, toggleSoundscapeState } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport useTimer from \"../../hooks/useTimer\";\nimport { CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { ResetIcon } from \"./../../components/customIcons\";\nimport dingSound from \"./../../sounds/ding.mp3\";\nimport { BsFillPauseFill, BsFillPlayFill } from \"react-icons/bs\";\nimport { formattedTimeStringv2 } from \"./../../helpers\";\n\nlet dingSoundElement = new Audio(dingSound);\n\nconst FocussedTaskDiv = styled.div`\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n`;\n\nconst FocussedTaskTimer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 50%;\n`;\n\nconst CountdownTimerDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 90px;\n    height: 90px;\n    background-color: #fff;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    border-radius: 50%;\n    & > p {\n        font-size: 0.9em;\n        font-weight: bold;\n        color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#000\")};\n    }\n`;\n\nconst PlayPauseButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 55px;\n    height: 55px;\n    background-color: #0000cd;\n    border-radius: 50%;\n    margin: 10px 20px;\n    box-shadow: 0 1px 7px rgba(0, 0, 0, 0.4);\n    -webkit-box-shadow: 0 1px 7px rgba(0, 0, 0, 0.4);\n    svg {\n        color: #fff;\n        font-size: 1.8em;\n        margin-left: ${(p) => (p.isPlayBtn ? \"3px\" : \"0\")};\n    }\n    cursor: pointer;\n`;\n\nconst UpdateTimeButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 30px;\n    height: 30px;\n    cursor: pointer;\n`;\n\nconst ResetButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    background-color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#0000cd\")};\n    border-radius: 50%;\n    width: 30px;\n    height: 30px;\n    top: 7px;\n    right: 7px;\n    cursor: ${(p) => (p.isDisabled ? \"default\" : \"pointer\")};\n    svg {\n        color: #fff;\n        width: 20px;\n    }\n`;\n\nconst FocussedTaskContent = styled.div`\n    display: flex;\n    justify-content: center;\n    text-align: center;\n    margin: 5px;\n    height: 30%;\n    width: 90%;\n    word-wrap: break-word;\n    p {\n        min-width: 0;\n        font-weight: bold;\n        margin: 3px;\n    }\n`;\n\nconst FocussedTaskController = styled.div`\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n    height: 20%;\n    margin-bottom: 10px;\n`;\n\nexport function FocussedTask() {\n    const focussedTaskIndex = useSelector((state) => state.tasks.meta.focussedTaskIndex);\n    let focussedTask = useSelector((state) => (focussedTaskIndex !== -1 ? state.tasks.taskArray[focussedTaskIndex] : null));\n    const dispatch = useDispatch();\n    const delay = 1000;\n    useTimer(\n        () => {\n            if (focussedTask === null) return;\n            else if (focussedTask.remainingTime > 0) {\n                dispatch(tick(focussedTaskIndex));\n            } else if (focussedTask.remainingTime === 0) {\n                dispatch(toggleSoundscapeState(false));\n                dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n                dingSoundElement.play();\n            }\n        },\n        focussedTask !== null && focussedTask.isRunning ? delay : null\n    );\n\n    function updateTaskTimeHandler(val) {\n        if (focussedTask.isCompleted) return;\n        if (focussedTask.isRunning) dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n        dispatch(updateTaskTimeByVal({ focussedTaskIndex, val }));\n        dispatch(toggleSoundscapeState(false));\n    }\n\n    function playPauseHandler(focussedTaskIndex, wasTaskRunning) {\n        dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n        if (wasTaskRunning) {\n            console.log(\"set to pausing sound\");\n            dispatch(toggleSoundscapeState(false));\n        } else {\n            console.log(\"set to playing sound\");\n            dispatch(toggleSoundscapeState(true));\n        }\n    }\n\n    return (\n        <FocussedTaskDiv>\n            <FocussedTaskTimer>\n                <div style={{ width: 120, height: 120 }}>\n                    <CircularProgressbarWithChildren\n                        value={focussedTask.time !== 0 ? Math.floor((focussedTask.remainingTime / focussedTask.time) * 100) : 0}\n                        styles={buildStyles({\n                            strokeLinecap: \"butt\",\n                            pathColor: \"#0000cd\",\n                            trailColor: \"#EFF7FF\",\n                        })}\n                        strokeWidth={7}\n                    >\n                        <CountdownTimerDiv>\n                            <p>{formattedTimeStringv2(focussedTask.remainingTime)}</p>\n                        </CountdownTimerDiv>\n                    </CircularProgressbarWithChildren>\n                </div>\n            </FocussedTaskTimer>\n            <FocussedTaskContent>\n                <p>{focussedTask.content}</p>\n            </FocussedTaskContent>\n            <FocussedTaskController>\n                <UpdateTimeButtonDiv onClick={() => updateTaskTimeHandler(-5)}>\n                    <h4>-5</h4>\n                </UpdateTimeButtonDiv>\n                <PlayPauseButtonDiv isPlayBtn={!focussedTask.isRunning} onClick={() => playPauseHandler(focussedTaskIndex, focussedTask.isRunning)}>\n                    {focussedTask.isRunning ? <BsFillPauseFill /> : <BsFillPlayFill />}\n                </PlayPauseButtonDiv>\n\n                <UpdateTimeButtonDiv onClick={() => updateTaskTimeHandler(5)}>\n                    <h4>+5</h4>\n                </UpdateTimeButtonDiv>\n            </FocussedTaskController>\n            <ResetButtonDiv\n                onClick={() => {\n                    dispatch(toggleSoundscapeState(false));\n                    dispatch(resetTaskTimer(focussedTaskIndex));\n                }}\n            >\n                <ResetIcon />\n            </ResetButtonDiv>\n        </FocussedTaskDiv>\n    );\n}\n","import { useEffect, useRef } from \"react\";\n\nexport default function useTimer(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { ResetIcon } from \"./../../components/customIcons\";\nimport { CgNotes } from \"react-icons/cg\";\n\nconst FocussedTaskTimer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 50%;\n`;\n\nconst CountdownTimerDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 90px;\n    height: 90px;\n    background-color: #fff;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    border-radius: 50%;\n    & > p {\n        font-size: 0.9em;\n        font-weight: bold;\n        color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#000\")};\n    }\n`;\n\n\nconst ResetButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    background-color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#0000cd\")};\n    border-radius: 50%;\n    width: 30px;\n    height: 30px;\n    top: 7px;\n    right: 7px;\n    cursor: ${(p) => (p.isDisabled ? \"default\" : \"pointer\")};\n    svg {\n        color: #fff;\n        width: 20px;\n    }\n`;\n\nconst EmptyFocusDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n`;\n\nconst NotesIconDiv = styled.div`\n    display: flex;\n    height: 30%;\n    svg {\n        font-size: 80px;\n        color: #c1c1d7;\n    }\n`;\nconst EmptyFocusDivText = styled.div`\n    display: flex;\n    justify-content: center;\n    text-align: center;\n    margin: 10px;\n    height: 20%;\n    width: 90%;\n    p {\n        margin-bottom: 10px;\n        display: inline-block;\n        font-weight: bold;\n        color: #c1c1d7;\n    }\n`;\n\nexport function EmptyFocusBox() {\n    return (\n        <EmptyFocusDiv>\n            <FocussedTaskTimer>\n                <div style={{ width: 120, height: 120 }}>\n                    <CircularProgressbarWithChildren\n                        value={100}\n                        styles={buildStyles({\n                            pathColor: \"#c1c1d7\",\n                        })}\n                        strokeWidth={6}\n                    >\n                        <CountdownTimerDiv isDisabled={true}>\n                            <p>{\"00m 00s\"}</p>\n                        </CountdownTimerDiv>\n                    </CircularProgressbarWithChildren>\n                </div>\n            </FocussedTaskTimer>\n\n            <NotesIconDiv>\n                <CgNotes />\n            </NotesIconDiv>\n\n            <EmptyFocusDivText>\n                <p>Choose a task to focus on</p>\n            </EmptyFocusDivText>\n            <ResetButtonDiv isDisabled={true}>\n                <ResetIcon />\n            </ResetButtonDiv>\n        </EmptyFocusDiv>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { Line } from \"rc-progress\";\n\nconst TaskSummaryDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    position: relative;\n    width: 100%;\n    height: 100%;\n`;\n\nconst SummaryDataContainer = styled.div`\n    display: flex;\n    /* justify-content: space-evenly; */\n    align-items: center;\n    width: 90%;\n    height: 60%;\n    /* background-color: #f5f5fa; */\n`;\n\nconst ColorDot = styled.div`\n    width: 18px;\n    height: 18px;\n    background-color: ${(p) => p.color};\n    border-radius: 50%;\n    margin-right: 10px;\n`;\n\nconst SummaryDataDiv = styled.div`\n    display: flex;\n    align-items: center;\n    width: 40%;\n    margin-top: 5px;\n    margin-left: 3px;\n    /* background-color: #c1c1c1; */\n    p {\n        font-size: 1.2em;\n        font-weight: bold;\n        margin: 0;\n        margin-right: 3px;\n    }\n    span {\n        font-size: 0.5em;\n    }\n`;\n\nconst CompletionPercentContainer = styled.div`\n    display: flex;\n    align-items: center;\n    position: absolute;\n    bottom: 10px;\n    right: 15px;\n    p {\n        font-weight: bold;\n    }\n    span {\n        font-size: 0.5em;\n    }\n`;\n\nexport function TaskSummary() {\n    const completedTasksCount = useSelector((s) => s.tasks.meta.completedTasksCount);\n    const totalTasksCount = useSelector((s) => s.tasks.taskArray.length);\n    let completionPercent = totalTasksCount !== 0 ? Math.floor((completedTasksCount / totalTasksCount) * 100) : 100;\n    return (\n        <TaskSummaryDiv>\n            <SummaryDataContainer>\n                <SummaryDataDiv>\n                    <ColorDot color={\"#0000cd\"} />\n                    <p>{completedTasksCount}</p>\n                    <span>done</span>\n                </SummaryDataDiv>\n                <SummaryDataDiv>\n                    <ColorDot color={\"#c1c1d7\"} />\n                    <p>{totalTasksCount}</p>\n                    <span>tasks</span>\n                </SummaryDataDiv>\n                <CompletionPercentContainer>\n                    <p>{completionPercent}</p>\n                    <span>%</span>\n                </CompletionPercentContainer>\n            </SummaryDataContainer>\n            <div style={{ width: \"90%\" }}>\n                <Line percent={completionPercent} strokeWidth=\"5\" trailWidth=\"5\" trailColor=\"#C1C1D7\" strokeColor=\"#0000CD\" />\n            </div>\n        </TaskSummaryDiv>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { Line } from \"rc-progress\";\n\nconst EmptyTaskSummaryDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    position: relative;\n    width: 100%;\n    height: 100%;\n`;\n\nconst EmptySummaryTextContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content:center;\n    width: 90%;\n    height: 60%;\n    span{\n        font-weight:bold;\n        font-size:0.8em;\n        color:#c1c1d7;\n    }\n`;\n\nexport function EmptyTaskSummary() {\n    \n    return (\n        <EmptyTaskSummaryDiv>\n            <EmptySummaryTextContainer>\n                <span>create tasks and track summary</span>\n            </EmptySummaryTextContainer>\n            <div style={{ width: \"90%\" }}>\n                <Line percent={70} strokeWidth=\"5\" trailWidth=\"5\" trailColor=\"#C1C1D7\" strokeColor=\"#0000CD\" />\n            </div>\n        </EmptyTaskSummaryDiv>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { FocussedTask } from \"./../../components/FocusBoard/FocussedTask\";\nimport { EmptyFocusBox } from \"./../../components/FocusBoard/EmptyFocusBox\";\nimport { TaskSummary } from \"./../../components/FocusBoard/TaskSummary\";\nimport { EmptyTaskSummary } from \"../../components/FocusBoard/EmptyTaskSummary\";\n\nconst FocusBoardContainer = styled.div`\n    flex: 1 1 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content:center;\n`;\nconst TaskSummaryContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    position: relative;\n    width: 276px;\n    height: 90px;\n    margin: 20px;\n    border-radius: 10px;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    background-color: #fff;\n`;\n\nconst FocussedTaskContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    position: relative;\n    width: 276px;\n    height: 346px;\n    margin: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.5);\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.5);\n    background-color: #f7f7fa;\n`;\n\n\nexport function FocusBoard() {\n    const focussedTaskIndex = useSelector((state) => state.tasks.meta.focussedTaskIndex);\n    const totalTasksCount = useSelector((s) => s.tasks.taskArray.length);\n    return (\n        <FocusBoardContainer>\n            <TaskSummaryContainer>{totalTasksCount !== 0 ? <TaskSummary /> : <EmptyTaskSummary />}</TaskSummaryContainer>\n            <FocussedTaskContainer>{focussedTaskIndex !== -1 ? <FocussedTask /> : <EmptyFocusBox />}</FocussedTaskContainer>\n        </FocusBoardContainer>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/sample5MB.f23f9d95.mp3\";","export default __webpack_public_path__ + \"static/media/none.07e98a7a.mp3\";","import nature from \"./../../sounds/ding.mp3\";\nimport piano from \"./../../sounds/sample5MB.mp3\";\nimport none from \"./../../sounds/none.mp3\";\nimport ImgNature from \"./../../images/rain.svg\";\nimport ImgPiano from \"./../../images/piano.svg\";\nimport ImgNone from \"./../../images/none.svg\";\n\nexport const soundOptions = {\n    nature: {\n        src: nature,\n        img: ImgNature,\n        label: \"Nature\",\n    },\n    piano: {\n        src: piano,\n        img: ImgPiano,\n        label: \"Piano\",\n    },\n    none: {\n        src: none,\n        img: ImgNone,\n        label: \"None\",\n    },\n};\n\nexport function generateAudioElement(trackname) {\n    let audioElement = new Audio(soundOptions[trackname].src);\n    audioElement.loop = true;\n    return audioElement;\n}\n","export default __webpack_public_path__ + \"static/media/rain.ae4060d6.svg\";","export default __webpack_public_path__ + \"static/media/piano.fd1e85a7.svg\";","export default __webpack_public_path__ + \"static/media/none.8c3db0c5.svg\";","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport Slider from \"react-input-slider\";\nimport { updateSoundscapeVolume } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport { debounce } from \"./../../helpers\";\n\nexport function MusicVolumeControl() {\n    const ssVolume = useSelector((s) => s.tasks.soundscape.volume);\n    const dispatch = useDispatch();\n    const [volume, setVolume] = useState(ssVolume * 100);\n\n    const debouncedUpdateSoundscapeVolume = debounce((vol) => {\n        dispatch(updateSoundscapeVolume(vol/100));\n    }, 400);\n\n    function onVolumeChangeHandler(vol) {\n        setVolume(vol);\n        debouncedUpdateSoundscapeVolume(vol);\n    }\n\n    return (\n        <>\n            <p>{volume}</p>\n            <Slider axis=\"x\" xstep={5} xmin={0} xmax={100} x={volume} onChange={({ x }) => onVolumeChangeHandler(x)} />\n        </>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { soundOptions, generateAudioElement } from \"./../../components/musicBox/musicUtils\";\nimport { changeSoundscapeTrack } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport { MusicVolumeControl } from \"./MusicVolumeControl\";\n\nconst SoundscapesContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n    background-color: #000;\n`;\n\nconst SoundscapesDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    width: 100%;\n    height: 70%;\n    background-color: #df15ad;\n    p {\n        margin: 0;\n    }\n`;\n\nconst SoundOptionsDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 80%;\n    background-color: #f8faaa;\n`;\n\nconst SoundOptionsInput = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    background-color: #b16afa;\n    margin: 0 5px;\n    img {\n        width: 40px;\n        border: ${(p) => (p.isSelectedSound ? \"2px dashed orange\" : \"none\")};\n    }\n    p {\n        margin: 0;\n    }\n`;\n\nconst SoundVolumeControl = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: #cad1ff;\n    height: 20%;\n`;\n\nexport function Soundscapes() {\n    const soundscape = useSelector((s) => s.tasks.soundscape);\n    const dispatch = useDispatch();\n\n    const [soundscapeAudioElement, setSoundscapeAudioElement] = useState(() => generateAudioElement(soundscape.track, soundscape.volume));\n\n    // ---- danger zone: don't change without full surety , this code is prone to issues ---///\n\n    useEffect(() => {\n        soundscapeAudioElement.src = soundOptions[soundscape.track].src;\n    }, [soundscape.track, soundscapeAudioElement, soundscape.isPlaying]);\n\n    soundscapeAudioElement.volume = soundscape.volume;\n    soundscapeAudioElement.addEventListener(\"canplay\", () => {\n        if (soundscape.isPlaying) {\n            soundscapeAudioElement.play();\n        } else {\n            soundscapeAudioElement.pause();\n        }\n    });\n\n    // ---- danger zone: this might be due to my lack of knowledge of useEffect or weird Audio element behaviour ---///\n\n    function isSelectedSound(track) {\n        return soundscape.track === track;\n    }\n\n    return (\n        <SoundscapesContainer>\n            <SoundscapesDiv>\n                <p>Soundscapes</p>\n                <SoundOptionsDiv>\n                    {Object.keys(soundOptions).map((i) => (\n                        <SoundOptionsInput key={i} onClick={() => dispatch(changeSoundscapeTrack(i))} isSelectedSound={isSelectedSound(i)}>\n                            <img src={soundOptions[i].img} alt={i} />\n                            <p>{soundOptions[i].label}</p>\n                        </SoundOptionsInput>\n                    ))}\n                </SoundOptionsDiv>\n            </SoundscapesDiv>\n            <SoundVolumeControl>\n                <MusicVolumeControl />\n            </SoundVolumeControl>\n        </SoundscapesContainer>\n    );\n}\n","import React, { useState } from \"react\";\nimport { PieChart } from \"react-minimal-pie-chart\";\nimport { useSelector } from \"react-redux\";\n\nexport function LabelPie() {\n    const labels = useSelector((s) => s.tasks.labels);\n    const totalTasksCount = useSelector((s) => s.tasks.taskArray.length);\n\n    const [selected, setSelected] = useState(0);\n    const [hovered, setHovered] = useState(undefined);\n\n    let labelledTasksCount = 0;\n\n    let labelData = Object.keys(labels).reduce((filtered, i) => {\n        if (labels[i].count > 0) {\n            labelledTasksCount += labels[i].count;\n            filtered.push({\n                title: i,\n                value: labels[i].count,\n                color: labels[i].color,\n            });\n        }\n        return filtered;\n    }, []);\n\n    if (totalTasksCount - labelledTasksCount > 0) {\n        labelData.push({\n            title: \"No Label\",\n            value: totalTasksCount - labelledTasksCount,\n            color: \"#c1c1d7\",\n        });\n    }\n\n    labelData = labelData.map((i, idx) => {\n        if (hovered === idx) {\n            i.color = \"#000\";\n            return i;\n        } else return i;\n    });\n\n    const lineWidth = 60;\n\n    return (\n        // <PieChart\n        //     data={labelData}\n        //     lineWidth={15}\n        //     paddingAngle={18}\n        //     rounded\n        //     animate\n        //     reveal\n        //     label={({ dataEntry }) => dataEntry.value}\n        //     labelStyle={(index) => ({\n        //         fill: labelData[index].color,\n        //         fontSize: \"10px\",\n        //         fontWeight: \"bold\",\n        //         fontFamily: \"sans-serif\",\n        //     })}\n        //     labelPosition={70}\n        // />\n        <PieChart\n            style={{\n                fontSize: \"12px\",\n                fontWeight: \"bold\",\n            }}\n            data={labelData}\n            radius={PieChart.defaultProps.radius - 6}\n            lineWidth={lineWidth}\n            segmentsStyle={{ transition: \"stroke .3s\", cursor: \"pointer\" }}\n            segmentsShift={(index) => (index === selected ? 6 : 1)}\n            animate\n            label={({ dataEntry }) => dataEntry.value}\n            labelPosition={100 - lineWidth / 2}\n            labelStyle={{\n                fill: \"#fff\",\n                pointerEvents: \"none\",\n            }}\n            onClick={(_, index) => {\n                setSelected(index === selected ? undefined : index);\n            }}\n            onMouseOver={(_, index) => {\n                setHovered(index);\n            }}\n            onMouseOut={() => {\n                setHovered(undefined);\n            }}\n        />\n    );\n}\n\n//////////////////////////\n\n// function FullOption() {\n\n//     const data = props.data.map((entry, i) => {\n//       if (hovered === i) {\n//         return {\n//           ...entry,\n//           color: 'grey',\n//         };\n//       }\n//       return entry;\n//     });\n\n//   }\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { Soundscapes } from \"../../components/musicBox/Soundscapes\";\nimport { LabelPie } from \"./../../components/FocusBoard/LabelPie\";\n\nconst MiscBoardContainer = styled.div`\n    flex: 1 1 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`;\nconst MusicBoxContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    position: relative;\n    width: 276px;\n    height: 160px;\n    margin: 20px;\n    border-radius: 10px;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    background-color: #f7f7fa;\n`;\n\nconst LabelPieContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    width: 160px;\n    height: 160px;\n    margin: 20px;\n    border-radius: 10px;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    background-color: #f7f7fa;\n`;\n\nexport function MiscBoard() {\n    return (\n        <MiscBoardContainer>\n            <LabelPieContainer>\n                <div style={{ width: 120 }}>\n                    <LabelPie />\n                </div>\n            </LabelPieContainer>\n            <MusicBoxContainer>\n                <Soundscapes />\n            </MusicBoxContainer>\n        </MiscBoardContainer>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/WIP.990e5318.svg\";","import React from \"react\";\nimport styled from \"styled-components\";\nimport WIP from \"./../../images/WIP.svg\";\n\nconst MenuContainer = styled.div`\n    flex: 1 1 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    background: rgb(158, 226, 255);\n    background: linear-gradient(90deg, rgba(158, 226, 255, 1) 0%, rgba(40, 142, 253, 1) 50%, rgba(0, 0, 205, 1) 100%);\n    -webkit-box-shadow: 5px 0 10px rgba(0, 0, 205, 0.5);\n    box-shadow: 5px 0 10px rgba(0, 0, 205, 0.5);\n`;\n\nexport function Menu() {\n    return (\n        <MenuContainer>\n            <img src={WIP} style={{ height: 200, width: 200 }} alt=\"work in progress\"></img>\n            <div>\n                <h1 style={{ textAlign:\"center\", letterSpacing: 3, color: \"#f7f7fa\" }}>It is a prototype, currently under heavy development.</h1>\n            </div>\n        </MenuContainer>\n    );\n}\n","import React from \"react\";\r\nimport { TaskBoard } from \"./taskBoard/TaskBoard\";\r\nimport { FocusBoard } from \"./focusBoard/FocusBoard\";\r\nimport { MiscBoard }  from \"./miscBoard/MiscBoard\";\r\nimport { Menu } from \"./menu/Menu\";\r\nimport styled from \"styled-components\";\r\n\r\nconst AppContainer = styled.div`\r\n    display: flex;\r\n    height:100%;\r\n`;\r\n\r\nfunction App() {\r\n    return (\r\n        <AppContainer>\r\n            <Menu/>\r\n            <MiscBoard/>\r\n            <FocusBoard/>\r\n            <TaskBoard />\r\n        </AppContainer>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"../containers/taskBoard/taskBoardSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}