{"version":3,"sources":["containers/taskBoard/taskBoardSlice.js","helpers/index.js","images/bulb.svg","images/glowBulb.svg","images/tickmark.svg","components/TaskBoard/TaskLabelSelect.js","components/TaskBoard/TaskCard.js","components/TaskBoard/TaskInput.js","components/TaskBoard/Divider.js","images/tasksDone.svg","components/TaskBoard/NoTasks.js","containers/taskBoard/TaskBoard.js","components/customIcons/index.js","sounds/ding.mp3","components/FocusBoard/FocussedTask.js","hooks/useTimer.js","components/FocusBoard/EmptyFocusBox.js","sounds/bell.mp3","sounds/piano.mp3","sounds/river.mp3","sounds/forest.mp3","sounds/alphaWave.mp3","images/bell.svg","images/piano.svg","images/alphaWave.svg","images/river.svg","components/MusicBox/musicUtils.js","images/forest.svg","components/MusicBox/MusicVolumeControl.js","components/MusicBox/Soundscapes.js","containers/focusBoard/FocusBoard.js","components/FocusBoard/LabelPie.js","components/MiscBoard/ProgressRings.js","components/MiscBoard/TimeProgressCard.js","components/MiscBoard/TaskProgressCard.js","containers/miscBoard/MiscBoard.js","images/WIP.svg","containers/menu/Menu.js","containers/App.js","store/index.js","serviceWorker.js","index.js"],"names":["tasksSlice","createSlice","name","initialState","taskArray","labels","work","color","count","personal","fitness","metime","explore","soundscape","track","isPlaying","volume","meta","globalKey","completedTaskStartIndex","focussedTaskIndex","showCompletedTasks","completedTasksCount","totalTaskListTime","remainingTaskListTime","reducers","create","tasks","payload","unshift","time","remove","filter","i","id","isCompleted","length","remainingTime","updateTaskContent","forEach","content","updatedTaskContent","updateTaskLabel","label","updateTaskTime","updatedTime","updateTaskTimeByVal","val","updateOrder","focusOnTask","resetFocussedTask","tick","resetTaskTimer","isRunning","toggleIsRunning","undefined","idx","toggleShowCompletedTasks","toggleIsCompleted","clearCompletedTasks","updateLabelCount","oldLabel","newLabel","incrementGlobalKey","rearrange","markedAsComplete","found","temp","task","pos","push","splice","changeSoundscapeTrack","toggleSoundscapeState","updateSoundscapeVolume","actions","formattedTimeString","x","secs","mins","Math","floor","getFormattedListTimeSummary","hours","TaskSelectInput","styled","select","TaskLabel","p","useSelector","s","useState","taskLabel","updatedLabel","setUpdatedLabel","autoFocus","onBlur","taskId","defaultValue","onChange","e","target","value","onKeyDown","key","Object","keys","map","style","TaskCardContainer","div","TaskCardDragIcon","TaskCardDiv","labelColor","isFocussed","TaskStatusDiv","TaskDetailsDiv","TaskContentDiv","TaskEditInput","textarea","TimeEditInput","input","TaskActionButton","TaskLabelContainer","TaskDeleteButton","TaskControllerDiv","TaskCard","str","taskIndex","focussedTaskGlobalKey","forwardRBDProvided","dispatch","useDispatch","taskUnderEdit","setTaskUnderEdit","setUpdatedTaskContent","timeUnderEdit","setTimeUnderEdit","setUpdatedTime","labelUnderEdit","setLabelUnderEdit","showDragIcon","setShowDragIcon","flipId","ref","innerRef","draggableProps","dragHandleProps","onMouseEnter","onMouseLeave","src","tickmark","alt","glowBulb","bulb","onDoubleClick","trim","split","substring","isDoneBtn","onClick","stopPropagation","TaskInputContainer","TaskContentInputDiv","TaskContentInputField","TaskTimeInputDiv","TaskTimeInputField","TaskInput","taskContentInputRef","taskTimeInputRef","setTask","setTime","submitTask","taskTime","isNaN","parseInt","includes","userLabel","toLowerCase","validLabel","console","log","pop","join","newTask","random","createdAt","Date","toISOString","focus","type","placeholder","el","DoneTasksDivider","DividerLine","DividerIcon","DividerActionDiv","Divider","showActionBtn","setShowActionBtn","NoTasksDiv","NoTasksIcon","NoTasksText","NoTasks","allCompleted","tasksDone","TaskBoardContainer","TaskBoard","state","focussedTask","flipKey","getFlipKey","onDragEnd","result","destination","items","source","index","reorderedItem","direction","greaterIndex","max","smallerIndex","min","droppableId","provided","droppableProps","isDragDisabled","draggableId","provided2","ResetIcon","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","SummaryCardTick","fillRule","clipRule","SummaryCardClock","dingSoundElement","Audio","dingSound","FocussedTaskDiv","FocussedTaskContent","FocussedTaskPlayer","FocussedTaskTimer","CountdownTimerDiv","isDisabled","FocussedTaskController","PlayPauseButtonDiv","isPlayBtn","UpdateTimeButtonDiv","ResetButtonDiv","FocussedTask","updateTaskTimeHandler","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useTimer","play","countdownObj","formattedTimeStringv2","countdownMins","countdownSecs","width","height","styles","buildStyles","pathColor","trailColor","wasTaskRunning","playPauseHandler","EmptyFocusDiv","NotesIconDiv","EmptyFocusDivText","EmptyFocusBox","soundOptions","alphaWave","img","ImgAlphaWave","piano","ImgPiano","bell","ImgBell","Forest","forest","river","ImgRiver","MusicVolumeControl","ssVolume","setVolume","debouncedUpdateSoundscapeVolume","fn","wait","t","clearTimeout","setTimeout","apply","arguments","debounce","vol","axis","disabled","xstep","xmin","xmax","backgroundColor","active","opacity","SoundscapesContainer","SoundscapesDiv","SoundOptionsDiv","SoundOptionsInput","isSelectedSound","SoundVolumeControl","Soundscapes","trackname","audioElement","loop","generateAudioElement","soundscapeAudioElement","addEventListener","pause","FocusBoardContainer","FocussedTaskContainer","MusicBoxContainer","FocusBoard","LabelPie","totalTasksCount","selected","setSelected","hovered","setHovered","labelledTasksCount","labelData","reduce","filtered","tooltip","data-tip","data-for","fontSize","fontWeight","data","radius","PieChart","defaultProps","lineWidth","segmentsStyle","transition","cursor","segmentsShift","animate","dataEntry","labelPosition","labelStyle","pointerEvents","_","onMouseOver","onMouseOut","getContent","ProgressRingBox","ProgressRingDiv","ProgressRingLegendDiv","LegendDataDiv","TextDiv","PercentTextDiv","LegendColorDot","ProgressRings","taskCompletionPercent","timeCompletionPercent","ProgressCard","ProgressCardText","FormattedTimeDiv","ClockIconDiv","TimeProgressCard","rTLTObj","rTLTHours","rTLTMins","tTLTObj","tTLTHours","tTLTMins","TickIconDiv","TaskProgressCard","MiscBoardContainer","LabelPieContainer","AboutLabelPie","MainSummaryContainer","ProgressRingContainer","ProgressCardContainer","MiscBoard","MenuContainer","Menu","WIP","textAlign","letterSpacing","AppContainer","App","configureStore","reducer","tasksReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f23c83e0.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst labelOptions = {\n    work: {\n        color: \"#de1738\",\n        count: 0,\n    },\n    personal: {\n        color: \"#89CFF0\",\n        count: 0,\n    },\n    fitness: {\n        color: \"#76ff7a\",\n        count: 0,\n    },\n    metime: {\n        color: \"#7442c8\",\n        count: 0,\n    },\n    explore: {\n        color: \"#efc0fe\",\n        count: 0,\n    },\n};\n\nexport const tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        taskArray: [],\n        labels: labelOptions,\n        soundscape: {\n            track: \"bell\",\n            isPlaying: false,\n            volume: 0.7,\n        },\n        meta: {\n            globalKey: 0,\n            completedTaskStartIndex: -1,\n            focussedTaskIndex: -1,\n            showCompletedTasks: true,\n            completedTasksCount: 0,\n            totalTaskListTime: 0,\n            remainingTaskListTime: 0,\n        },\n    },\n    reducers: {\n        create: (tasks, { payload }) => {\n            tasks.taskArray.unshift(payload);\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\n            tasks.meta.totalTaskListTime += payload.time;\n            tasks.meta.remainingTaskListTime += payload.time;\n        },\n        remove: (tasks, { payload }) => {\n            \n            tasks.taskArray = tasks.taskArray.filter((i) => {\n                if (i.id !== payload) return true;\n                else {\n\n                    if (!i.isCompleted) {\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\n                    } else {\n                        tasks.meta.completedTasksCount--;\n                        if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length - 1) {\n                            tasks.meta.completedTaskStartIndex = -1;\n                        }\n                    }\n\n                    if (!i.isCompleted) {\n                        tasks.meta.remainingTaskListTime -= i.remainingTime;\n                    }\n                    tasks.meta.totalTaskListTime -= i.time;\n\n                    return false;\n                }\n            });\n        },\n        updateTaskContent: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.content = payload.updatedTaskContent;\n                }\n            });\n        },\n        updateTaskLabel: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.label = payload.label;\n                }\n            });\n        },\n        updateTaskTime: (tasks, { payload }) => {\n            tasks.taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    tasks.meta.totalTaskListTime -= i.time;\n                    tasks.meta.remainingTaskListTime -= i.remainingTime;\n                    tasks.meta.totalTaskListTime += payload.updatedTime * 60;\n                    tasks.meta.remainingTaskListTime += payload.updatedTime * 60;\n                    i.remainingTime = payload.updatedTime * 60;\n                    i.time = payload.updatedTime * 60;\n                }\n            });\n        },\n        updateTaskTimeByVal: (tasks, { payload }) => {\n\n            if (tasks.taskArray[payload.focussedTaskIndex].remainingTime +payload.val*60 < 0) {\n                tasks.meta.remainingTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\n            }else{\n                tasks.meta.remainingTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime += payload.val * 60;\n                tasks.meta.remainingTaskListTime += tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n            }\n            \n            if (tasks.taskArray[payload.focussedTaskIndex].time +payload.val*60< 0) {\n                tasks.meta.totalTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].time;\n                tasks.taskArray[payload.focussedTaskIndex].time = 0;\n            }else{\n                tasks.meta.totalTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].time;\n                tasks.taskArray[payload.focussedTaskIndex].time += payload.val * 60;\n                tasks.meta.totalTaskListTime += tasks.taskArray[payload.focussedTaskIndex].time;\n            }\n            \n        },\n        updateOrder: (tasks, { payload }) => {\n            tasks.taskArray = payload;\n        },\n\n        focusOnTask: (tasks, { payload }) => {\n            tasks.meta.focussedTaskIndex = payload;\n        },\n        resetFocussedTask: (tasks) => {\n            tasks.meta.focussedTaskIndex = -1;\n        },\n        tick: (tasks, { payload }) => {\n            --tasks.taskArray[payload].remainingTime;\n            --tasks.meta.remainingTaskListTime;\n        },\n        resetTaskTimer: (tasks, { payload }) => {\n            tasks.taskArray[payload].isRunning = false;\n\n            tasks.meta.remainingTaskListTime-=tasks.taskArray[payload].remainingTime;\n            tasks.meta.remainingTaskListTime+=tasks.taskArray[payload].time;\n\n            tasks.taskArray[payload].remainingTime = tasks.taskArray[payload].time;\n        },\n        toggleIsRunning: (tasks, { payload }) => {\n            if (payload.val !== undefined) tasks.taskArray[payload.idx].isRunning = payload.val;\n            else tasks.taskArray[payload.idx].isRunning = !tasks.taskArray[payload.idx].isRunning;\n        },\n        toggleShowCompletedTasks: (tasks) => {\n            tasks.meta.showCompletedTasks = !tasks.meta.showCompletedTasks;\n        },\n        toggleIsCompleted: (tasks, { payload }) => {\n            tasks.taskArray.forEach((i) => {\n                if (i.id === payload) {\n\n                    if(i.isCompleted){\n                        tasks.meta.remainingTaskListTime+=i.remainingTime;\n                        --tasks.meta.completedTasksCount\n                    }else{\n                        tasks.meta.remainingTaskListTime-=i.remainingTime;\n                        ++tasks.meta.completedTasksCount\n                    }\n\n                    i.isCompleted = !i.isCompleted;\n                }\n            });\n        },\n        clearCompletedTasks: (tasks) => {\n            if (tasks.meta.completedTaskStartIndex !== -1) {\n\n                for(let i=tasks.meta.completedTaskStartIndex;i<tasks.taskArray.length;i++){\n                    if(tasks.taskArray[i].label!==null)\n                    tasks.labels[tasks.taskArray[i].label].count--;\n\n                    tasks.meta.totalTaskListTime-=tasks.taskArray[i].time;\n                }\n\n                tasks.taskArray.length = tasks.meta.completedTaskStartIndex;\n                tasks.meta.completedTaskStartIndex = -1;\n                tasks.meta.completedTasksCount = 0;\n            }\n        },\n        updateLabelCount: (tasks, { payload }) => {\n            if (payload.oldLabel !== null) tasks.labels[payload.oldLabel].count--;\n            if (payload.newLabel !== null) tasks.labels[payload.newLabel].count++;\n        },\n        incrementGlobalKey: ({ meta }) => {\n            ++meta.globalKey;\n        },\n        rearrange: (tasks, { payload }) => {\n            let id = payload.id;\n\n            if (payload.markedAsComplete) {\n                if (tasks.meta.completedTaskStartIndex === -1) {\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                    let found = false;\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\n                        if (found) {\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        } else if (tasks.taskArray[i].id === id) {\n                            found = true;\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }\n                    }\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                } else {\n                    let task, idx;\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n                    let pos = -1;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    if (pos === -1) {\n                        tasks.taskArray.push(task);\n                    } else {\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.meta.completedTaskStartIndex -= 1;\n                }\n            } else {\n                if (tasks.meta.completedTaskStartIndex == 0) {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.taskArray.unshift(task);\n                    tasks.meta.completedTaskStartIndex = 1;\n                } else {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    let start = tasks.meta.completedTaskStartIndex - 1;\n                    let pos = -1;\n                    for (let i = start; i >= 0; i--) {\n                        if (tasks.taskArray[i].globalKey < task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    if (pos === -1) {\n                        tasks.taskArray.unshift(task);\n                    } else {\n                        pos++;\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.meta.completedTaskStartIndex += 1;\n                }\n\n                if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length) {\n                    tasks.meta.completedTaskStartIndex = -1;\n                }\n            }\n        },\n        changeSoundscapeTrack: ({ soundscape }, { payload }) => {\n            soundscape.track = payload;\n        },\n        toggleSoundscapeState: ({ soundscape }, { payload }) => {\n            soundscape.isPlaying = payload;\n        },\n        updateSoundscapeVolume: ({ soundscape }, { payload }) => {\n            soundscape.volume = payload;\n        },\n    },\n});\n\nexport const {\n    create,\n    remove,\n    updateTaskContent,\n    updateTaskLabel,\n    updateTaskTime,\n    updateTaskTimeByVal,\n    focusOnTask,\n    resetFocussedTask,\n    tick,\n    resetTaskTimer,\n    toggleIsRunning,\n    toggleShowCompletedTasks,\n    toggleIsCompleted,\n    clearCompletedTasks,\n    updateOrder,\n    updateLabelCount,\n    incrementGlobalKey,\n    rearrange,\n    changeSoundscapeTrack,\n    toggleSoundscapeState,\n    updateSoundscapeVolume,\n} = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n","export function formattedTimeString(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}:${secs}`;\n}\n\nexport function formattedTimeStringv2(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return {mins,secs};\n}\n\nexport function getFormattedDate() {\n    let d = new Date();\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    return {\n        day: days[d.getDay()],\n        month: months[d.getMonth()],\n        date: d.getDate(),\n        year: d.getFullYear(),\n    };\n}\n\nexport function getFormattedListTimeSummary(x){\n    let mins = Math.floor(x % 3600 / 60);\n    let hours = Math.floor(x / 3600);\n\n    if (mins == 0) {\n        mins = `0`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n    if (hours == 0) {\n        hours = `0`;\n    } else if (hours < 10) {\n        hours = `${hours}`;\n    }\n\n    return {hours,mins};\n}\n\nexport function debounce(fn, wait) {\n    let t;\n    return function () {\n        clearTimeout(t);\n        t = setTimeout(() => fn.apply(this, arguments), wait);\n    };\n}\n","export default __webpack_public_path__ + \"static/media/bulb.3da54d2d.svg\";","export default __webpack_public_path__ + \"static/media/glowBulb.c67ad172.svg\";","export default __webpack_public_path__ + \"static/media/tickmark.ce1bc136.svg\";","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\n\nconst TaskSelectInput = styled.select`\n    font-weight: bold;\n    text-align: center;\n    border:0;\n    background-color:#fff;\n    option{\n        font-weight:bold;\n    }\n`;\n\nexport default function TaskLabel(p) {\n    const labels = useSelector((s) => s.tasks.labels);\n    const [updatedLabel, setUpdatedLabel] = useState(p.taskLabel);\n\n    return (\n        // <div style={{ height: \"100%\", width: 80 }}>\n        <TaskSelectInput\n        autoFocus\n            name=\"labels\"\n            onBlur={() => p.onBlur(p.taskId,p.taskLabel, updatedLabel)}\n            defaultValue={updatedLabel}\n            onChange={(e) => setUpdatedLabel(e.target.value)}\n            onKeyDown={(e) => (e.key === \"Enter\" ? p.onBlur(p.taskId,p.taskLabel, updatedLabel) : null)}\n        >\n            <option value=\"none\">none</option> \n            {/* keeping option:none at top makes it show up if taskLabel is null which is desired */}\n            {Object.keys(labels).map((e, idx) => (\n                <option style={{color:`${labels[e].color}`}} key={idx} value={e}>\n                    {e}\n                </option>\n            ))}\n        </TaskSelectInput>\n        // </div>\n    );\n}\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { remove, updateTaskContent, toggleIsCompleted, rearrange, updateTaskTime } from \"../../containers/taskBoard/taskBoardSlice\";\nimport { focusOnTask, resetFocussedTask, toggleIsRunning, updateTaskLabel, updateLabelCount , toggleSoundscapeState} from \"../../containers/taskBoard/taskBoardSlice\";\nimport styled from \"styled-components\";\nimport { BsTrash } from \"react-icons/bs\";\nimport { Flipped } from \"react-flip-toolkit\";\nimport { GrDrag } from \"react-icons/gr\";\nimport { formattedTimeString } from \"../../helpers\";\nimport bulb from \"./../../images/bulb.svg\";\nimport glowBulb from \"./../../images/glowBulb.svg\";\nimport tickmark from \"./../../images/tickmark.svg\";\nimport TaskLabelSelect from \"./../../components/TaskBoard/TaskLabelSelect\";\n\nconst TaskCardContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    width: 396px; // % not working here (maybe due to animation library wrappers)\n    height: 110px;\n    margin-top: 15px;\n    cursor:default !important;\n    /* background-color: #fff4e1; */\n`;\n\nconst TaskCardDragIcon = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    width: 5%;\n    height: 100%;\n    /* background-color: #ff09ac; */\n    svg {\n        cursor: url(\"https://ssl.gstatic.com/ui/v1/icons/mail/images/2/openhand.cur\"), default !important;\n        opacity: 0.7;\n    }\n`;\n\nconst getTaskCardDivBorderLabelColor = (labelColor) => (labelColor !== null ? `7px solid ${labelColor}` : \"none\");\n\nconst TaskCardDiv = styled.div`\n    display: flex;\n    justify-content: space-around;\n    flex-direction: row;\n    height: 100%;\n    width: 90%;\n    border-radius: 10px;\n    border-right: ${(p) => getTaskCardDivBorderLabelColor(p.labelColor)};\n    background-color: #fff;\n    -webkit-box-shadow: ${(p) => (p.isFocussed ? \"0 1px 8px rgb(248,185,23,0.8)\" : \"0 5px 10px rgba(166,173,201,0.2)\")};\n    box-shadow: ${(p) => (p.isFocussed ? \"0 1px 8px rgb(248,185,23,0.8)\" : \"0 5px 10px rgba(166,173,201,0.2)\")};\n`;\n\nconst TaskStatusDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    width: 15%;\n    /* background-color: #f8f8ff; */\n    position: relative;\n    p {\n        margin: 5px;\n        font-weight: bold;\n        font-size: 0.7em;\n    }\n    img {\n        width: ${(p) => (p.isCompleted ? \"35px\" : \"60px\")};\n    }\n`;\n\nconst TaskDetailsDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    height: 100%;\n    width: 75%;\n    /* margin: 0 0 0 10px; */\n    /* background-color: #fff1fc; */\n`;\n\nconst TaskContentDiv = styled.div`\n    display: flex;\n    align-items: center;\n    height: 65%;\n    margin: 0 0 0 5px;\n    word-wrap: break-word;\n    /* background-color: #fffcec; */\n    p {\n        font-size: 0.9em;\n        font-weight: bold;\n        min-width: 0;\n        &:hover {\n            cursor: text;\n        }\n    }\n`;\n\nconst TaskEditInput = styled.textarea`\n    resize: none;\n    height: 90%;\n    width: 100%;\n    font-size: 0.9em;\n    overflow: hidden;\n    vertical-align: center;\n    font-weight: bold;\n    &:focus {\n        outline: none;\n        border: 2px #0000cd dashed;\n        border-radius: 5px;\n    }\n`;\n\nconst TimeEditInput = styled.input`\n    height: 15px;\n    width: 30px;\n    margin-top: 5px;\n    text-align: center;\n    font-weight: bold;\n    &:focus {\n        outline: none;\n        border: 2px #0000cd dashed;\n        border-radius: 2px;\n    }\n`;\n\nconst TaskActionButton = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    border-radius: 5px;\n    margin: 4px;\n    cursor: pointer;\n    &:hover {\n        background-color: #0000cd;\n        p {\n            color: #fff;\n        }\n    }\n    p {\n        margin: 5px;\n        font-weight: bold;\n        font-size: 0.65em;\n    }\n`;\n\nconst TaskLabelContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    border-radius: 5px;\n    margin: 4px;\n    cursor: pointer;\n    &:hover {\n        background-color: #f7f7fa;\n    }\n    p {\n        margin: 5px;\n        color: ${(p) => (p.labelColor !== null ? p.labelColor : \"#c1c1d7\")};\n        font-weight: bold;\n        font-size: 0.65em;\n    }\n`;\n\nconst TaskDeleteButton = styled.div`\n    height: 80%;\n    cursor: pointer;\n    margin-left: auto;\n    color: #0000cd;\n    &:hover {\n        color: red;\n    }\n`;\n\nconst TaskControllerDiv = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    height: 25%;\n    /* background-color: #fffa91; */\n    svg {\n        font-size: 0.8em;\n        margin: 5px;\n    }\n`;\n\nfunction previewTask(str) {\n    if (str.length <= 60) return str;\n    else return str.substring(0, 60) + \"...\";\n}\n\nexport default function TaskCard({ task, taskIndex, focussedTaskGlobalKey, forwardRBDProvided, isFocussed, focussedTaskIndex }) {\n    const dispatch = useDispatch();\n\n    const [taskUnderEdit, setTaskUnderEdit] = useState(false);\n    const [updatedTaskContent, setUpdatedTaskContent] = useState(task.content);\n    const [timeUnderEdit, setTimeUnderEdit] = useState(false);\n    const [updatedTime, setUpdatedTime] = useState(Math.floor(task.time / 60));\n    const [labelUnderEdit, setLabelUnderEdit] = useState(false);\n    const [showDragIcon, setShowDragIcon] = useState(false);\n\n    const labels = useSelector((s) => s.tasks.labels);\n\n    function submitUpdatedTaskContent(e) {\n        if (e.key === \"Enter\" && updatedTaskContent.trim().length >= 3) {\n            let temp = updatedTaskContent.trim().split(\" \");\n            // let time = 0;\n            // if (temp.length !== 1 && !isNaN(parseInt(temp[temp.length - 1]))) {\n            //     time = parseInt(temp.pop());\n            // }\n            // temp = temp.join(\" \");\n            // wont be managing to update time here also\n            dispatch(updateTaskContent({ id: task.id, updatedTaskContent }));\n            setTaskUnderEdit(false);\n        }\n    }\n    function submitUpdatedTime(e) {\n        if (e.key === \"Enter\") {\n            dispatch(updateTaskTime({ id: task.id, updatedTime }));\n            setTimeUnderEdit(false);\n        }\n    }\n\n    function labelSelectOnBlurHandler(taskId, taskLabel, updatedLabel) {\n        setLabelUnderEdit(false);\n        updatedLabel = updatedLabel === \"none\" ? null : updatedLabel;\n        dispatch(updateTaskLabel({ id: taskId, label: updatedLabel }));\n        if (taskLabel !== updatedLabel) dispatch(updateLabelCount({ oldLabel: taskLabel, newLabel: updatedLabel }));\n    }\n\n    return (\n        <Flipped flipId={`${task.id}`}>\n            <TaskCardContainer\n                ref={forwardRBDProvided.innerRef}\n                {...forwardRBDProvided.draggableProps}\n                {...forwardRBDProvided.dragHandleProps}\n                onMouseEnter={() => setShowDragIcon(!task.isCompleted && true)}\n                onMouseLeave={() => setShowDragIcon(!task.isCompleted && false)}\n            >\n                <TaskCardDragIcon>{showDragIcon && <GrDrag />}</TaskCardDragIcon>\n\n                <TaskCardDiv isFocussed={isFocussed} labelColor={task.label !== null ? labels[task.label].color : null}>\n                    <TaskStatusDiv isFocussed={isFocussed} isCompleted={task.isCompleted}>\n                        {task.isCompleted ? (\n                            <img src={tickmark} alt=\"Done\" />\n                        ) : isFocussed ? (\n                            <img src={glowBulb} alt=\"Focussed\" />\n                        ) : (\n                            <img src={bulb} alt=\"Unfocussed\" />\n                        )}\n                        {!task.isCompleted &&\n                            (timeUnderEdit ? (\n                                <TimeEditInput\n                                    autoFocus\n                                    value={updatedTime}\n                                    onBlur={() => {\n                                        dispatch(updateTaskTime({ id: task.id, updatedTime }));\n                                        setTimeUnderEdit(false);\n                                    }}\n                                    onKeyDown={submitUpdatedTime}\n                                    onChange={(e) => setUpdatedTime(e.target.value)}\n                                />\n                            ) : (\n                                <p onDoubleClick={() => setTimeUnderEdit(true)}>{formattedTimeString(task.remainingTime)}</p>\n                            ))}\n                    </TaskStatusDiv>\n\n                    <TaskDetailsDiv>\n                        <TaskContentDiv>\n                            {taskUnderEdit ? (\n                                <TaskEditInput\n                                    autoFocus\n                                    value={updatedTaskContent}\n                                    onBlur={() => {\n                                        dispatch(updateTaskContent({ id: task.id, updatedTaskContent }));\n                                        setTaskUnderEdit(false);\n                                    }}\n                                    onKeyDown={submitUpdatedTaskContent}\n                                    onChange={(e) => setUpdatedTaskContent(e.target.value)}\n                                />\n                            ) : (\n                                <p onDoubleClick={() => setTaskUnderEdit(true)}>{previewTask(task.content)}</p>\n                            )}\n                        </TaskContentDiv>\n\n                        <TaskControllerDiv>\n                            {!task.isCompleted && (\n                                <TaskActionButton\n                                    isDoneBtn={false}\n                                    onClick={\n                                        isFocussed\n                                            ? () => {\n                                                  if (task.isRunning) dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n                                                  dispatch(resetFocussedTask());\n                                                  dispatch(toggleSoundscapeState(false));\n                                              }\n                                            : () => {\n                                                  if (focussedTaskIndex !== -1) dispatch(toggleIsRunning({ idx: focussedTaskIndex, val: false }));\n                                                  dispatch(toggleSoundscapeState(false));\n                                                  dispatch(focusOnTask(taskIndex));\n                                              }\n                                    }\n                                >\n                                    <p>{isFocussed ? \"Unfocus\" : \"Focus\"}</p>\n                                </TaskActionButton>\n                            )}\n\n                            <TaskActionButton\n                                isDoneBtn={true}\n                                onClick={\n                                    task.isCompleted\n                                        ? (e) => {\n                                              if (focussedTaskIndex !== -1 && focussedTaskGlobalKey < task.globalKey) {\n                                                  dispatch(focusOnTask(focussedTaskIndex + 1));\n                                              }\n                                              dispatch(toggleIsCompleted(task.id));\n                                              dispatch(rearrange({ id: task.id, markedAsComplete: false }));\n                                              e.stopPropagation();\n                                          }\n                                        : (e) => {\n                                              if (taskIndex < focussedTaskIndex) dispatch(focusOnTask(focussedTaskIndex - 1));\n                                              if (task.isRunning) dispatch(toggleIsRunning({ idx: taskIndex }));\n                                              if (isFocussed) dispatch(resetFocussedTask());\n                                              dispatch(toggleIsCompleted(task.id));\n                                              dispatch(rearrange({ id: task.id, markedAsComplete: true }));\n                                              if(taskIndex===focussedTaskIndex)dispatch(toggleSoundscapeState(false));\n                                              e.stopPropagation();\n                                          }\n                                }\n                            >\n                                <p>{task.isCompleted ? \"Undone\" : \"Done\"}</p>\n                            </TaskActionButton>\n\n                            <TaskLabelContainer onClick={() => setLabelUnderEdit(true)} labelColor={task.label !== null ? labels[task.label].color : null}>\n                                {labelUnderEdit ? (\n                                    <TaskLabelSelect onBlur={labelSelectOnBlurHandler} taskId={task.id} taskLabel={task.label} />\n                                ) : task.label !== null ? (\n                                    <p>#{task.label}</p>\n                                ) : (\n                                    <p>Add label</p>\n                                )}\n                            </TaskLabelContainer>\n\n                            {!isFocussed && (\n                                <TaskDeleteButton\n                                    onClick={(e) => {\n                                        if (taskIndex < focussedTaskIndex) dispatch(focusOnTask(focussedTaskIndex - 1));\n                                        dispatch(remove(task.id));\n                                        if (task.label !== null) dispatch(updateLabelCount({ oldLabel: task.label, newLabel: null }));\n                                        e.stopPropagation();\n                                    }}\n                                >\n                                    <BsTrash />\n                                </TaskDeleteButton>\n                            )}\n                        </TaskControllerDiv>\n                    </TaskDetailsDiv>\n                </TaskCardDiv>\n            </TaskCardContainer>\n        </Flipped>\n    );\n}\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { create, incrementGlobalKey, focusOnTask, updateLabelCount } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport styled from \"styled-components\";\nimport { AiFillPlusCircle, AiFillClockCircle } from \"react-icons/ai\";\n\nconst TaskInputContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin: 20px 0;\n    width: 90%;\n    border-radius: 10px;\n    background-color: #fff;\n    height: 50px;\n    -webkit-box-shadow: 0 5px 10px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 5px 10px rgba(166, 173, 201, 0.2);\n`;\n\nconst TaskContentInputDiv = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    height: 90%;\n    width: 70%;\n    margin-left: 10px;\n    svg {\n        font-size: 1.3em;\n        margin-right: 5px;\n        color: #c1c1d7;\n    }\n`;\n\nconst TaskContentInputField = styled.input`\n    height: 100%;\n    width: 90%;\n    font-size: 0.9em;\n    background-color: #fff;\n    border: 0;\n    outline: none;\n    font-weight: bold;\n    &::placeholder {\n        color: #c1c1d7;\n    }\n`;\n\nconst TaskTimeInputDiv = styled.div`\n    display: flex;\n    align-items: center;\n    height: 90%;\n    width: 25%;\n    color: #c1c1d7;\n    span {\n        font-size: 0.8em;\n        font-weight: bold;\n    }\n    svg {\n        font-size: 1.2em;\n        color: #c1c1d7;\n    }\n`;\n\nconst TaskTimeInputField = styled.input`\n    height: 100%;\n    width: 30%;\n    font-size: 0.9em;\n    text-align: center;\n    background-color: #fff;\n    border: 0;\n    outline: none;\n    font-weight: bold;\n    &::placeholder {\n        color: #c1c1d7;\n    }\n    &::-webkit-inner-spin-button,\n    &::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        appearance: none;\n        margin: 0;\n    }\n`;\n\nexport default function TaskInput() {\n    const [task, setTask] = useState(\"\");\n    const [time, setTime] = useState(20);\n    let taskContentInputRef, taskTimeInputRef;\n    const meta = useSelector((s) => s.tasks.meta);\n    const labels = useSelector((s) => s.tasks.labels);\n    const dispatch = useDispatch();\n\n    function submitTask(e) {\n        if (e.key === \"Enter\" && task.trim().length >= 1) {\n            let temp = task.trim().split(\" \");\n            // add a max time limit\n            let taskTime = time;\n            let label = null;\n            if (temp.length !== 1) {\n                if (!isNaN(parseInt(temp[temp.length - 1]))) {\n                    taskTime = parseInt(temp.pop());\n                } else if (temp[temp.length - 1][0] === \"#\" && temp[temp.length - 1].length > 1 && \"wpfmeWPFME\".includes(temp[temp.length - 1][1])) {\n                    let userLabel = temp[temp.length - 1].substring(1).toLowerCase();\n                    let found = false;\n                    for (let validLabel in labels) {\n                        found = validLabel.includes(userLabel);\n                        console.log(userLabel,validLabel)\n                        if (found) {\n                            label = validLabel;\n                            temp.pop();\n                            break;\n                        }\n                    }\n                }\n            }\n\n            temp = temp.join(\" \");\n            let newTask = {\n                id: Math.floor(Math.random() * 10000),\n                globalKey: meta.globalKey,\n                content: temp,\n                time: taskTime * 60,\n                remainingTime: taskTime * 60,\n                isRunning: false,\n                isCompleted: false,\n                createdAt: new Date().toISOString(),\n                label: label,\n            };\n            if (meta.focussedTaskIndex !== -1) dispatch(focusOnTask(meta.focussedTaskIndex + 1));\n            dispatch(create(newTask));\n            dispatch(incrementGlobalKey());\n            if (label !== null) dispatch(updateLabelCount({ oldLabel: null, newLabel: label }));\n            setTask(\"\");\n            setTime(20);\n            taskContentInputRef.value = \"\";\n            taskTimeInputRef.value = \"\";\n            taskContentInputRef.focus();\n        }\n    }\n\n    return (\n        <TaskInputContainer>\n            <TaskContentInputDiv>\n                <AiFillPlusCircle onClick={() => taskContentInputRef.focus()} />\n                <TaskContentInputField\n                    type=\"text\"\n                    placeholder=\"i have to focus on ...\"\n                    ref={(el) => (taskContentInputRef = el)}\n                    onChange={(e) => setTask(e.target.value)}\n                    onKeyDown={submitTask}\n                />\n            </TaskContentInputDiv>\n            <TaskTimeInputDiv>\n                <AiFillClockCircle onClick={() => taskTimeInputRef.focus()} />\n                <TaskTimeInputField\n                    type=\"number\"\n                    placeholder=\"20\"\n                    ref={(el) => (taskTimeInputRef = el)}\n                    onChange={(e) => setTime(e.target.value)}\n                    onKeyDown={submitTask}\n                />\n                <span>mins</span>\n            </TaskTimeInputDiv>\n        </TaskInputContainer>\n    );\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { BiShow, BiHide } from \"react-icons/bi\";\nimport { AiOutlineClear } from \"react-icons/ai\";\nimport { Flipped } from \"react-flip-toolkit\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { clearCompletedTasks, toggleShowCompletedTasks } from \"./../../containers/taskBoard/taskBoardSlice\";\n\nconst DoneTasksDivider = styled.div`\n    display: flex;\n    margin: 15px 0 15px 25px;\n`;\nconst DividerLine = styled.div`\n    width: 100%;\n    position: relative;\n    margin: 15px;\n    border-bottom: 3px solid #0000cd;\n`;\n\nconst DividerIcon = styled.div`\n    width: 90px;\n    position: relative;\n    top: 3px;\n    color: #0000cd;\n    p {\n        margin: 0;\n        font-weight: bold;\n        letter-spacing:${(p)=>p.showCompletedTasks?\"3px\":\"1px\"};\n    }\n`;\n\nconst DividerActionDiv = styled.div`\n    display: flex;\n    width: 70px;\n    height: 30px;\n    justify-content: space-around;\n    align-items: center;\n    border-radius: 5px;\n    background-color: #fff;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    svg {\n        color: #0000cd;\n        cursor:pointer;\n    }\n`;\n\nexport default function Divider() {\n    const [showActionBtn, setShowActionBtn] = useState(false);\n    const showCompletedTasks = useSelector((s) => s.tasks.meta.showCompletedTasks);\n    const completedTasksCount = useSelector((s)=>s.tasks.meta.completedTasksCount);\n    const dispatch = useDispatch();\n    return (\n        <Flipped flipId={`-1`}>\n            <DoneTasksDivider>\n                <DividerLine />\n                <DividerIcon showCompletedTasks={showCompletedTasks} onMouseEnter={() => setShowActionBtn(true)} onMouseLeave={() => setShowActionBtn(false)}>\n                    {showActionBtn ? (\n                        <DividerActionDiv>\n                            {showCompletedTasks ? (\n                                <BiHide onClick={() => dispatch(toggleShowCompletedTasks())} />\n                            ) : (\n                                <BiShow onClick={() => dispatch(toggleShowCompletedTasks())} />\n                            )}\n                            <AiOutlineClear onClick={() => dispatch(clearCompletedTasks())} />\n                        </DividerActionDiv>\n                    ) : (\n                        <p>{showCompletedTasks?\"DONE\":`DONE(${completedTasksCount})`}</p>\n                        \n                    )}\n                </DividerIcon>\n                <DividerLine />\n            </DoneTasksDivider>\n        </Flipped>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/tasksDone.1ee36799.svg\";","import React from \"react\";\nimport styled from \"styled-components\";\nimport tasksDone from \"./../../images/tasksDone.svg\";\n\nconst NoTasksDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-evenly;\n    width: 246px;\n    min-height: 140px;\n    background-color: #fff;\n    border-radius: 10px;\n    margin: 20px;\n    -webkit-box-shadow: 0 3px 6px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 3px 6px rgba(166, 173, 201, 0.2);\n`;\n\nconst NoTasksIcon = styled.div`\n    img {\n        width: 60px;\n    }\n`;\n\nconst NoTasksText = styled.div`\n    p {\n        font-weight: bold;\n        margin: 0;\n        color: #c1c1d7;\n    }\n`;\n\nexport default function NoTasks({ allCompleted }) {\n    return (\n        <NoTasksDiv>\n            <NoTasksIcon>\n                <img src={tasksDone} alt={\"Tasks Done\"} />\n            </NoTasksIcon>\n            <NoTasksText>{allCompleted ? <p>create some more tasks</p> : <p>create a new task</p>}</NoTasksText>\n        </NoTasksDiv>\n    );\n}\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateOrder } from \"./taskBoardSlice\";\nimport TaskCard from \"./../../components/TaskBoard/TaskCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Flipper } from \"react-flip-toolkit\";\nimport { focusOnTask } from \"./taskBoardSlice\";\nimport styled from \"styled-components\";\nimport TaskInput from \"./../../components/TaskBoard/TaskInput\";\nimport Divider from \"./../../components/TaskBoard/Divider\";\nimport NoTasks from \"../../components/TaskBoard/NoTasks\";\n\nconst TaskBoardContainer = styled.div`\n    flex: 2 1 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    overflow-y:scroll; // to enable scrolling by default for this flex-container only\n    background-color: #f7f7fa;\n    -webkit-box-shadow: inset -3px 0 10px rgba(166, 173, 201, 0.3);\n    box-shadow: inset -3px 0 10px rgba(166, 173, 201, 0.3);\n`;\n\nexport function TaskBoard() {\n    const tasks = useSelector((state) => state.tasks.taskArray);\n    const meta = useSelector((state) => state.tasks.meta);\n    let focussedTask = meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex] : null;\n    const dispatch = useDispatch();\n\n    function handleOnDragEnd(result) {\n        if (!result.destination) return;\n\n        let items = [...tasks.map((i) => ({ ...i }))];\n        const [reorderedItem] = items.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorderedItem);\n\n        let i = result.source.index;\n        let direction = result.destination.index > result.source.index; // direction true means moving right & swapping\n        // below is logic to reset globalKeys to maintain correct sort order.\n        while (i != result.destination.index) {\n            if (direction) {\n                items[i].globalKey = tasks[i].globalKey;\n                i++;\n            } else {\n                items[i].globalKey = tasks[i].globalKey;\n                i--;\n            }\n            if (i == result.destination.index) {\n                items[i].globalKey = tasks[i].globalKey;\n            }\n        }\n\n        if (meta.focussedTaskIndex !== -1) {\n            let greaterIndex = Math.max(result.destination.index, result.source.index);\n            let smallerIndex = Math.min(result.destination.index, result.source.index);\n\n            if (result.source.index === meta.focussedTaskIndex) {\n                dispatch(focusOnTask(result.destination.index));\n            } else if (meta.focussedTaskIndex >= smallerIndex && meta.focussedTaskIndex <= greaterIndex) {\n                if (result.destination.index > result.source.index) {\n                    dispatch(focusOnTask(meta.focussedTaskIndex - 1)); // -1\n                } else {\n                    dispatch(focusOnTask(meta.focussedTaskIndex + 1)); // +1\n                }\n            }\n        }\n\n        dispatch(updateOrder(items)); // order is imp. focus then updateOrder\n    }\n\n    function getFlipKey() {\n        let flipKey = \"\";\n        tasks.forEach((i) => {\n            flipKey += `${i.globalKey}`;\n        });\n        flipKey += `${meta.completedTaskStartIndex}`;\n        return flipKey;\n    }\n\n    function isFocussed(id) {\n        if (focussedTask !== null && focussedTask.id === id) return true;\n        return false;\n    }\n\n    // input has both onChange and onKeyDown - can be optimised by using one and combining\n\n    return (\n        <TaskBoardContainer>\n            <TaskInput focussedTaskIndex={meta.focussedTaskIndex} />\n            {tasks.length === 0 ? <NoTasks /> : tasks.length === meta.completedTasksCount && <NoTasks allCompleted={true} />}\n            <Flipper flipKey={getFlipKey()}>\n                <DragDropContext onDragEnd={handleOnDragEnd}>\n                    <Droppable droppableId=\"dropArea\">\n                        {(provided) => (\n                            <div {...provided.droppableProps} ref={provided.innerRef}>\n                                {tasks.map((i, index) =>\n                                    !i.isCompleted ? (\n                                        <Draggable isDragDisabled={i.isCompleted} key={i.id} draggableId={`${i.id}`} index={index}>\n                                            {(provided2) => (\n                                                <TaskCard\n                                                    focussedTaskIndex={meta.focussedTaskIndex}\n                                                    focussedTaskGlobalKey={meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1}\n                                                    taskIndex={index}\n                                                    forwardRBDProvided={provided2}\n                                                    task={i}\n                                                    isFocussed={isFocussed(i.id)}\n                                                />\n                                            )}\n                                        </Draggable>\n                                    ) : (\n                                        \"\"\n                                    )\n                                )}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n\n                {meta.completedTaskStartIndex !== -1 && <Divider />}\n\n                {meta.showCompletedTasks &&\n                    tasks.map((i, index) =>\n                        i.isCompleted ? (\n                            <TaskCard\n                                focussedTaskIndex={meta.focussedTaskIndex}\n                                focussedTaskGlobalKey={meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1}\n                                taskIndex={index}\n                                key={i.id}\n                                forwardRBDProvided={{ innerRef: null }}\n                                task={i}\n                                isFocussed={isFocussed(i.id)}\n                            />\n                        ) : (\n                            \"\"\n                        )\n                    )}\n            </Flipper>\n        </TaskBoardContainer>\n    );\n}\n","import React from \"react\";\n\nexport const GlobeIcon = () => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n                stroke-width=\"2\"\n                d=\"M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n            />\n        </svg>\n    );\n};\n\nexport const ResetIcon = () => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\n            />\n        </svg>\n    );\n};\n\nexport const SummaryCardTick = () => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path\n                fillRule=\"evenodd\"\n                d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\"\n                clipRule=\"evenodd\"\n            />\n        </svg>\n    );\n};\n\nexport const SummaryCardClock = () => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path\n                fillRule=\"evenodd\"\n                d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\"\n                clipRule=\"evenodd\"\n            />\n        </svg>\n    );\n};\n","export default __webpack_public_path__ + \"static/media/ding.48474537.mp3\";","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled, { css } from \"styled-components\";\nimport { toggleIsRunning, tick, updateTaskTimeByVal, resetTaskTimer, toggleSoundscapeState } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport useTimer from \"../../hooks/useTimer\";\nimport { CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { ResetIcon } from \"./../../components/customIcons\";\nimport dingSound from \"./../../sounds/ding.mp3\";\nimport { BsFillPauseFill, BsFillPlayFill } from \"react-icons/bs\";\nimport { formattedTimeStringv2, getFormattedDate } from \"./../../helpers\";\n\nlet dingSoundElement = new Audio(dingSound);\n\nconst FocussedTaskDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n`;\n\nconst FocussedTaskContent = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    text-align: center;\n    margin: 5px;\n    padding: 5px;\n    height: 35%;\n    width: 100%;\n    max-width: 400px;\n    border-radius: 10px;\n    word-wrap: break-word;\n    p {\n        min-width: 0;\n        font-weight: bold;\n        margin: 3px;\n    }\n    -webkit-box-shadow: 0 1px 8px rgb(248, 185, 23, 0.8);\n    box-shadow: 0 1px 8px rgb(248, 185, 23, 0.8);\n    /* background-color: #edaaf1; */\n`;\n\nconst FocussedTaskPlayer = styled.div`\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    position: relative;\n    width: 100%;\n    height: 55%;\n    border-radius: 10px;\n    background-color: #0000cd;\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.5);\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.5);\n`;\n\nconst FocussedTaskTimer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 80%;\n    width: 50%;\n    /* background-color: #df1aa1; */\n`;\n\nconst CountdownTimerDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 85%;\n    height: 85%;\n    background-color: #fff;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    border-radius: 50%;\n    p {\n        margin: 0;\n        font-weight: bold;\n        color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#000\")};\n    }\n    span {\n        margin: 0 2px;\n        color: #4a4b46;\n        font-size: 0.8em;\n        font-weight: bold;\n    }\n`;\n\nconst FocussedTaskController = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n    height: 80%;\n    width: 30%;\n    /* background-color: #f1f7dd; */\n`;\n\nconst PlayPauseButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 55px;\n    height: 55px;\n    background-color: #fff;\n    border-radius: 50%;\n    margin: 10px 20px;\n    svg {\n        color: #0000cd;\n        font-size: 1.8em;\n        margin-left: ${(p) => (p.isPlayBtn ? \"3px\" : \"0\")};\n    }\n    cursor: pointer;\n`;\n\nconst UpdateTimeButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 30px;\n    height: 30px;\n    cursor: pointer;\n    color: #fff;\n`;\n\nconst ResetButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    background-color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#0000cd\")};\n    border-radius: 50%;\n    width: 30px;\n    height: 30px;\n    top: 7px;\n    left: 7px;\n    background-color: #fff;\n    cursor: ${(p) => (p.isDisabled ? \"default\" : \"pointer\")};\n    svg {\n        color: #0000cd;\n        width: 20px;\n    }\n`;\n\nexport function FocussedTask() {\n    const focussedTaskIndex = useSelector((state) => state.tasks.meta.focussedTaskIndex);\n    let focussedTask = useSelector((state) => (focussedTaskIndex !== -1 ? state.tasks.taskArray[focussedTaskIndex] : null));\n    const dispatch = useDispatch();\n    const delay = 1000;\n    useTimer(\n        () => {\n            if (focussedTask === null) return;\n            else if (focussedTask.remainingTime > 0) {\n                dispatch(tick(focussedTaskIndex));\n            } else if (focussedTask.remainingTime === 0) {\n                dispatch(toggleSoundscapeState(false));\n                dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n                dingSoundElement.play();\n            }\n        },\n        focussedTask !== null && focussedTask.isRunning ? delay : null\n    );\n\n    function updateTaskTimeHandler(val) {\n        if (focussedTask.isCompleted) return;\n        if (focussedTask.isRunning) dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n        dispatch(updateTaskTimeByVal({ focussedTaskIndex, val }));\n        dispatch(toggleSoundscapeState(false));\n    }\n\n    function playPauseHandler(focussedTaskIndex, wasTaskRunning) {\n        dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n        if (wasTaskRunning) {\n            console.log(\"set to pausing sound\");\n            dispatch(toggleSoundscapeState(false));\n        } else {\n            console.log(\"set to playing sound\");\n            dispatch(toggleSoundscapeState(true));\n        }\n    }\n\n    const countdownObj = formattedTimeStringv2(focussedTask.remainingTime);\n    let countdownMins = countdownObj.mins;\n    let countdownSecs = countdownObj.secs;\n\n    return (\n        <FocussedTaskDiv>\n            <FocussedTaskContent>\n                <p>{focussedTask.content}</p>\n            </FocussedTaskContent>\n\n            <FocussedTaskPlayer>\n                <FocussedTaskTimer>\n                    <div style={{ width: 110, height: 110 }}>\n                        <CircularProgressbarWithChildren\n                            value={focussedTask.time !== 0 ? Math.floor((focussedTask.remainingTime / focussedTask.time) * 100) : 0}\n                            styles={buildStyles({\n                                strokeLinecap: \"butt\",\n                                pathColor: \"#020202\",\n                                trailColor: \"#F0F8FF\",\n                            })}\n                            strokeWidth={8}\n                        >\n                            <CountdownTimerDiv>\n                                <p>{countdownMins}</p>\n                                <span>m</span>\n                                <p>{countdownSecs}</p>\n                                <span>s</span>\n                            </CountdownTimerDiv>\n                        </CircularProgressbarWithChildren>\n                    </div>\n                </FocussedTaskTimer>\n\n                <FocussedTaskController>\n                    <UpdateTimeButtonDiv onClick={() => updateTaskTimeHandler(5)}>\n                        <h4>+5</h4>\n                    </UpdateTimeButtonDiv>\n                    <PlayPauseButtonDiv isPlayBtn={!focussedTask.isRunning} onClick={() => playPauseHandler(focussedTaskIndex, focussedTask.isRunning)}>\n                        {focussedTask.isRunning ? <BsFillPauseFill /> : <BsFillPlayFill />}\n                    </PlayPauseButtonDiv>\n\n                    <UpdateTimeButtonDiv onClick={() => updateTaskTimeHandler(-5)}>\n                        <h4>-5</h4>\n                    </UpdateTimeButtonDiv>\n                </FocussedTaskController>\n\n                <ResetButtonDiv\n                    onClick={() => {\n                        dispatch(toggleSoundscapeState(false));\n                        dispatch(resetTaskTimer(focussedTaskIndex));\n                    }}\n                >\n                    <ResetIcon />\n                </ResetButtonDiv>\n            </FocussedTaskPlayer>\n        </FocussedTaskDiv>\n    );\n}\n","import { useEffect, useRef } from \"react\";\n\nexport default function useTimer(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { ResetIcon } from \"./../../components/customIcons\";\nimport { CgNotes } from \"react-icons/cg\";\n\nconst FocussedTaskTimer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 50%;\n`;\n\nconst CountdownTimerDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 90px;\n    height: 90px;\n    background-color: #fff;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    border-radius: 50%;\n    & > p {\n        font-size: 0.9em;\n        font-weight: bold;\n        color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#000\")};\n    }\n`;\n\n\nconst ResetButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    background-color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#0000cd\")};\n    border-radius: 50%;\n    width: 30px;\n    height: 30px;\n    top: 7px;\n    right: 7px;\n    cursor: ${(p) => (p.isDisabled ? \"default\" : \"pointer\")};\n    svg {\n        color: #fff;\n        width: 20px;\n    }\n`;\n\nconst EmptyFocusDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n`;\n\nconst NotesIconDiv = styled.div`\n    display: flex;\n    height: 30%;\n    svg {\n        font-size: 80px;\n        color: #c1c1d7;\n    }\n`;\nconst EmptyFocusDivText = styled.div`\n    display: flex;\n    justify-content: center;\n    text-align: center;\n    margin: 10px;\n    height: 20%;\n    width: 90%;\n    p {\n        margin-bottom: 10px;\n        display: inline-block;\n        font-weight: bold;\n        color: #c1c1d7;\n    }\n`;\n\nexport function EmptyFocusBox() {\n    return (\n        <EmptyFocusDiv>\n            <FocussedTaskTimer>\n                <div style={{ width: 120, height: 120 }}>\n                    <CircularProgressbarWithChildren\n                        value={100}\n                        styles={buildStyles({\n                            pathColor: \"#c1c1d7\",\n                        })}\n                        strokeWidth={6}\n                    >\n                        <CountdownTimerDiv isDisabled={true}>\n                            <p>{\"00m 00s\"}</p>\n                        </CountdownTimerDiv>\n                    </CircularProgressbarWithChildren>\n                </div>\n            </FocussedTaskTimer>\n\n            <NotesIconDiv>\n                <CgNotes />\n            </NotesIconDiv>\n\n            <EmptyFocusDivText>\n                <p>Choose a task to focus on</p>\n            </EmptyFocusDivText>\n            <ResetButtonDiv isDisabled={true}>\n                <ResetIcon />\n            </ResetButtonDiv>\n        </EmptyFocusDiv>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/bell.91678370.mp3\";","export default __webpack_public_path__ + \"static/media/piano.78d7546a.mp3\";","export default __webpack_public_path__ + \"static/media/river.fcc5ffa7.mp3\";","export default __webpack_public_path__ + \"static/media/forest.3adc2705.mp3\";","export default __webpack_public_path__ + \"static/media/alphaWave.8e5f0b7f.mp3\";","export default __webpack_public_path__ + \"static/media/bell.08f34c07.svg\";","export default __webpack_public_path__ + \"static/media/piano.4d0c5909.svg\";","export default __webpack_public_path__ + \"static/media/alphaWave.d69179ba.svg\";","export default __webpack_public_path__ + \"static/media/river.2ba3e3d5.svg\";","import bell from \"./../../sounds/bell.mp3\";\nimport piano from \"./../../sounds/piano.mp3\";\nimport river from \"./../../sounds/river.mp3\";\nimport forest from \"./../../sounds/forest.mp3\";\nimport alphaWave from \"./../../sounds/alphaWave.mp3\";\nimport ImgBell from \"./../../images/bell.svg\";\nimport ImgPiano from \"./../../images/piano.svg\";\nimport ImgAlphaWave from \"./../../images/alphaWave.svg\";\nimport ImgRiver from \"./../../images/river.svg\";\nimport ImgForest from \"./../../images/forest.svg\";\n\nexport const soundOptions = {\n    alphaWave: {\n        src: alphaWave,\n        img: ImgAlphaWave,\n        label: \"Waves\",\n    },\n    piano: {\n        src: piano,\n        img: ImgPiano,\n        label: \"Piano\",\n    },\n    bell: {\n        src: bell,\n        img: ImgBell,\n        label: \"Bell\",\n    },\n    Forest: {\n        src: forest,\n        img: ImgForest,\n        label: \"Forest\",\n    },\n    river: {\n        src: river,\n        img: ImgRiver,\n        label: \"River\",\n    },\n};\n\nexport function generateAudioElement(trackname) {\n    let audioElement = new Audio(soundOptions[trackname].src);\n    audioElement.loop = true;\n    return audioElement;\n}\n","export default __webpack_public_path__ + \"static/media/forest.b8f0f4d7.svg\";","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Slider from \"react-input-slider\";\nimport { updateSoundscapeVolume } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport { debounce } from \"./../../helpers\";\nimport styled from \"styled-components\";\n\nconst VolumeFeedbackText = styled.div`\n    span{\n        font-weight:bold;\n        font-size:0.7em;\n    }\n`;\n\nexport function MusicVolumeControl({ isDisabled }) {\n    const ssVolume = useSelector((s) => s.tasks.soundscape.volume);\n    const dispatch = useDispatch();\n    const [volume, setVolume] = useState(ssVolume * 100);\n\n    const debouncedUpdateSoundscapeVolume = debounce((vol) => {\n        dispatch(updateSoundscapeVolume(vol / 100));\n    }, 200);\n\n    function onVolumeChangeHandler(vol) {\n        setVolume(vol);\n        debouncedUpdateSoundscapeVolume(vol);\n    }\n\n    return (\n        <>\n            <Slider\n                axis=\"x\"\n                disabled={isDisabled}\n                xstep={5}\n                xmin={0}\n                xmax={100}\n                x={volume}\n                onChange={({ x }) => onVolumeChangeHandler(x)}\n                styles={{\n                    track: {\n                        backgroundColor: \"#c1c1d7\",\n                        width: \"100%\",\n                    },\n                    active: {\n                        backgroundColor: \"#0000cd\",\n                    },\n                    disabled: {\n                        opacity: 0.2,\n                    },\n                }}\n            />\n            {/* <VolumeFeedbackText>\n                <span>{volume}</span>\n            </VolumeFeedbackText> */}\n        </>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { soundOptions, generateAudioElement } from \"./musicUtils\";\nimport { changeSoundscapeTrack } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport { MusicVolumeControl } from \"./MusicVolumeControl\";\n\nconst SoundscapesContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n    /* background-color: #000; */\n`;\n\nconst SoundscapesDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    width: 100%;\n    height: 70%;\n    /* background-color: #df15ad; */\n    color: #0000cd;\n    p {\n        margin: 0;\n        font-weight: bold;\n    }\n`;\n\nconst SoundOptionsDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 85%;\n    /* background-color: #f8faaa; */\n`;\n\nconst SoundOptionsInput = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    flex-direction: column;\n    /* background-color: #b16afa; */\n    height: 80%;\n    margin: 0 5px;\n    img {\n        width: 50px;\n        cursor:pointer;\n        transition: transform .2s;\n        &:hover{\n            transform: scale(1.1);\n        }\n    }\n    span {\n        margin: 0;\n        font-size: 0.8em;\n        font-weight: bold;\n        color: ${(p) => (p.isSelectedSound ? \"#0000cd\" : \"#c1c1d7\")};\n        cursor:pointer;\n    }\n`;\n\nconst SoundVolumeControl = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    /* background-color: #cad1ff; */\n    width: 95%;\n    height: 15%;\n`;\n\nexport function Soundscapes() {\n    const soundscape = useSelector((s) => s.tasks.soundscape);\n    const dispatch = useDispatch();\n\n    const [soundscapeAudioElement, setSoundscapeAudioElement] = useState(() => generateAudioElement(soundscape.track, soundscape.volume));\n\n    // ---- danger zone: don't change without full surety , this code is prone to issues ---///\n\n    useEffect(() => {\n        console.log(\"ran\");\n        soundscapeAudioElement.src = soundOptions[soundscape.track].src;\n    }, [soundscape.track, soundscapeAudioElement, soundscape.isPlaying]);\n\n    soundscapeAudioElement.volume = soundscape.volume;\n    soundscapeAudioElement.addEventListener(\"canplay\", () => {\n        if (soundscape.isPlaying) {\n            console.log(\"playing sir\");\n            soundscapeAudioElement.play();\n        } else {\n            soundscapeAudioElement.pause();\n        }\n    });\n\n    // ---- danger zone: this might be due to my lack of knowledge of useEffect or weird Audio element behaviour ---///\n\n    function isSelectedSound(track) {\n        return soundscape.track === track;\n    }\n\n    return (\n        <SoundscapesContainer>\n            <SoundscapesDiv>\n                <p>Soundscapes</p>\n                <SoundOptionsDiv>\n                    {Object.keys(soundOptions).map((i) => (\n                        <SoundOptionsInput key={i} onClick={() => dispatch(changeSoundscapeTrack(i))} isSelectedSound={isSelectedSound(i)}>\n                            <img src={soundOptions[i].img} alt={i} />\n                            <span>{soundOptions[i].label}</span>\n                        </SoundOptionsInput>\n                    ))}\n                </SoundOptionsDiv>\n            </SoundscapesDiv>\n            <SoundVolumeControl>\n                <MusicVolumeControl />\n            </SoundVolumeControl>\n        </SoundscapesContainer>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { FocussedTask } from \"./../../components/FocusBoard/FocussedTask\";\nimport { EmptyFocusBox } from \"./../../components/FocusBoard/EmptyFocusBox\";\nimport { Soundscapes } from \"./../../components/MusicBox/Soundscapes\";\n\nconst FocusBoardContainer = styled.div`\n    flex: 1 1 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`;\nconst TaskSummaryContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    position: relative;\n    width: 276px;\n    height: 90px;\n    margin: 20px;\n    border-radius: 10px;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    background-color: #fff;\n`;\n\nconst FocussedTaskContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    width: 90%;\n    height: 326px;\n    margin: 20px;\n    /* border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.5);\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.5);\n    background-color:#f7faf7; */\n`;\n\nconst MusicBoxContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    position: relative;\n    width: 90%;\n    height: 200px;\n    margin: 20px;\n    /* border-radius: 10px;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    background-color: #f7f7fa; */\n`;\n\nexport function FocusBoard() {\n    const focussedTaskIndex = useSelector((state) => state.tasks.meta.focussedTaskIndex);\n    const totalTasksCount = useSelector((s) => s.tasks.taskArray.length);\n    return (\n        <FocusBoardContainer>\n            {/* <TaskSummaryContainer>{totalTasksCount !== 0 ? <TaskSummary /> : <EmptyTaskSummary />}</TaskSummaryContainer> */}\n            <FocussedTaskContainer>{focussedTaskIndex !== -1 ? <FocussedTask /> : <EmptyFocusBox />}</FocussedTaskContainer>\n            <MusicBoxContainer>\n                <Soundscapes />\n            </MusicBoxContainer>\n        </FocusBoardContainer>\n    );\n}\n","import React, { useState } from \"react\";\nimport { PieChart } from \"react-minimal-pie-chart\";\nimport { useSelector } from \"react-redux\";\nimport ReactTooltip from \"react-tooltip\";\n\nexport function LabelPie() {\n    const labels = useSelector((s) => s.tasks.labels);\n    const totalTasksCount = useSelector((s) => s.tasks.taskArray.length);\n\n    const [selected, setSelected] = useState(0);\n    const [hovered, setHovered] = useState(undefined);\n\n    let labelledTasksCount = 0;\n\n    let labelData = Object.keys(labels).reduce((filtered, i) => {\n        if (labels[i].count > 0) {\n            labelledTasksCount += labels[i].count;\n            filtered.push({\n                tooltip: `#${i} - ${labels[i].count} tasks`,\n                value: labels[i].count,\n                color: labels[i].color,\n            });\n        }\n        return filtered;\n    }, []);\n\n    if (totalTasksCount - labelledTasksCount > 0) {\n        labelData.push({\n            tooltip: `No Label - ${totalTasksCount - labelledTasksCount} tasks`,\n            value: totalTasksCount - labelledTasksCount,\n            color: \"#c1c1d7\",\n        });\n    }\n\n    labelData = labelData.map((i, idx) => {\n        if (hovered === idx) {\n            i.color = \"#000\";\n            return i;\n        } else return i;\n    });\n\n    const lineWidth = 60;\n\n    return (\n        <div style={{ width: 160 }} data-tip=\"\" data-for=\"LabelPieChart\">\n            <PieChart\n                style={{\n                    fontSize: \"12px\",\n                    fontWeight: \"bold\",\n                }}\n                data={labelData}\n                radius={PieChart.defaultProps.radius - 6}\n                lineWidth={lineWidth}\n                segmentsStyle={{ transition: \"stroke .3s\", cursor: \"pointer\" }}\n                segmentsShift={1}\n                animate\n                label={({ dataEntry }) => dataEntry.value}\n                labelPosition={100 - lineWidth / 2}\n                labelStyle={{\n                    fill: \"#fff\",\n                    pointerEvents: \"none\",\n                }}\n                onClick={(_, index) => {\n                    setSelected(index === selected ? undefined : index);\n                }}\n                onMouseOver={(_, index) => {\n                    setHovered(index);\n                }}\n                onMouseOut={() => {\n                    setHovered(undefined);\n                }}\n            />\n            <ReactTooltip id=\"LabelPieChart\" getContent={() => (typeof hovered === \"number\" ? labelData[hovered].tooltip : null)} />\n        </div>\n    );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { buildStyles, CircularProgressbarWithChildren, CircularProgressbar } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport styled from \"styled-components\";\n\nconst ProgressRingBox = styled.div`\n    display: flex;\n    flex-direction:column;\n    justify-content: space-around;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n`;\n\nconst ProgressRingDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 90%;\n    height: 55%;\n    /* background-color:#afa1d1; */\n`;\n\nconst ProgressRingLegendDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    width: 80%;\n    height: 30%;\n    /* background-color: #1fadef; */\n    color: #c1c1d7;\n    font-weight: bold;\n    p {\n        margin: 3px 0;\n        font-size: 0.9em;\n        letter-spacing: 2;\n    }\n`;\n\nconst LegendDataDiv = styled.div`\n    display: flex;\n    align-items: center;\n    width: 95%;\n    /* background-color: #fdadef; */\n    margin: 4px 0;\n    color: #000;\n`;\n\nconst TextDiv = styled.div`\n    font-weight: bold;\n    font-size: 0.8em;\n    p {\n        margin: 0 5px;\n    }\n`;\n\nconst PercentTextDiv = styled.div`\n    font-weight: bold;\n    font-size: 0.8em;\n    margin-left: auto;\n    color: #4a4b46;\n`;\n\nconst LegendColorDot = styled.div`\n    width: 12px;\n    height: 12px;\n    background-color: ${(p) => p.color};\n    border-radius: 50%;\n`;\n\nexport function ProgressRings() {\n    const completedTasksCount = useSelector((s) => s.tasks.meta.completedTasksCount);\n    const totalTasksCount = useSelector((s) => s.tasks.taskArray.length);\n    let taskCompletionPercent = totalTasksCount !== 0 ? Math.floor((completedTasksCount / totalTasksCount) * 100) : 100;\n\n    const remainingTaskListTime = useSelector((s) => s.tasks.meta.remainingTaskListTime);\n    const totalTaskListTime = useSelector((s) => s.tasks.meta.totalTaskListTime);\n    let timeCompletionPercent = totalTaskListTime !== 0 ? Math.floor(((totalTaskListTime - remainingTaskListTime) / totalTaskListTime) * 100) : 100;\n\n    return (\n        <ProgressRingBox>\n            <ProgressRingDiv>\n                <div style={{ width: 130, height: 130 }}>\n                    <CircularProgressbarWithChildren\n                        value={taskCompletionPercent}\n                        styles={buildStyles({\n                            pathColor: \"#77dd77\",\n                            trailColor: \"#c1c1d7\",\n                        })}\n                        strokeWidth={10}\n                    >\n                        <div style={{ width: 90, height: 90 }}>\n                            <CircularProgressbar\n                                value={timeCompletionPercent}\n                                styles={buildStyles({\n                                    pathColor: \"#0000cd\",\n                                    trailColor: \"#c1c1d7\",\n                                })}\n                                strokeWidth={14}\n                            />\n                        </div>\n                    </CircularProgressbarWithChildren>\n                </div>\n            </ProgressRingDiv>\n            <ProgressRingLegendDiv>\n                <p>Progress</p>\n                <LegendDataDiv>\n                    <LegendColorDot color=\"#77dd77\" />\n                    <TextDiv>\n                        <p>\n                            tasks\n                        </p>\n                    </TextDiv>\n\n                    <PercentTextDiv>\n                        <span>{taskCompletionPercent}%</span>\n                    </PercentTextDiv>\n                </LegendDataDiv>\n                <LegendDataDiv>\n                    <LegendColorDot color=\"#0000cd\" />\n                    <TextDiv>\n                        <p>time</p>\n                    </TextDiv>\n                    <PercentTextDiv>\n                        <span>{timeCompletionPercent}%</span>\n                    </PercentTextDiv>\n                </LegendDataDiv>\n            </ProgressRingLegendDiv>\n        </ProgressRingBox>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useSelector } from \"react-redux\";\nimport { getFormattedListTimeSummary } from \"../../helpers\";\nimport {SummaryCardClock} from \"./../customIcons\";\n\nconst ProgressCard = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    position: relative;\n    width: 90%;\n    height: 40%;\n    border-radius: 10px;\n    border-left: 8px solid #0000cd;\n    /* -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4); */\n    background-color: #F0F8FF;\n`;\n\nconst ProgressCardText = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    width: 85%;\n    height: 45%;\n    /* background-color: #d1effa; */\n    span {\n        color:#4a4b46;\n        font-weight: bold;\n        font-size: 0.6em;\n    }\n`;\n\nconst FormattedTimeDiv = styled.div`\n    display: flex;\n    align-items:center;\n    p {\n        margin: 0;\n        font-weight: bold;\n        font-size: 1.4em;\n    }\n    span {\n        margin: 0 3px;\n        font-size: 0.6em;\n    }\n`;\n\nconst ClockIconDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    width: 25px;\n    height: 25px;\n    top: 5px;\n    right: 5px;\n    svg {\n        color: #0000cd;\n    }\n`;\n\nexport function TimeProgressCard() {\n    const totalTaskListTime = useSelector((state) => state.tasks.meta.totalTaskListTime);\n    const remainingTaskListTime = useSelector((state) => state.tasks.meta.remainingTaskListTime);\n\n    const rTLTObj = getFormattedListTimeSummary(remainingTaskListTime);\n    let rTLTHours = rTLTObj.hours;\n    let rTLTMins = rTLTObj.mins;\n\n    const tTLTObj = getFormattedListTimeSummary(totalTaskListTime);\n    let tTLTHours = tTLTObj.hours;\n    let tTLTMins = tTLTObj.mins;\n    return (\n        <ProgressCard>\n            <ProgressCardText>\n                <FormattedTimeDiv>\n                    <p>{rTLTHours}</p>\n                    <span>h</span>\n                    <p>{rTLTMins}</p>\n                    <span>m</span>\n                </FormattedTimeDiv>\n\n                <span>remaining time</span>\n            </ProgressCardText>\n            <ProgressCardText>\n                <FormattedTimeDiv>\n                    <p>{tTLTHours}</p>\n                    <span>h</span>\n                    <p>{tTLTMins}</p>\n                    <span>m</span>\n                </FormattedTimeDiv>\n                <span>total time</span>\n            </ProgressCardText>\n            <ClockIconDiv>\n                <SummaryCardClock/>\n            </ClockIconDiv>\n        </ProgressCard>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useSelector } from \"react-redux\";\nimport {SummaryCardTick} from \"./../customIcons\";\n\n\nconst ProgressCard = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    position:relative;\n    width: 90%;\n    height: 40%;\n    border-radius: 10px;\n    border-left: 8px solid #77dd77;\n    /* -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4); */\n    background-color: #f0fff0;\n`;\n\nconst ProgressCardText = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    width: 85%;\n    height: 45%;\n    /* background-color: #d1effa; */\n    font-weight: bold;\n    p {\n        font-size: 1.6em;\n        margin: 0;\n    }\n    span {\n        color:#4a4b46;\n        font-size: 0.6em;\n    }\n`;\n\nconst TickIconDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    width: 25px;\n    height: 25px;\n    top: 5px;\n    right: 5px;\n    svg {\n        color: #77dd77;\n    }\n`;\n\n\nexport function TaskProgressCard() {\n    const completedTasksCount = useSelector((s) => s.tasks.meta.completedTasksCount);\n    const totalTasksCount = useSelector((s) => s.tasks.taskArray.length);\n\n    return (\n        <ProgressCard>\n            <ProgressCardText>\n                <p>{completedTasksCount}</p>\n                <span>done tasks</span>\n            </ProgressCardText>\n            <ProgressCardText>\n                <p>{totalTasksCount}</p>\n                <span>total tasks</span>\n            </ProgressCardText>\n            <TickIconDiv>\n                <SummaryCardTick/>\n            </TickIconDiv>\n        </ProgressCard>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { LabelPie } from \"./../../components/FocusBoard/LabelPie\";\nimport { ProgressRings } from \"./../../components/MiscBoard/ProgressRings\";\nimport {TimeProgressCard} from \"./../../components/MiscBoard/TimeProgressCard\";\nimport {TaskProgressCard} from \"./../../components/MiscBoard/TaskProgressCard\";\n\nconst MiscBoardContainer = styled.div`\n    flex: 2 1 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst LabelPieContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 200px;\n    height: 200px;\n    margin: 20px;\n    border-radius: 10px;\n    /* -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4); */\n    background-color: #f7f7fa;\n`;\n\nconst AboutLabelPie = styled.div`\n    width: 100%;\n    color: #c1c1d7;\n    p {\n        float: right;\n        font-size: 0.7em;\n        font-weight: bold;\n        margin: 0;\n    }\n`;\n\nconst MainSummaryContainer = styled.div`\n    display: flex;\n    align-items:center;\n    justify-content:space-around;\n    width: 80%;\n    height: 326px;\n    margin: 20px;\n    border-radius:20px;\n    background-color:#f7f7fa;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n`;\n\nconst ProgressRingContainer = styled.div`\n    display: flex;\n    width: 45%;\n    height: 85%;\n    border-radius: 10px;\n    /* -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    background-color: #f7f7fa; */\n`;\n\nconst ProgressCardContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n    width: 35%;\n    height: 85%;\n    border-radius: 10px;\n    /* -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4); */\n    /* background-color: #f7adfa; */\n`;\n\nexport function MiscBoard() {\n    return (\n        <MiscBoardContainer>\n            <MainSummaryContainer>\n                <ProgressRingContainer>\n                    <ProgressRings />\n                </ProgressRingContainer>\n                <ProgressCardContainer>\n                    <TaskProgressCard/>\n                    <TimeProgressCard/>\n                </ProgressCardContainer>\n            </MainSummaryContainer>\n\n            <LabelPieContainer>\n                <LabelPie />\n                <AboutLabelPie>\n                    <p>\n                        task/label\n                        <br />\n                        distribution\n                    </p>\n                </AboutLabelPie>\n            </LabelPieContainer>\n        </MiscBoardContainer>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/WIP.990e5318.svg\";","import React from \"react\";\nimport styled from \"styled-components\";\nimport WIP from \"./../../images/WIP.svg\";\n\nconst MenuContainer = styled.div`\n    width: 15%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    background-color:#0000cd;\n`;\n\nexport function Menu() {\n    return (\n        <MenuContainer>\n            <img src={WIP} style={{ height: 200, width: 200 }} alt=\"work in progress\"></img>\n            <div>\n                <h3 style={{ textAlign: \"center\", letterSpacing: 3, color: \"#f7f7fa\" }}>This is a prototype. currently under development.</h3>\n            </div>\n        </MenuContainer>\n    );\n}\n","import React from \"react\";\r\nimport { TaskBoard } from \"./taskBoard/TaskBoard\";\r\nimport { FocusBoard } from \"./focusBoard/FocusBoard\";\r\nimport { MiscBoard }  from \"./miscBoard/MiscBoard\";\r\nimport { Menu } from \"./menu/Menu\";\r\nimport styled from \"styled-components\";\r\n\r\nconst AppContainer = styled.div`\r\n    display: flex;\r\n    height:100%;\r\n`;\r\n\r\nfunction App() {\r\n    return (\r\n        <AppContainer>\r\n            <Menu/>\r\n            <MiscBoard/>\r\n            <FocusBoard/>\r\n            <TaskBoard />\r\n        </AppContainer>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"../containers/taskBoard/taskBoardSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}