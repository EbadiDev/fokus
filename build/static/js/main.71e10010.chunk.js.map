{"version":3,"sources":["containers/tasks/tasksSlice.js","containers/tasks/TaskCard.js","hooks/useTimer.js","containers/tasks/index.js","containers/App.js","containers/counter/counterSlice.js","store/index.js","serviceWorker.js","index.js"],"names":["tasksSlice","createSlice","name","initialState","taskArray","meta","globalKey","completedTaskStartIndex","reducers","create","tasks","payload","unshift","remove","filter","i","id","isCompleted","update","forEach","content","updatedTask","updateOrder","tick","remainingTime","reset","time","isRunning","toggleIsRunning","toggleIsCompleted","incrementGlobalKey","rearrange","markedAsComplete","length","found","temp","task","idx","pos","push","splice","actions","formattedTimeString","x","seconds","minutes","Math","floor","TaskCardDiv","styled","div","TaskDetailsDiv","TaskTimerDiv","TaskControllerDiv","TaskCard","forwardRBDProvided","dispatch","useDispatch","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useTimer","useState","taskEdit","setTaskEdit","setUpdatedTask","flipId","ref","innerRef","draggableProps","dragHandleProps","round","value","onBlur","onChange","e","target","onDoubleClick","Date","createdAt","getHours","getMinutes","style","position","bottom","right","fontSize","onClick","Task","useSelector","state","setTask","getFlipKey","flipKey","type","onKeyDown","key","trim","split","isNaN","parseInt","pop","join","newTask","random","toISOString","updatedAt","focus","onDragEnd","result","destination","items","map","source","index","reorderedItem","direction","console","log","droppableId","provided","droppableProps","draggableId","provided2","placeholder","App","counterSlice","increment","decrement","incrementByAmount","action","configureStore","reducer","counter","counterReducer","tasksReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71e10010.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        taskArray: [],\n        meta: {\n            globalKey: 0,\n            completedTaskStartIndex: -1,\n        },\n    },\n    reducers: {\n        create: (tasks, { payload }) => {\n            tasks.taskArray.unshift(payload);\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\n        },\n        remove: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.filter((i) => {\n                if (i.id !== payload) return true;\n                else {\n                    if (!i.isCompleted) {\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\n                    }\n                    return false;\n                }\n            });\n        },\n        update: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.content = payload.updatedTask;\n                }\n            });\n        },\n        updateOrder: (tasks, { payload }) => {\n            tasks.taskArray = payload;\n        },\n        tick: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.remainingTime = i.remainingTime - 1;\n                }\n            });\n        },\n        reset: (taskArray, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.remainingTime = i.time;\n                    i.isRunning = false;\n                }\n            });\n        },\n        toggleIsRunning: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.isRunning = !i.isRunning;\n                }\n            });\n        },\n        toggleIsCompleted: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.isCompleted = !i.isCompleted;\n                }\n            });\n        },\n        incrementGlobalKey: ({ meta }) => {\n            ++meta.globalKey;\n        },\n        rearrange: (tasks, { payload }) => {\n            let id = payload.id;\n\n            if (payload.markedAsComplete) {\n                if (tasks.meta.completedTaskStartIndex === -1) {\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                    let found = false;\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\n                        if(found){\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }else if(tasks.taskArray[i].id === id){\n                            found=true;\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }\n                    }\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                } else {\n                    let task, idx;\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n                    let pos = -1;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n                    \n                    if (pos === -1) {\n                        tasks.taskArray.push(task);\n                    } else {\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.meta.completedTaskStartIndex -=1;\n                }\n            } else {\n                if (tasks.meta.completedTaskStartIndex == 0) {\n\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.taskArray.unshift(task);\n                    tasks.meta.completedTaskStartIndex = 1;\n                } else {\n\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    let start = tasks.meta.completedTaskStartIndex - 1;\n                    let pos = -1;\n                    for (let i = start; i >= 0; i--) {\n                        if (tasks.taskArray[i].globalKey < task.globalKey ) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    if (pos === -1) {\n                        tasks.taskArray.unshift(task);\n                    } else {\n                        pos++;\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.meta.completedTaskStartIndex += 1;\n\n                }\n\n                if(tasks.meta.completedTaskStartIndex==tasks.taskArray.length){\n                    tasks.meta.completedTaskStartIndex=-1;\n                }\n            }\n        },\n    },\n});\n\nexport const { create, remove, update, reset, toggleIsRunning, tick, toggleIsCompleted, updateOrder, incrementGlobalKey, rearrange } = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { remove, update, tick, reset, toggleIsRunning, toggleIsCompleted, rearrange } from \"./tasksSlice\";\nimport useTimer from \"../../hooks/useTimer\";\nimport styled from \"styled-components\";\nimport { AiFillPlayCircle, AiFillPauseCircle, AiFillCheckCircle, AiOutlineCheckCircle, AiFillClockCircle } from \"react-icons/ai\";\nimport { TiDelete } from \"react-icons/ti\";\nimport { GrPowerReset } from \"react-icons/gr\";\nimport { Flipped } from \"react-flip-toolkit\";\n\nfunction formattedTimeString(x) {\n    let seconds = x % 60;\n    let minutes = Math.floor(x / 60);\n\n    if (seconds == 0) {\n        seconds = `00`;\n    } else if (seconds < 10) {\n        seconds = `0${seconds}`;\n    }\n    if (minutes == 0) {\n        minutes = `00`;\n    } else if (minutes < 10) {\n        minutes = `0${minutes}`;\n    }\n\n    return `${minutes}:${seconds}`;\n}\n\nconst TaskCardDiv = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-direction: row;\n    height: 120px;\n    width: 476px;\n    border-radius: 10px;\n    box-shadow: 0 4px 4px rgba(0, 0, 0, 0.2);\n    background: #f8f8ff;\n    margin: 10px;\n`;\n\nconst TaskDetailsDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n    height: 100px;\n    width: 280px;\n    margin: 0 0 0 10px;\n    border-radius: 20px;\n    h3,\n    p {\n        margin: 2px;\n        padding: 0;\n    }\n    p {\n        font-size: 0.6rem;\n        font-style: italic;\n        color: grey;\n    }\n`;\n\nconst TaskTimerDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100px;\n    width: 100px;\n    border-radius: 10px;\n    background-color: #eeeeff;\n    position: relative;\n`;\n\nconst TaskControllerDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    height: 120px;\n    width: 40px;\n    border-radius: 0 10px 10px 0;\n`;\n\nexport default function TaskCard({task , forwardRBDProvided}) {\n    const delay = 1000;\n    const dispatch = useDispatch();\n    useTimer(\n        () => {\n            if (task.remainingTime > 0) {\n                dispatch(tick(task.id));\n            } else if (task.remainingTime === 0) {\n                dispatch(toggleIsRunning(task.id));\n            }\n        },\n        task.isRunning ? delay : null\n    );\n\n    const [taskEdit, setTaskEdit] = useState(false);\n    const [updatedTask, setUpdatedTask] = useState(task.content);\n\n    return (\n        <Flipped flipId={`${task.id}`}>\n            <TaskCardDiv  ref={forwardRBDProvided.innerRef} {...forwardRBDProvided.draggableProps} {...forwardRBDProvided.dragHandleProps}>\n                <TaskDetailsDiv>\n                    <p>\n                        <AiFillClockCircle />\n                        {Math.round(task.time / 60) + \"min\"}\n                    </p>\n                    {taskEdit ? (\n                        <input\n                            value={updatedTask}\n                            onBlur={() => {\n                                dispatch(update({ id: task.id, updatedTask }));\n                                setTaskEdit(false);\n                            }}\n                            onChange={(e) => setUpdatedTask(e.target.value)}\n                        />\n                    ) : (\n                        <h3 onDoubleClick={() => setTaskEdit(true)}>{task.globalKey+\": \"+task.content}</h3>\n                    )}\n\n                    <p>{`created at: ${new Date(task.createdAt).getHours()}:${new Date(task.createdAt).getMinutes()}`}</p>\n                </TaskDetailsDiv>\n                <TaskTimerDiv>\n                    <h2>{formattedTimeString(task.remainingTime)}</h2>\n                    <GrPowerReset style={{ position: \"absolute\", bottom: 5, right: 5, fontSize: \"0.8rem\" }} onClick={() => dispatch(reset(task.id))} />\n                </TaskTimerDiv>\n\n                <TaskControllerDiv style={{ fontSize: \"1.5rem\" }}>\n                    {task.isCompleted ? (\n                        <AiFillCheckCircle onClick={() => {dispatch(toggleIsCompleted(task.id));dispatch(rearrange({id:task.id,markedAsComplete:false}))}} />\n                    ) : (\n                        <AiOutlineCheckCircle onClick={() => {dispatch(toggleIsCompleted(task.id));dispatch(rearrange({id:task.id,markedAsComplete:true}))}} />\n                    )}\n                    {task.isRunning ? (\n                        <AiFillPauseCircle onClick={() => dispatch(toggleIsRunning(task.id))} />\n                    ) : (\n                        <AiFillPlayCircle onClick={() => dispatch(toggleIsRunning(task.id))} />\n                    )}\n\n                    <TiDelete onClick={() => dispatch(remove(task.id))} />\n                </TaskControllerDiv>\n            </TaskCardDiv>\n            </Flipped>\n    );\n}\n","import { useEffect, useRef } from \"react\";\n\nexport default function useTimer(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { create, updateOrder, incrementGlobalKey } from \"./tasksSlice\";\nimport TaskCard from \"./TaskCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Flipper } from \"react-flip-toolkit\";\n\nexport function Task() {\n    const tasks = useSelector((state) => state.tasks.taskArray);\n    const meta = useSelector((state) => state.tasks.meta);\n    const dispatch = useDispatch();\n\n    const [task, setTask] = useState(\"\");\n\n    function submitTask(e) {\n        if (e.key === \"Enter\" && task.trim().length > 2) {\n            let temp = task.trim().split(\" \");\n            let time = 0;\n            if (!isNaN(parseInt(temp[temp.length - 1]))) {\n                time = parseInt(temp.pop());\n            } else {\n                time = 20;\n            }\n            temp = temp.join(\" \");\n\n            let newTask = {\n                id: Math.floor(Math.random() * 10000),\n                globalKey: meta.globalKey,\n                content: temp,\n                time: time * 60,\n                remainingTime: time * 60,\n                isRunning: false,\n                isCompleted: false,\n                createdAt: new Date().toISOString(),\n                updatedAt: new Date().toISOString(),\n            };\n            dispatch(create(newTask));\n            dispatch(incrementGlobalKey());\n            setTask(\"\");\n            e.target.value = \"\";\n            e.target.focus();\n        }\n    }\n\n    function handleOnDragEnd(result) {\n        if (!result.destination) return;\n\n        let items = [...tasks.map(i=>({...i}))];\n        //let items = [...tasks]\n        // let x = JSON.stringify(items);\n        // items = JSON.parse(x);\n\n        const [reorderedItem] = items.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorderedItem);\n\n        let i = result.source.index;\n        let direction = result.destination.index > result.source.index; // direction true means moving right & swapping\n        while (i != result.destination.index) {\n            if (direction) {\n                console.log(items[i].globalKey)\n                items[i].globalKey=tasks[i].globalKey;\n                console.log(tasks[i].globalKey)\n                i++;\n            } else {\n                items[i].globalKey=tasks[i].globalKey;\n                i--;\n            }\n            if(i == result.destination.index){\n                items[i].globalKey=tasks[i].globalKey;\n            }\n        }\n        \n        dispatch(updateOrder(items));\n    }\n\n    function getFlipKey() {\n        let flipKey = \"\";\n        tasks.forEach((i) => {\n            flipKey += `${i.globalKey}`;\n        });\n        return flipKey;\n    }\n\n    return (\n        <>\n            <input type=\"text\" onChange={(e) => setTask(e.target.value)} onKeyDown={submitTask} />\n            <DragDropContext onDragEnd={handleOnDragEnd}>\n                <Droppable droppableId=\"dropArea\">\n                    {(provided) => (\n                        <div {...provided.droppableProps} ref={provided.innerRef}>\n                            <Flipper flipKey={getFlipKey()}>\n                                {tasks.map((i, index) => (\n                                    <Draggable key={i.id} draggableId={`${i.id}`} index={index}>\n                                        {(provided2) => <TaskCard forwardRBDProvided={provided2} task={i} />}\n                                    </Draggable>\n                                ))}\n                                {provided.placeholder}\n                            </Flipper>\n                        </div>\n                    )}\n                </Droppable>\n            </DragDropContext>\n        </>\n    );\n}\n","import React from 'react';\r\nimport { Task } from './tasks';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n        <Task />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n}; \r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport counterReducer from \"./../containers/counter/counterSlice\";\r\nimport tasksReducer from \"../containers/tasks/tasksSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        counter: counterReducer,\r\n        tasks: tasksReducer\r\n    },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}