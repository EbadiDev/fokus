{"version":3,"sources":["containers/tasks/tasksSlice.js","containers/tasks/TaskCard.js","hooks/useTimer.js","containers/tasks/index.js","containers/App.js","containers/counter/counterSlice.js","store/index.js","serviceWorker.js","index.js"],"names":["tasksSlice","createSlice","name","initialState","reducers","create","state","payload","push","remove","filter","i","id","update","forEach","tick","remainingTime","reset","time","isRunning","toggleIsRunning","decrement","actions","TaskCard","task","dispatch","useDispatch","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useTimer","style","padding","width","margin","border","borderRadius","content","onClick","Task","tasks","useSelector","useState","setTask","setTime","type","onChange","e","target","value","newTask","Math","floor","random","map","App","counterSlice","increment","incrementByAmount","action","configureStore","reducer","counter","counterReducer","tasksReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.420e284f.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: [],\n    reducers: {\n        create: (state, { payload }) => {\n            state.push(payload);\n        },\n        remove: (state, { payload }) => {\n            return state.filter((i) => i.id !== payload);\n        },\n        update: (state, { payload }) => {\n            state.forEach((i) => {\n                if (i.id === payload.id) {\n                    i = payload;\n                }\n            });\n        },\n        tick:(state, { payload }) => {\n            state.forEach((i) => {\n                if (i.id === payload) {\n                    i.remainingTime = i.remainingTime -1;\n                }\n            });\n        },\n        reset: (state, { payload }) => {\n            state.forEach((i) => {\n                if (i.id === payload) {\n                    i.remainingTime = i.time;\n                    i.isRunning=false;\n                }\n            });\n        },\n        toggleIsRunning: (state, { payload }) => {\n            state.forEach((i) => {\n                if (i.id === payload) {\n                    i.isRunning = !i.isRunning;\n                }\n            });\n        },\n        decrement: (state, { payload }) => {\n            state.forEach((i) => {\n                if (i.id === payload) {\n                    i.remainingTime -= 1;\n                }\n            });\n        },\n    },\n});\n\nexport const { create, remove, update, reset, toggleIsRunning , tick } = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n","import React from \"react\";\nimport { useDispatch } from 'react-redux'\nimport { create, remove, update, tick, reset, toggleIsRunning } from \"./tasksSlice\";\nimport useTimer from '../../hooks/useTimer'\n\nexport default function TaskCard({task}) {\n    const delay = 1000;\n    const dispatch = useDispatch();\n    useTimer(\n        () => {\n            if (task.remainingTime > 0) {\n                dispatch(tick(task.id));\n            }else if (task.remainingTime === 0) {\n                dispatch(toggleIsRunning(task.id))\n            }\n        },\n        task.isRunning ? delay : null\n    );\n\n    return (\n        <div key={task.id} style={{ padding: \"10px\", width: \"200px\", margin: \"20px auto\", border: \"orange solid 1px\", borderRadius: \"5px\" }}>\n            <p>{task.content}</p>\n            <p>{task.remainingTime}</p>\n            <button onClick={() => dispatch(remove(task.id))}>remove</button>\n            <button onClick={() => dispatch(toggleIsRunning(task.id))}>play/pause</button>\n            <button onClick={() => dispatch(reset(task.id))}>reset</button>\n        </div>\n    );\n    \n}\n","import { useEffect, useRef } from \"react\";\n\nexport default function useTimer(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n","import React, { useState} from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { create} from \"./tasksSlice\";\nimport TaskCard from './TaskCard'\n\nexport function Task() {\n    const tasks = useSelector((state) => state.tasks);\n    const dispatch = useDispatch();\n    \n    const [task,setTask] = useState(\"\");\n    const [time,setTime] = useState(\"\");\n\n\n    function submitTask() {\n        let newTask = {\n            id: Math.floor(Math.random() * 10000),\n            content: task,\n            time: time,\n            remainingTime: time,\n            isRunning: false,\n        };\n        dispatch(create(newTask));\n    }\n\n    return (\n        <div>\n            <input type=\"text\" onChange={(e) => setTask(e.target.value)}/>\n            <input type=\"number\" onChange={(e) => setTime(e.target.value)}/>\n            <input type=\"button\" value=\"submit task\" onClick={submitTask} />\n            {tasks.map((i) => <TaskCard task={i}/>)}\n        </div>\n    );\n}\n","import React from 'react';\r\nimport { Task } from './tasks';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n        <Task />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n}; \r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport counterReducer from \"./../containers/counter/counterSlice\";\r\nimport tasksReducer from \"../containers/tasks/tasksSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        counter: counterReducer,\r\n        tasks: tasksReducer,\r\n    },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}