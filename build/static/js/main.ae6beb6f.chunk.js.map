{"version":3,"sources":["containers/taskBoard/taskBoardSlice.js","helpers/index.js","components/TaskBoard/TaskCard.js","components/TaskBoard/TaskInput.js","components/TaskBoard/Divider.js","containers/taskBoard/TaskBoard.js","sounds/ding.mp3","containers/focusBoard/FocusBoard.js","hooks/useTimer.js","containers/App.js","containers/focusBoard/focusBoardSlice.js","store/index.js","serviceWorker.js","index.js"],"names":["tasksSlice","createSlice","name","initialState","taskArray","meta","globalKey","completedTaskStartIndex","focussedTaskIndex","reducers","create","tasks","payload","unshift","remove","filter","i","id","isCompleted","length","updateTask","map","updateTaskContent","forEach","content","updatedTaskContent","updateOrder","focusOnTask","resetFocussedTask","tick","remainingTime","resetTaskTimer","isRunning","time","toggleIsRunning","toggleIsCompleted","incrementGlobalKey","rearrange","markedAsComplete","found","temp","task","idx","pos","push","splice","actions","formattedTimeString","x","secs","mins","Math","floor","TaskCardContainer","styled","div","TaskCardDragIcon","TaskCardDiv","props","isFocussed","TaskDetailsDiv","TaskContentDiv","TaskEditInput","textarea","TaskStatusDiv","p","TaskActionButton","TaskDeleteButton","TaskControllerDiv","TaskCard","str","taskIndex","forwardRBDProvided","dispatch","useDispatch","useState","taskUnderEdit","setTaskUnderEdit","setUpdatedTaskContent","showDragIcon","setShowDragIcon","flipId","ref","innerRef","draggableProps","dragHandleProps","onMouseEnter","onMouseLeave","autoFocus","value","onBlur","onKeyDown","e","key","trim","split","isNaN","parseInt","pop","join","onChange","target","style","minWidth","onDoubleClick","substring","onClick","stopPropagation","TaskInputContainer","TaskContentInputDiv","TaskContentInputField","input","TaskTimeInputDiv","TaskTimeInputField","TaskInput","taskContentInputRef","taskTimeInputRef","setTask","setTime","useSelector","state","submitTask","taskTime","newTask","random","createdAt","Date","toISOString","focus","type","placeholder","el","DoneTasksDivider","DividerLine","DividerIcon","Divider","TaskBoardContainer","TaskBoard","focussedTask","flipKey","getFlipKey","onDragEnd","result","destination","items","source","index","reorderedItem","direction","greaterIndex","max","smallerIndex","min","droppableId","provided","droppableProps","isDragDisabled","draggableId","provided2","dingSoundElement","Audio","dingSound","FocusBoardContainer","FocussedTaskDiv","FocussedTaskTimer","TimerDiv","ButtonContainer","FocussedTaskContent","FocussedTaskController","FocusBoard","updateTaskTimeHandler","val","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useTimer","play","width","height","styles","buildStyles","strokeLinecap","pathColor","trailColor","fontSize","Container","App","focusBoardSlice","updateTaskTime","focusBoard","configureStore","reducer","tasksReducer","focusBoardReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2NAEaA,EAAaC,YAAY,CAClCC,KAAM,QACNC,aAAc,CACVC,UAAW,GACXC,KAAM,CACFC,UAAW,EACXC,yBAA0B,EAC1BC,mBAAoB,IAG5BC,SAAU,CACNC,OAAQ,SAACC,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACdD,EAAMP,UAAUS,QAAQD,IACmB,GAAvCD,EAAMN,KAAKE,2BAAiCI,EAAMN,KAAKE,yBAE/DO,OAAQ,SAACH,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACdD,EAAMP,UAAYO,EAAMP,UAAUW,QAAO,SAACC,GACtC,OAAIA,EAAEC,KAAOL,IAEJI,EAAEE,YAEIP,EAAMN,KAAKE,yBAA2BI,EAAMP,UAAUe,OAAS,IACtER,EAAMN,KAAKE,yBAA2B,IAFK,GAAvCI,EAAMN,KAAKE,2BAAiCI,EAAMN,KAAKE,yBAIxD,OAInBa,WAAY,SAACT,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QAClBD,EAAMP,UAAYO,EAAMP,UAAUiB,KAAI,SAACL,GAAD,OAAQA,EAAEC,KAAOL,EAAQK,GAAKL,EAAUI,MAElFM,kBAAmB,cAAiC,IAA9BlB,EAA6B,EAA7BA,UAAeQ,EAAc,EAAdA,QACjCR,EAAUmB,SAAQ,SAACP,GACXA,EAAEC,KAAOL,EAAQK,KACjBD,EAAEQ,QAAUZ,EAAQa,wBAIhCC,YAAa,SAACf,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACnBD,EAAMP,UAAYQ,GAGtBe,YAAa,SAAChB,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACnBD,EAAMN,KAAKG,kBAAoBI,GAEnCgB,kBAAmB,SAACjB,GAChBA,EAAMN,KAAKG,mBAAqB,GAEpCqB,KAAM,SAAClB,EAAD,GAAyB,IAAfC,EAAc,EAAdA,UACVD,EAAMP,UAAUQ,GAASkB,eAE/BC,eAAgB,SAACpB,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACtBD,EAAMP,UAAUQ,GAASoB,WAAY,EACrCrB,EAAMP,UAAUQ,GAASkB,cAAgBnB,EAAMP,UAAUQ,GAASqB,MAEtEC,gBAAiB,SAACvB,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACvBD,EAAMP,UAAUQ,GAASoB,WAAarB,EAAMP,UAAUQ,GAASoB,WAGnEG,kBAAmB,cAAiC,IAA9B/B,EAA6B,EAA7BA,UAAeQ,EAAc,EAAdA,QACjCR,EAAUmB,SAAQ,SAACP,GACXA,EAAEC,KAAOL,IACTI,EAAEE,aAAeF,EAAEE,iBAI/BkB,mBAAoB,cAAc,EAAX/B,KACZC,WAEX+B,UAAW,SAAC1B,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACbK,EAAKL,EAAQK,GAEjB,GAAIL,EAAQ0B,iBACR,IAA4C,IAAxC3B,EAAMN,KAAKE,wBAAgC,CAC3CI,EAAMN,KAAKE,wBAA0BI,EAAMP,UAAUe,OAAS,EAE9D,IADA,IAAIoB,GAAQ,EACHvB,EAAI,EAAGA,EAAIL,EAAMP,UAAUe,OAAS,EAAGH,IAC5C,GAAIuB,EAAO,CACP,IAAIC,EAAO7B,EAAMP,UAAUY,GAC3BL,EAAMP,UAAUY,GAAKL,EAAMP,UAAUY,EAAI,GACzCL,EAAMP,UAAUY,EAAI,GAAKwB,OACtB,GAAI7B,EAAMP,UAAUY,GAAGC,KAAOA,EAAI,CACrCsB,GAAQ,EACR,IAAIC,EAAO7B,EAAMP,UAAUY,GAC3BL,EAAMP,UAAUY,GAAKL,EAAMP,UAAUY,EAAI,GACzCL,EAAMP,UAAUY,EAAI,GAAKwB,EAGjC7B,EAAMN,KAAKE,wBAA0BI,EAAMP,UAAUe,OAAS,MAC3D,CAEH,IADA,IAAIsB,EAAMC,EACD1B,EAAI,EAAGA,EAAIL,EAAMP,UAAUe,OAAQH,IACxC,GAAIL,EAAMP,UAAUY,GAAGC,KAAOA,EAAI,CAC9BwB,EAAO9B,EAAMP,UAAUY,GACvB0B,EAAM1B,EACN,MAIR,IADA,IAAI2B,GAAO,EACF3B,EAAIL,EAAMN,KAAKE,wBAAyBS,EAAIL,EAAMP,UAAUe,OAAQH,IACzE,KAAIL,EAAMP,UAAUY,GAAGV,UAAYmC,EAAKnC,WAAxC,CAEIqC,EAAM3B,EACN,OAIK,IAAT2B,EACAhC,EAAMP,UAAUwC,KAAKH,GAErB9B,EAAMP,UAAUyC,OAAOF,EAAK,EAAGF,GAEnC9B,EAAMP,UAAUyC,OAAOH,EAAK,GAC5B/B,EAAMN,KAAKE,yBAA2B,MAEvC,CACH,GAA0C,GAAtCI,EAAMN,KAAKE,wBAA8B,CAEzC,IADA,IAAIkC,EAAMC,EACD1B,EAAIL,EAAMN,KAAKE,wBAAyBS,EAAIL,EAAMP,UAAUe,OAAQH,IACzE,GAAIL,EAAMP,UAAUY,GAAGC,KAAOA,EAAI,CAC9BwB,EAAO9B,EAAMP,UAAUY,GACvB0B,EAAM1B,EACN,MAIRL,EAAMP,UAAUyC,OAAOH,EAAK,GAC5B/B,EAAMP,UAAUS,QAAQ4B,GACxB9B,EAAMN,KAAKE,wBAA0B,MAClC,CAEH,IADA,IAAIkC,EAAMC,EACD1B,EAAIL,EAAMN,KAAKE,wBAAyBS,EAAIL,EAAMP,UAAUe,OAAQH,IACzE,GAAIL,EAAMP,UAAUY,GAAGC,KAAOA,EAAI,CAC9BwB,EAAO9B,EAAMP,UAAUY,GACvB0B,EAAM1B,EACN,MAMR,IAFA,IACI2B,GAAO,EACF3B,EAFGL,EAAMN,KAAKE,wBAA0B,EAE7BS,GAAK,EAAGA,IACxB,KAAIL,EAAMP,UAAUY,GAAGV,UAAYmC,EAAKnC,WAAxC,CAEIqC,EAAM3B,EACN,MAIRL,EAAMP,UAAUyC,OAAOH,EAAK,IACf,IAATC,EACAhC,EAAMP,UAAUS,QAAQ4B,IAExBE,IACAhC,EAAMP,UAAUyC,OAAOF,EAAK,EAAGF,IAEnC9B,EAAMN,KAAKE,yBAA2B,EAGtCI,EAAMN,KAAKE,yBAA2BI,EAAMP,UAAUe,SACtDR,EAAMN,KAAKE,yBAA2B,Q,EAqBtDP,EAAW8C,QAbXpC,E,EAAAA,OACAI,E,EAAAA,OACAM,E,EAAAA,WACAE,E,EAAAA,kBACAK,E,EAAAA,YACAC,E,EAAAA,kBACAG,E,EAAAA,eACAG,E,EAAAA,gBACAL,E,EAAAA,KACAM,E,EAAAA,kBACAT,E,EAAAA,YACAU,E,EAAAA,mBACAC,E,EAAAA,UAGWrC,IAAf,Q,uCCzLO,SAAS+C,EAAoBC,GAChC,IAAIC,EAAOD,EAAI,GACXE,EAAOC,KAAKC,MAAMJ,EAAI,IAa1B,OAXY,GAARC,EACAA,EAAI,KACGA,EAAO,KACdA,EAAI,WAAOA,IAEH,GAARC,EACAA,EAAI,KACGA,EAAO,KACdA,EAAI,WAAOA,IAGT,GAAN,OAAUA,EAAV,YAAkBD,G,wgGCJtB,IAAMI,EAAoBC,IAAOC,IAAV,KAWjBC,EAAmBF,IAAOC,IAAV,KAehBE,EAAcH,IAAOC,IAAV,KAOS,SAACG,GAAD,OAAYA,EAAMC,WAAa,gCAAkC,+BACzE,SAACD,GAAD,OAAYA,EAAMC,WAAa,gCAAkC,+BACrE,SAACD,GAAD,OAAYA,EAAMC,WAAa,oBAAsB,UAG7DC,EAAiBN,IAAOC,IAAV,KAUdM,EAAiBP,IAAOC,IAAV,KAYdO,EAAgBR,IAAOS,SAAV,KAebC,EAAgBV,IAAOC,IAAV,KAeF,SAACU,GAAD,OAAQA,EAAE/C,YAAc,UAAY+C,EAAEN,WAAa,UAAY,UAI1EO,EAAmBZ,IAAOC,IAAV,KAiBhBY,GAAmBb,IAAOC,IAAV,KAUhBa,GAAoBd,IAAOC,IAAV,KAiBR,SAASc,GAAT,GAAwE,IALlEC,EAKc7B,EAAmD,EAAnDA,KAAM8B,EAA6C,EAA7CA,UAAWC,EAAkC,EAAlCA,mBAAoBb,EAAc,EAAdA,WAC9Dc,EAAWC,cADiE,EAGxCC,oBAAS,GAH+B,mBAG3EC,EAH2E,KAG5DC,EAH4D,OAI9BF,mBAASlC,EAAKjB,SAJgB,mBAI3EC,EAJ2E,KAIvDqD,EAJuD,OAK1CH,oBAAS,GALiC,mBAK3EI,EAL2E,KAK7DC,EAL6D,KAqBlF,OACI,cAAC,IAAD,CAASC,OAAM,UAAKxC,EAAKxB,IAAzB,SACI,eAACoC,EAAD,qCACI6B,IAAKV,EAAmBW,UACpBX,EAAmBY,gBACnBZ,EAAmBa,iBAH3B,IAIIC,aAAc,kBAAMN,GAAiBvC,EAAKvB,cAAe,IACzDqE,aAAc,kBAAMP,GAAiBvC,EAAKvB,cAAe,IAL7D,UAOI,cAACsC,EAAD,UAAmBuB,GAAgB,cAAC,IAAD,MAEnC,eAACtB,EAAD,CAAaE,WAAYA,EAAzB,UACI,eAACK,EAAD,CAAeL,WAAYA,EAAYzC,YAAauB,EAAKvB,YAAzD,UACKuB,EAAKvB,YAAc,cAAC,IAAD,IAAoByC,EAAa,cAAC,IAAD,IAAkB,cAAC,IAAD,KACrElB,EAAKvB,aAAe,4BAAI6B,EAAoBN,EAAKX,oBAGvD,eAAC8B,EAAD,WACI,cAACC,EAAD,UACKe,EACG,cAACd,EAAD,CACI0B,WAAS,EACTC,MAAOhE,EACPiE,OAAQ,WACJjB,EAASnD,EAAkB,CAAEL,GAAIwB,EAAKxB,GAAIQ,wBAC1CoD,GAAiB,IAErBc,UAzChC,SAAkCC,GAC9B,GAAc,UAAVA,EAAEC,KAAmBpE,EAAmBqE,OAAO3E,QAAU,EAAG,CAC5D,IAAIqB,EAAOf,EAAmBqE,OAAOC,MAAM,KAEvB,IAAhBvD,EAAKrB,QAAiB6E,MAAMC,SAASzD,EAAKA,EAAKrB,OAAS,MACjD8E,SAASzD,EAAK0D,OAEzB1D,EAAOA,EAAK2D,KAAK,KAEjB1B,EAASnD,EAAkB,CAAEL,GAAIwB,EAAKxB,GAAIQ,wBAC1CoD,GAAiB,KAgCOuB,SAAU,SAACR,GAAD,OAAOd,EAAsBc,EAAES,OAAOZ,UAGpD,oBAAIa,MAAO,CAAEC,SAAU,GAAKC,cAAe,kBAAM3B,GAAiB,IAAlE,UAzDXP,EA0D4B7B,EAAKjB,QAzD9C8C,EAAInD,QAAU,GAAWmD,EACjBA,EAAImC,UAAU,EAAG,IAAM,WA6Df,eAACrC,GAAD,YACM3B,EAAKvB,aACH,cAACgD,EAAD,CACIwC,QACI/C,EACM,WACQlB,EAAKT,WAAWyC,EAASvC,EAAgBqC,IAC7CE,EAAS7C,MAEb,WACI6C,EAAS9C,EAAY4C,KARvC,SAYI,4BAAIZ,EAAa,UAAY,YAIrC,cAACO,EAAD,CACIwC,QACIjE,EAAKvB,YACC,SAAC0E,GACGnB,EAAStC,EAAkBM,EAAKxB,KAChCwD,EAASpC,EAAU,CAAEpB,GAAIwB,EAAKxB,GAAIqB,kBAAkB,KACpDsD,EAAEe,mBAEN,SAACf,GACOnD,EAAKT,WAAUyC,EAASvC,EAAgBqC,IACxCZ,GAAYc,EAAS7C,KACzB6C,EAAStC,EAAkBM,EAAKxB,KAChCwD,EAASpC,EAAU,CAAEpB,GAAIwB,EAAKxB,GAAIqB,kBAAkB,KACpDsD,EAAEe,mBAbpB,SAiBI,4BAAIlE,EAAKvB,YAAc,SAAW,YAGpCyC,GACE,cAACQ,GAAD,CACIuC,QAAS,SAACd,GACNnB,EAAS3D,EAAO2B,EAAKxB,KACrB2E,EAAEe,kBACEhD,GACAc,EAAS7C,MALrB,SASI,cAAC,IAAD,qB,o3CCxPpC,IAAMgF,GAAqBtD,IAAOC,IAAV,MAUlBsD,GAAsBvD,IAAOC,IAAV,MAYnBuD,GAAwBxD,IAAOyD,MAAV,MASrBC,GAAmB1D,IAAOC,IAAV,MAYhB0D,GAAqB3D,IAAOyD,MAAV,MAiBT,SAASG,KAAa,IAG7BC,EAAqBC,EAHO,EACRzC,mBAAS,IADD,mBACzBlC,EADyB,KACnB4E,EADmB,OAER1C,mBAAS,IAFD,mBAEzB1C,EAFyB,KAEnBqF,EAFmB,KAI1BjH,EAAOkH,aAAY,SAACC,GAAD,OAAWA,EAAM7G,MAAMN,QAC1CoE,EAAWC,cAEjB,SAAS+C,EAAW7B,GAChB,GAAc,UAAVA,EAAEC,KAAmBpD,EAAKqD,OAAO3E,QAAU,EAAG,CAC9C,IAAIqB,EAAOC,EAAKqD,OAAOC,MAAM,KAEzB2B,EAAWzF,EACK,IAAhBO,EAAKrB,QAAiB6E,MAAMC,SAASzD,EAAKA,EAAKrB,OAAS,OACxDuG,EAAWzB,SAASzD,EAAK0D,QAE7B1D,EAAOA,EAAK2D,KAAK,KAEjB,IAAIwB,EAAU,CACV1G,GAAIkC,KAAKC,MAAsB,IAAhBD,KAAKyE,UACpBtH,UAAWD,EAAKC,UAChBkB,QAASgB,EACTP,KAAiB,GAAXyF,EACN5F,cAA0B,GAAX4F,EACf1F,WAAW,EACXd,aAAa,EACb2G,WAAW,IAAIC,MAAOC,eAE1BtD,EAAS/D,EAAOiH,IAChBlD,EAASrC,KACTiF,EAAQ,IACRC,EAAQ,IACRH,EAAoB1B,MAAQ,GAC5B2B,EAAiB3B,MAAQ,GACzB0B,EAAoBa,SAI5B,OACI,eAACpB,GAAD,WACI,eAACC,GAAD,WACI,cAAC,KAAD,IACA,cAACC,GAAD,CACImB,KAAK,OACLC,YAAY,yBACZhD,IAAK,SAACiD,GAAD,OAAShB,EAAsBgB,GACpC/B,SAAU,SAACR,GAAD,OAAOyB,EAAQzB,EAAES,OAAOZ,QAClCE,UAAW8B,OAGnB,eAACT,GAAD,WACI,cAAC,KAAD,IACA,cAACC,GAAD,CACIgB,KAAK,SACLC,YAAY,KACZhD,IAAK,SAACiD,GAAD,OAASf,EAAmBe,GACjC/B,SAAU,SAACR,GAAD,OAAO0B,EAAQ1B,EAAES,OAAOZ,QAClCE,UAAW8B,IAEf,8C,+cCxHhB,IAAMW,GAAmB9E,IAAOC,IAAV,MAGhB8E,GAAc/E,IAAOC,IAAV,MAOX+E,GAAchF,IAAOC,IAAV,MAUF,SAASgF,KACpB,OACI,cAAC,IAAD,CAAStD,OAAM,KAAf,SACI,eAACmD,GAAD,WACI,cAACC,GAAD,IACA,cAACC,GAAD,UACI,cAAC,IAAD,MAEJ,cAACD,GAAD,S,sKCrBhB,IAAMG,GAAqBlF,IAAOC,IAAV,MAOjB,SAASkF,KACZ,IAAM9H,EAAQ4G,aAAY,SAACC,GAAD,OAAWA,EAAM7G,MAAMP,aAC3CC,EAAOkH,aAAY,SAACC,GAAD,OAAWA,EAAM7G,MAAMN,QAC5CqI,EAAe,MACY,IAA5BrI,EAAKG,oBACJkI,EAAa/H,EAAMN,EAAKG,oBAG5B,IAAMiE,EAAWC,cAkDjB,SAASf,EAAW1C,GAChB,OAAqB,OAAjByH,GAAyBA,EAAazH,KAAOA,EAMrD,OACI,eAACuH,GAAD,WACI,cAACtB,GAAD,IAEA,eAAC,IAAD,CAASyB,QApBjB,WACI,IAAIA,EAAU,GAKd,OAJAhI,EAAMY,SAAQ,SAACP,GACX2H,GAAO,UAAO3H,EAAEV,cAEpBqI,GAAO,UAAOtI,EAAKE,yBAeGqI,GAAlB,UACI,cAAC,KAAD,CAAiBC,UA5D7B,SAAyBC,GACrB,GAAKA,EAAOC,YAAZ,CAEA,IAAIC,EAAK,YAAOrI,EAAMU,KAAI,SAACL,GAAD,sBAAaA,OAHV,EAILgI,EAAMnG,OAAOiG,EAAOG,OAAOC,MAAO,GAAnDC,EAJsB,oBAK7BH,EAAMnG,OAAOiG,EAAOC,YAAYG,MAAO,EAAGC,GAK1C,IAHA,IAAInI,EAAI8H,EAAOG,OAAOC,MAClBE,EAAYN,EAAOC,YAAYG,MAAQJ,EAAOG,OAAOC,MAElDlI,GAAK8H,EAAOC,YAAYG,OACvBE,GACAJ,EAAMhI,GAAGV,UAAYK,EAAMK,GAAGV,UAC9BU,MAEAgI,EAAMhI,GAAGV,UAAYK,EAAMK,GAAGV,UAC9BU,KAEAA,GAAK8H,EAAOC,YAAYG,QACxBF,EAAMhI,GAAGV,UAAYK,EAAMK,GAAGV,WAItC,IAAI+I,EAAalG,KAAKmG,IAAIR,EAAOC,YAAYG,MAAMJ,EAAOG,OAAOC,OAC7DK,EAAapG,KAAKqG,IAAIV,EAAOC,YAAYG,MAAMJ,EAAOG,OAAOC,OAE9DJ,EAAOG,OAAOC,QAAQ7I,EAAKG,kBAC1BiE,EAAS9C,EAAYmH,EAAOC,YAAYG,QACnC7I,EAAKG,mBAAmB+I,GAAgBlJ,EAAKG,mBAAmB6I,IAClEP,EAAOC,YAAYG,MAAQJ,EAAOG,OAAOC,MACxCzE,EAAS9C,EAAYtB,EAAKG,kBAAkB,IAE5CiE,EAAS9C,EAAYtB,EAAKG,kBAAkB,KAIpDiE,EAAS/C,EAAYsH,MAwBb,SACI,cAAC,KAAD,CAAWS,YAAY,WAAvB,SACK,SAACC,GAAD,OACG,gDAASA,EAASC,gBAAlB,IAAkCzE,IAAKwE,EAASvE,SAAhD,UACKxE,EAAMU,KAAI,SAACL,EAAGkI,GAAJ,OACNlI,EAAEE,YAKC,GAJA,cAAC,KAAD,CAAW0I,eAAgB5I,EAAEE,YAAwB2I,YAAW,UAAK7I,EAAEC,IAAMiI,MAAOA,EAApF,SACK,SAACY,GAAD,OAAe,cAACzF,GAAD,CAAUE,UAAa2E,EAAO1E,mBAAoBsF,EAAWrH,KAAMzB,EAAG2C,WAAYA,EAAW3C,EAAEC,QADpED,EAAEC,OAOxDyI,EAASxB,sBAMS,IAAlC7H,EAAKE,yBAAmE,IAAjCF,EAAKE,yBAAiC,cAACgI,GAAD,IAE7E5H,EAAMU,KAAI,SAACL,EAAGkI,GAAJ,OACPlI,EAAEE,YAAc,cAACmD,GAAD,CAAUE,UAAa2E,EAAkB1E,mBAAoB,CAAEW,SAAU,MAAQ1C,KAAMzB,EAAG2C,WAAYA,EAAW3C,EAAEC,KAAhFD,EAAEC,IAAwF,Y,aC/GlJ,I,MAAA,IAA0B,kC,g7DCYzC,IAAI8I,GAAmB,IAAIC,MAAMC,IAE3BC,GAAsB5G,IAAOC,IAAV,MASnB4G,GAAkB7G,IAAOC,IAAV,MAYf6G,GAAoB9G,IAAOC,IAAV,MASjB8G,GAAW/G,IAAOC,IAAV,MAYR+G,GAAkBhH,IAAOC,IAAV,MAafgH,GAAsBjH,IAAOC,IAAV,MAWnBiH,GAAyBlH,IAAOC,IAAV,MASrB,SAASkH,KACZ,IAAMjK,EAAoB+G,aAAY,SAACC,GAAD,OAAWA,EAAM7G,MAAMN,KAAKG,qBAC9DkI,EAAenB,aAAY,SAACC,GAAD,OAAWA,EAAM7G,MAAMP,UAAUI,OACrC,IAAvBA,IAA0BkI,EAAe,MAC7C,IAAMjE,EAAWC,cAejB,SAASgG,EAAsBjI,EAAMkI,GACjC,IAAIlI,EAAKvB,YAAT,CACAuD,EAASvC,GAAgB,IAEzB,IAAIM,EAAI,eAAQC,GAChBD,EAAKP,MAAc,GAAN0I,EACbnI,EAAKV,eAAuB,GAAN6I,EACtBlG,EAASrD,EAAWoB,KAGxB,OCpHW,SAAkBoI,EAAUC,GACvC,IAAMC,EAAgBC,mBAGtBC,qBAAU,WACNF,EAAcG,QAAUL,IACzB,CAACA,IAGJI,qBAAU,WAIN,GAAc,OAAVH,EAAgB,CAChB,IAAI5J,EAAKiK,aAJb,WACIJ,EAAcG,YAGaJ,GAC3B,OAAO,kBAAMM,cAAclK,OAEhC,CAAC4J,ID4EJO,EACI,WACyB,OAAjB1C,IACKA,EAAa5G,cAAgB,EAClC2C,EAAS5C,EAAKrB,IACwB,IAA/BkI,EAAa5G,gBACpB2C,EAASvC,EAAgB1B,IACzBuJ,GAAiBsB,WAGR,OAAjB3C,GAAyBA,EAAa1G,UAX5B,IAWgD,MAc1D,cAACkI,GAAD,UACqB,MAAhBxB,GACG,8BACI,eAACyB,GAAD,WACI,eAACC,GAAD,WACI,cAACE,GAAD,CAAiB5D,QAAS,kBAAMgE,EAAsBhC,GAAe,IAArE,SACI,sCAEJ,qBAAKpC,MAAO,CAAEgF,MAAO,IAAKC,OAAQ,KAAlC,SACI,cAAC,KAAD,CACI9F,MAAOtC,KAAKC,MAAOsF,EAAa5G,cAAgB4G,EAAazG,KAAQ,KACrEuJ,OAAQC,aAAY,CAChBC,cAAe,OACfC,UAAW,QACXC,WAAY,UALpB,SAQI,cAACvB,GAAD,UACI,6BAAKtH,EAAoB2F,EAAa5G,uBAIlD,cAACwI,GAAD,CAAiB5D,QAAS,kBAAMgE,EAAsBhC,EAAc,IAApE,SACI,yCAGR,cAAC6B,GAAD,UACI,oBAAIjE,MAAO,CAAEC,SAAU,GAAvB,SAA6BmC,EAAalH,YAE9C,eAACgJ,GAAD,WACI,cAACF,GAAD,CAAiB5D,QAAS,kBAAMjC,EAASvC,EAAgB1B,KAAqB8F,MAAO,CAAEuF,SAAU,SAAjG,SACKnD,EAAa1G,UAAY,cAAC,IAAD,IAAsB,cAAC,IAAD,MAEpD,cAACsI,GAAD,CAAiB5D,QAAS,kBAAMjC,EAAS1C,EAAevB,KAAxD,SACI,cAAC,KAAD,gB,+GEpJhC,IAAMsL,GAAYxI,IAAOC,IAAV,MAcAwI,OATf,WACI,OACI,eAACD,GAAD,WACI,cAACrB,GAAD,IACA,cAAChC,GAAD,QCoBGuD,GAhCgB/L,YAAY,CACvCC,KAAM,aACNC,aAAc,CACVuI,aAAc,MAElBjI,SAAU,CAkBNwL,eAAgB,SAACC,EAAD,GAA8B,IAAftL,EAAc,EAAdA,QAC3BsL,EAAWxD,aAAazG,MAAkB,GAAVrB,EAChCsL,EAAWxD,aAAa5G,eAA2B,GAAVlB,MAOrD,QC9BeuL,eAAe,CAC1BC,QAAS,CACLzL,MAAO0L,EACPH,WAAWI,MCKCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ae6beb6f.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        taskArray: [],\n        meta: {\n            globalKey: 0,\n            completedTaskStartIndex: -1,\n            focussedTaskIndex: -1,\n        },\n    },\n    reducers: {\n        create: (tasks, { payload }) => {\n            tasks.taskArray.unshift(payload);\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\n        },\n        remove: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.filter((i) => {\n                if (i.id !== payload) return true;\n                else {\n                    if (!i.isCompleted) {\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\n                    } else if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length - 1) {\n                        tasks.meta.completedTaskStartIndex = -1;\n                    }\n                    return false;\n                }\n            });\n        },\n        updateTask: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.map((i) => (i.id === payload.id ? payload : i));\n        },\n        updateTaskContent: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.content = payload.updatedTaskContent;\n                }\n            });\n        },\n        updateOrder: (tasks, { payload }) => {\n            tasks.taskArray = payload;\n        },\n\n        focusOnTask: (tasks, { payload }) => {\n            tasks.meta.focussedTaskIndex = payload;\n        },\n        resetFocussedTask: (tasks) => {\n            tasks.meta.focussedTaskIndex = -1;\n        },\n        tick: (tasks, { payload }) => {\n            --tasks.taskArray[payload].remainingTime;\n        },\n        resetTaskTimer: (tasks, { payload }) => {\n            tasks.taskArray[payload].isRunning = false;\n            tasks.taskArray[payload].remainingTime = tasks.taskArray[payload].time;\n        },\n        toggleIsRunning: (tasks, { payload }) => {\n            tasks.taskArray[payload].isRunning = !tasks.taskArray[payload].isRunning;\n        },\n\n        toggleIsCompleted: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.isCompleted = !i.isCompleted;\n                }\n            });\n        },\n        incrementGlobalKey: ({ meta }) => {\n            ++meta.globalKey;\n        },\n        rearrange: (tasks, { payload }) => {\n            let id = payload.id;\n\n            if (payload.markedAsComplete) {\n                if (tasks.meta.completedTaskStartIndex === -1) {\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                    let found = false;\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\n                        if (found) {\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        } else if (tasks.taskArray[i].id === id) {\n                            found = true;\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }\n                    }\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                } else {\n                    let task, idx;\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n                    let pos = -1;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    if (pos === -1) {\n                        tasks.taskArray.push(task);\n                    } else {\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.meta.completedTaskStartIndex -= 1;\n                }\n            } else {\n                if (tasks.meta.completedTaskStartIndex == 0) {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.taskArray.unshift(task);\n                    tasks.meta.completedTaskStartIndex = 1;\n                } else {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    let start = tasks.meta.completedTaskStartIndex - 1;\n                    let pos = -1;\n                    for (let i = start; i >= 0; i--) {\n                        if (tasks.taskArray[i].globalKey < task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    if (pos === -1) {\n                        tasks.taskArray.unshift(task);\n                    } else {\n                        pos++;\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.meta.completedTaskStartIndex += 1;\n                }\n\n                if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length) {\n                    tasks.meta.completedTaskStartIndex = -1;\n                }\n            }\n        },\n    },\n});\n\nexport const {\n    create,\n    remove,\n    updateTask,\n    updateTaskContent,\n    focusOnTask,\n    resetFocussedTask,\n    resetTaskTimer,\n    toggleIsRunning,\n    tick,\n    toggleIsCompleted,\n    updateOrder,\n    incrementGlobalKey,\n    rearrange,\n} = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n","export function formattedTimeString(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}:${secs}`;\n}\n\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { remove, updateTaskContent, toggleIsCompleted, rearrange, updateTask } from \"../../containers/taskBoard/taskBoardSlice\";\nimport { focusOnTask, resetFocussedTask, toggleIsRunning } from \"../../containers/taskBoard/taskBoardSlice\";\nimport styled from \"styled-components\";\nimport { FaRegLightbulb, FaLightbulb, FaCheckCircle } from \"react-icons/fa\";\nimport { BsTrashFill } from \"react-icons/bs\";\nimport { Flipped } from \"react-flip-toolkit\";\nimport { GrDrag } from \"react-icons/gr\";\nimport { formattedTimeString } from \"../../helpers\";\n\nconst TaskCardContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    width: 476px;\n    height: 120px;\n    margin-top: 25px;\n    /* background-color: #fff4e1; */\n`;\n\nconst TaskCardDragIcon = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    width: 30px;\n    height: 100%;\n    /* background-color: #ff09ac; */\n    svg {\n        cursor: url(\"https://ssl.gstatic.com/ui/v1/icons/mail/images/2/openhand.cur\"), default !important;\n        font-size: 2em;\n        opacity: 0.6;\n    }\n`;\n\nconst TaskCardDiv = styled.div`\n    display: flex;\n    justify-content: space-around;\n    flex-direction: row;\n    height: 100%;\n    width: 420px;\n    border-radius: 5px;\n    -webkit-box-shadow: ${(props) => (props.isFocussed ? \"0 0 6px rgb(255, 216, 0, 0.6)\" : \"0 0 4px rgb(0, 0, 0, 0.2)\")};\n    box-shadow: ${(props) => (props.isFocussed ? \"0 0 6px rgb(255, 216, 0, 0.6)\" : \"0 0 4px rgb(0, 0, 0, 0.2)\")};\n    border: ${(props) => (props.isFocussed ? \"2px solid #ffd800\" : \"none\")};\n`;\n\nconst TaskDetailsDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    height: 100%;\n    width: 75%;\n    margin: 0 0 0 10px;\n    /* background-color: #fff1fc; */\n`;\n\nconst TaskContentDiv = styled.div`\n    display: flex;\n    align-items: center;\n    height: 65%;\n    margin: 0 0 0 5px;\n    word-wrap: break-word;\n    /* background-color: #fffcec; */\n    h3:hover {\n        cursor: text;\n    }\n`;\n\nconst TaskEditInput = styled.textarea`\n    resize: none;\n    height: 90%;\n    width: 100%;\n    font-size: 1.17em;\n    font-weight: bold;\n    overflow: hidden;\n    vertical-align: center;\n    &:focus {\n        outline: none;\n        border: 2px #7e8d9f dashed;\n        border-radius: 5px;\n    }\n`;\n\nconst TaskStatusDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    width: 15%;\n    /* background-color: #f8f8ff; */\n    position: relative;\n    p {\n        margin: 5px;\n        font-size: 0.8em;\n    }\n    svg {\n        font-size: 2.5em;\n        color: ${(p) => (p.isCompleted ? \"#00a86b\" : p.isFocussed ? \"#ffd800\" : \"#000\")};\n    }\n`;\n\nconst TaskActionButton = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 80%;\n    border-radius: 5px;\n    margin: 5px;\n    cursor: pointer;\n    &:hover {\n        background-color: #c0c0c0;\n    }\n    p {\n        margin: 5px;\n        font-size: 0.7em;\n    }\n`;\n\nconst TaskDeleteButton = styled.div`\n    height: 80%;\n    cursor: pointer;\n    margin-left: auto;\n    color: #d0d0d0;\n    &:hover {\n        color: #e44d2e;\n    }\n`;\n\nconst TaskControllerDiv = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    height: 25%;\n    /* background-color: #fffa91; */\n    svg {\n        font-size: 20px;\n        margin: 5px;\n    }\n`;\n\nfunction previewTask(str) {\n    if (str.length <= 70) return str;\n    else return str.substring(0, 70) + \"...\";\n}\n\nexport default function TaskCard({ task, taskIndex, forwardRBDProvided, isFocussed }) {\n    const dispatch = useDispatch();\n\n    const [taskUnderEdit, setTaskUnderEdit] = useState(false);\n    const [updatedTaskContent, setUpdatedTaskContent] = useState(task.content);\n    const [showDragIcon, setShowDragIcon] = useState(false);\n\n    function submitUpdatedTaskContent(e) {\n        if (e.key === \"Enter\" && updatedTaskContent.trim().length >= 3) {\n            let temp = updatedTaskContent.trim().split(\" \");\n            let time = 0;\n            if (temp.length !== 1 && !isNaN(parseInt(temp[temp.length - 1]))) {\n                time = parseInt(temp.pop());\n            }\n            temp = temp.join(\" \");\n            // manage to update time also\n            dispatch(updateTaskContent({ id: task.id, updatedTaskContent }));\n            setTaskUnderEdit(false);\n        }\n    }\n\n    return (\n        <Flipped flipId={`${task.id}`}>\n            <TaskCardContainer\n                ref={forwardRBDProvided.innerRef}\n                {...forwardRBDProvided.draggableProps}\n                {...forwardRBDProvided.dragHandleProps}\n                onMouseEnter={() => setShowDragIcon(!task.isCompleted && true)}\n                onMouseLeave={() => setShowDragIcon(!task.isCompleted && false)}\n            >\n                <TaskCardDragIcon>{showDragIcon && <GrDrag />}</TaskCardDragIcon>\n\n                <TaskCardDiv isFocussed={isFocussed}>\n                    <TaskStatusDiv isFocussed={isFocussed} isCompleted={task.isCompleted}>\n                        {task.isCompleted ? <FaCheckCircle /> : isFocussed ? <FaLightbulb /> : <FaRegLightbulb />}\n                        {!task.isCompleted && <p>{formattedTimeString(task.remainingTime)}</p>}\n                    </TaskStatusDiv>\n\n                    <TaskDetailsDiv>\n                        <TaskContentDiv>\n                            {taskUnderEdit ? (\n                                <TaskEditInput\n                                    autoFocus\n                                    value={updatedTaskContent}\n                                    onBlur={() => {\n                                        dispatch(updateTaskContent({ id: task.id, updatedTaskContent }));\n                                        setTaskUnderEdit(false);\n                                    }}\n                                    onKeyDown={submitUpdatedTaskContent}\n                                    onChange={(e) => setUpdatedTaskContent(e.target.value)}\n                                />\n                            ) : (\n                                <h3 style={{ minWidth: 0 }} onDoubleClick={() => setTaskUnderEdit(true)}>\n                                    {previewTask(task.content)}\n                                </h3>\n                            )}\n                        </TaskContentDiv>\n\n                        <TaskControllerDiv>\n                            {!task.isCompleted && (\n                                <TaskActionButton\n                                    onClick={\n                                        isFocussed\n                                            ? () => {\n                                                  if (task.isRunning) dispatch(toggleIsRunning(taskIndex));\n                                                  dispatch(resetFocussedTask());\n                                              }\n                                            : () => {\n                                                  dispatch(focusOnTask(taskIndex));\n                                              }\n                                    }\n                                >\n                                    <p>{isFocussed ? \"Unfocus\" : \"Focus\"}</p>\n                                </TaskActionButton>\n                            )}\n\n                            <TaskActionButton\n                                onClick={\n                                    task.isCompleted\n                                        ? (e) => {\n                                              dispatch(toggleIsCompleted(task.id));\n                                              dispatch(rearrange({ id: task.id, markedAsComplete: false }));\n                                              e.stopPropagation();\n                                          }\n                                        : (e) => {\n                                              if (task.isRunning)dispatch(toggleIsRunning(taskIndex));\n                                              if (isFocussed) dispatch(resetFocussedTask());\n                                              dispatch(toggleIsCompleted(task.id));\n                                              dispatch(rearrange({ id: task.id, markedAsComplete: true }));\n                                              e.stopPropagation();\n                                          }\n                                }\n                            >\n                                <p>{task.isCompleted ? \"Undone\" : \"Done\"}</p>\n                            </TaskActionButton>\n\n                            {!isFocussed && (\n                                <TaskDeleteButton\n                                    onClick={(e) => {\n                                        dispatch(remove(task.id));\n                                        e.stopPropagation();\n                                        if (isFocussed) {\n                                            dispatch(resetFocussedTask());\n                                        }\n                                    }}\n                                >\n                                    <BsTrashFill />\n                                </TaskDeleteButton>\n                            )}\n                        </TaskControllerDiv>\n                    </TaskDetailsDiv>\n                </TaskCardDiv>\n            </TaskCardContainer>\n        </Flipped>\n    );\n}\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { create, incrementGlobalKey } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport styled from \"styled-components\";\nimport { MdAddCircle } from \"react-icons/md\";\nimport { ImClock2 } from \"react-icons/im\";\n\nconst TaskInputContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin: 20px;\n    width: 476px;\n    border-bottom: 5px solid black;\n    height: 50px;\n`;\n\nconst TaskContentInputDiv = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    height: 80%;\n    width: 70%;\n    margin-left:10px;\n    svg {\n        font-size: 1.3em;\n    }\n`;\n\nconst TaskContentInputField = styled.input`\n    height: 100%;\n    width: 90%;\n    font-size: 1em;\n    font-weight: bold;\n    border: 0;\n    outline: none;\n`;\n\nconst TaskTimeInputDiv = styled.div`\n    display: flex;\n    align-items: center;\n    height: 80%;\n    width: 25%;\n    span {\n        font-size: 0.8em;\n        font-weight:bold;\n        color:rgb(118,118,118);\n    }\n`;\n\nconst TaskTimeInputField = styled.input`\n    height: 100%;\n    width: 35%;\n    font-size: 1em;\n    font-weight: bold;\n    text-align:center;\n    border: 0;\n    outline: none;\n    &::-webkit-inner-spin-button,\n    &::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        appearance: none;\n        margin: 0;\n    }\n`;\n\nexport default function TaskInput() {\n    const [task, setTask] = useState(\"\");\n    const [time, setTime] = useState(20);\n    let taskContentInputRef, taskTimeInputRef;\n    const meta = useSelector((state) => state.tasks.meta);\n    const dispatch = useDispatch();\n\n    function submitTask(e) {\n        if (e.key === \"Enter\" && task.trim().length >= 1) {\n            let temp = task.trim().split(\" \");\n            // add a max time limit\n            let taskTime = time;\n            if (temp.length !== 1 && !isNaN(parseInt(temp[temp.length - 1]))) {\n                taskTime = parseInt(temp.pop());\n            }\n            temp = temp.join(\" \");\n\n            let newTask = {\n                id: Math.floor(Math.random() * 10000),\n                globalKey: meta.globalKey,\n                content: temp,\n                time: taskTime * 60,\n                remainingTime: taskTime * 60,\n                isRunning: false,\n                isCompleted: false,\n                createdAt: new Date().toISOString(),\n            };\n            dispatch(create(newTask));\n            dispatch(incrementGlobalKey());\n            setTask(\"\");\n            setTime(20);\n            taskContentInputRef.value = \"\";\n            taskTimeInputRef.value = \"\";\n            taskContentInputRef.focus();\n        }\n    }\n\n    return (\n        <TaskInputContainer>\n            <TaskContentInputDiv>\n                <MdAddCircle />\n                <TaskContentInputField\n                    type=\"text\"\n                    placeholder=\"i have to focus on ...\"\n                    ref={(el) => (taskContentInputRef = el)}\n                    onChange={(e) => setTask(e.target.value)}\n                    onKeyDown={submitTask}\n                />\n            </TaskContentInputDiv>\n            <TaskTimeInputDiv>\n                <ImClock2 />\n                <TaskTimeInputField\n                    type=\"number\"\n                    placeholder=\"20\"\n                    ref={(el) => (taskTimeInputRef = el)}\n                    onChange={(e) => setTime(e.target.value)}\n                    onKeyDown={submitTask}\n                />\n                <span>mins</span>\n            </TaskTimeInputDiv>\n        </TaskInputContainer>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { FaCheckCircle } from \"react-icons/fa\";\nimport { Flipped } from \"react-flip-toolkit\";\n\nconst DoneTasksDivider = styled.div`\n    display: flex;\n`;\nconst DividerLine = styled.div`\n    width: 100%;\n    position: relative;\n    margin: 15px;\n    border-bottom: 5px dashed #c0c0c0;\n`;\n\nconst DividerIcon = styled.div`\n    width: 50px;\n    position: relative;\n    top: 3px;\n    color: #00a86b;\n    svg {\n        font-size: 2em;\n    }\n`;\n\nexport default function Divider() {\n    return (\n        <Flipped flipId={`-1`}>\n            <DoneTasksDivider>\n                <DividerLine />\n                <DividerIcon>\n                    <FaCheckCircle />\n                </DividerIcon>\n                <DividerLine />\n            </DoneTasksDivider>\n        </Flipped>\n    );\n}\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateOrder } from \"./taskBoardSlice\";\nimport TaskCard from \"./../../components/TaskBoard/TaskCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Flipper } from \"react-flip-toolkit\";\nimport {focusOnTask} from \"./taskBoardSlice\";\nimport styled from \"styled-components\";\nimport TaskInput from \"./../../components/TaskBoard/TaskInput\";\nimport Divider from \"./../../components/TaskBoard/Divider\";\nimport { BsSubtract } from \"react-icons/bs\";\n\nconst TaskBoardContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    flex: 3 1 0;\n`;\n\nexport function TaskBoard() {\n    const tasks = useSelector((state) => state.tasks.taskArray);\n    const meta = useSelector((state) => state.tasks.meta);\n    let focussedTask = null;\n    if(meta.focussedTaskIndex !== -1){\n        focussedTask=tasks[meta.focussedTaskIndex];\n    }\n    // const focussedTask = useSelector((state) => state.focusBoard.focussedTask);\n    const dispatch = useDispatch();\n\n    function handleOnDragEnd(result) {\n        if (!result.destination) return;\n\n        let items = [...tasks.map((i) => ({ ...i }))];\n        const [reorderedItem] = items.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorderedItem);\n\n        let i = result.source.index;\n        let direction = result.destination.index > result.source.index; // direction true means moving right & swapping\n        // below is logic to reset globalKeys to maintain correct sort order.\n        while (i != result.destination.index) {\n            if (direction) {\n                items[i].globalKey = tasks[i].globalKey;\n                i++;\n            } else {\n                items[i].globalKey = tasks[i].globalKey;\n                i--;\n            }\n            if (i == result.destination.index) {\n                items[i].globalKey = tasks[i].globalKey;\n            }\n        }\n\n        let greaterIndex=Math.max(result.destination.index,result.source.index);\n        let smallerIndex=Math.min(result.destination.index,result.source.index);\n        \n        if(result.source.index===meta.focussedTaskIndex){\n            dispatch(focusOnTask(result.destination.index));\n        }else if(meta.focussedTaskIndex>=smallerIndex && meta.focussedTaskIndex<=greaterIndex){\n            if(result.destination.index > result.source.index){\n                dispatch(focusOnTask(meta.focussedTaskIndex-1)); // -1\n            }else{\n                dispatch(focusOnTask(meta.focussedTaskIndex+1)); // +1\n            }\n        }\n        \n        dispatch(updateOrder(items));\n    }\n\n    function getFlipKey() {\n        let flipKey = \"\";\n        tasks.forEach((i) => {\n            flipKey += `${i.globalKey}`;\n        });\n        flipKey += `${meta.completedTaskStartIndex}`;\n        return flipKey;\n    }\n\n    function isFocussed(id) {\n        if (focussedTask !== null && focussedTask.id === id) return true;\n        return false;\n    }\n\n    // input has both onChange and onKeyDown - can be optimised by using one and combining\n\n    return (\n        <TaskBoardContainer>\n            <TaskInput />\n\n            <Flipper flipKey={getFlipKey()}>\n                <DragDropContext onDragEnd={handleOnDragEnd}>\n                    <Droppable droppableId=\"dropArea\">\n                        {(provided) => (\n                            <div {...provided.droppableProps} ref={provided.innerRef}>\n                                {tasks.map((i, index) =>\n                                    !i.isCompleted ? (\n                                        <Draggable isDragDisabled={i.isCompleted} key={i.id} draggableId={`${i.id}`} index={index}>\n                                            {(provided2) => <TaskCard taskIndex = {index} forwardRBDProvided={provided2} task={i} isFocussed={isFocussed(i.id)} />}\n                                        </Draggable>\n                                    ) : (\n                                        \"\"\n                                    )\n                                )}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n\n                {meta.completedTaskStartIndex !== -1 && meta.completedTaskStartIndex !== 0 && <Divider />}\n\n                {tasks.map((i, index) =>\n                    i.isCompleted ? <TaskCard taskIndex = {index} key={i.id} forwardRBDProvided={{ innerRef: null }} task={i} isFocussed={isFocussed(i.id)} /> : \"\"\n                )}\n            </Flipper>\n        </TaskBoardContainer>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/ding.86b39a2c.mp3\";","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { toggleIsRunning, resetTaskTimer, tick , updateTask } from \"./../taskBoard/taskBoardSlice\";\nimport useTimer from \"../../hooks/useTimer\";\nimport { formattedTimeString } from \"../../helpers\";\nimport { CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { BsFillPlayFill, BsFillPauseFill } from \"react-icons/bs\";\nimport { ImLoop2 } from \"react-icons/im\";\nimport dingSound from \"./../../sounds/ding.mp3\";\n\nlet dingSoundElement = new Audio(dingSound);\n\nconst FocusBoardContainer = styled.div`\n    flex: 2 1 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    box-shadow: 0 4px 4px rgba(0, 0, 0, 0.2);\n    /* background-color: #f8f8ff; */\n`;\n\nconst FocussedTaskDiv = styled.div`\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    justify-content: space-around;\n    width: 400px;\n    height: 400px;\n    margin: 20px;\n    box-shadow: 0 0 6px rgba(0, 0, 2, 0.3);\n    /* background-color: #fffccc; */\n`;\n\nconst FocussedTaskTimer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 90%;\n    height: 40%;\n    /* background-color: #ffeaca; */\n`;\n\nconst TimerDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 100px;\n    height: 100px;\n    /* background-color: #ff1c1c; */\n    box-shadow: 0 0 6px rgba(0, 0, 0, 0.4);\n    border-radius: 50%;\n`;\n\nconst ButtonContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 40px;\n    height: 40px;\n    /* background-color: #ffaa1c; */\n    box-shadow: 0 0 2px rgba(0, 0, 0, 0.4);\n    border-radius: 50%;\n    margin: 15px;\n`;\n\nconst FocussedTaskContent = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n    width: 90%;\n    height: 30%;\n    word-wrap: break-word;\n    /* background-color: #ffea1c; */\n`;\n\nconst FocussedTaskController = styled.div`\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n    width: 90%;\n    height: 20%;\n    /* background-color: #efaaa1; */\n`;\n\nexport function FocusBoard() {\n    const focussedTaskIndex = useSelector((state) => state.tasks.meta.focussedTaskIndex);\n    let focussedTask = useSelector((state) => state.tasks.taskArray[focussedTaskIndex]);\n    if (focussedTaskIndex === -1) focussedTask = null;\n    const dispatch = useDispatch();\n    const delay = 1000;\n    useTimer(\n        () => {\n            if (focussedTask === null) return;\n            else if (focussedTask.remainingTime > 0) {\n                dispatch(tick(focussedTaskIndex));\n            } else if (focussedTask.remainingTime === 0) {\n                dispatch(toggleIsRunning(focussedTaskIndex));\n                dingSoundElement.play();\n            }\n        },\n        focussedTask !== null && focussedTask.isRunning ? delay : null\n    );\n\n    function updateTaskTimeHandler(task, val) {\n        if (task.isCompleted) return;\n        dispatch(toggleIsRunning(false));\n        // dispatch(updateTaskTime(val));\n        let temp = { ...task };\n        temp.time += val * 60;\n        temp.remainingTime += val * 60;\n        dispatch(updateTask(temp));\n    }\n\n    return (\n        <FocusBoardContainer>\n            {focussedTask != null && (\n                <div>\n                    <FocussedTaskDiv>\n                        <FocussedTaskTimer>\n                            <ButtonContainer onClick={() => updateTaskTimeHandler(focussedTask, -5)}>\n                                <h4>-5</h4>\n                            </ButtonContainer>\n                            <div style={{ width: 140, height: 140 }}>\n                                <CircularProgressbarWithChildren\n                                    value={Math.floor((focussedTask.remainingTime / focussedTask.time) * 100)}\n                                    styles={buildStyles({\n                                        strokeLinecap: \"butt\",\n                                        pathColor: \"black\",\n                                        trailColor: \"white\",\n                                    })}\n                                >\n                                    <TimerDiv>\n                                        <h3>{formattedTimeString(focussedTask.remainingTime)}</h3>\n                                    </TimerDiv>\n                                </CircularProgressbarWithChildren>\n                            </div>\n                            <ButtonContainer onClick={() => updateTaskTimeHandler(focussedTask, 5)}>\n                                <h4>+5</h4>\n                            </ButtonContainer>\n                        </FocussedTaskTimer>\n                        <FocussedTaskContent>\n                            <h4 style={{ minWidth: 0 }}>{focussedTask.content}</h4>\n                        </FocussedTaskContent>\n                        <FocussedTaskController>\n                            <ButtonContainer onClick={() => dispatch(toggleIsRunning(focussedTaskIndex))} style={{ fontSize: \"1.5em\" }}>\n                                {focussedTask.isRunning ? <BsFillPauseFill /> : <BsFillPlayFill />}\n                            </ButtonContainer>\n                            <ButtonContainer onClick={() => dispatch(resetTaskTimer(focussedTaskIndex))}>\n                                <ImLoop2 />\n                            </ButtonContainer>\n                        </FocussedTaskController>\n                    </FocussedTaskDiv>\n                </div>\n            )}\n        </FocusBoardContainer>\n    );\n}\n","import { useEffect, useRef } from \"react\";\n\nexport default function useTimer(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n","import React from \"react\";\r\nimport { TaskBoard } from \"./taskBoard/TaskBoard\";\r\nimport { FocusBoard } from \"./focusBoard/FocusBoard\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    height:100%;\r\n`;\r\n\r\nfunction App() {\r\n    return (\r\n        <Container>\r\n            <FocusBoard/>\r\n            <TaskBoard />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const focusBoardSlice = createSlice({\n    name: \"focusBoard\",\n    initialState: {\n        focussedTask: null,\n    },\n    reducers: {\n        // focusOnTask: (focusBoard, { payload }) => {\n        //     focusBoard.focussedTask = payload;\n        // },\n        // resetFocussedTask: (focusBoard) => {\n        //     focusBoard.focussedTask = null;\n        // },\n        // tick: (focusBoard) => {\n        //     --focusBoard.focussedTask.remainingTime;\n        // },\n        // toggleIsRunning: (focusBoard, { payload }) => {\n        //     if (payload !== undefined) focusBoard.focussedTask.isRunning = payload;\n        //     else focusBoard.focussedTask.isRunning = !focusBoard.focussedTask.isRunning;\n        // },\n        // resetTask: (focusBoard) => {\n        //     focusBoard.focussedTask.isRunning = false;\n        //     focusBoard.focussedTask.remainingTime = focusBoard.focussedTask.time;\n        // },\n        updateTaskTime: (focusBoard, { payload }) => {\n            focusBoard.focussedTask.time += payload * 60;\n            focusBoard.focussedTask.remainingTime += payload * 60;\n        },\n    },\n});\n\n// export const { focusOnTask, resetFocussedTask, tick, resetTask, toggleIsRunning, updateTaskTime } = focusBoardSlice.actions;\n\nexport default focusBoardSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"../containers/taskBoard/taskBoardSlice\";\r\nimport focusBoardReducer from \"../containers/focusBoard/focusBoardSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n        focusBoard:focusBoardReducer\r\n    },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}