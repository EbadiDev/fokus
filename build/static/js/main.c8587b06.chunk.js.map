{"version":3,"sources":["containers/taskBoard/taskBoardSlice.js","containers/focusBoard/focusBoardSlice.js","containers/taskBoard/TaskCard.js","hooks/useTimer.js","containers/taskBoard/index.js","containers/focusBoard/index.js","containers/App.js","store/index.js","serviceWorker.js","index.js"],"names":["tasksSlice","createSlice","name","initialState","taskArray","meta","globalKey","completedTaskStartIndex","reducers","create","tasks","payload","unshift","remove","filter","i","id","isCompleted","update","forEach","content","updatedTask","updateOrder","tick","remainingTime","reset","time","isRunning","toggleIsRunning","toggleIsCompleted","incrementGlobalKey","rearrange","markedAsComplete","length","found","temp","task","idx","pos","push","splice","actions","focusBoardSlice","focussedTask","focusOnTask","state","formattedTimeString","x","seconds","minutes","Math","floor","TaskCardContainer","styled","div","TaskCardDragIcon","TaskCardDiv","props","isFocussed","TaskDetailsDiv","TaskContentDiv","TaskEditInput","textarea","TaskTimerDiv","TaskTimeDiv","TaskTimeButton","TaskDoneButton","TaskDeleteButton","TaskControllerDiv","TaskCard","forwardRBDProvided","dispatch","useDispatch","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useTimer","str","useState","taskUnderEdit","setTaskUnderEdit","setUpdatedTask","showDragIcon","setShowDragIcon","useSelector","focusBoard","flipId","ref","innerRef","draggableProps","dragHandleProps","onMouseEnter","onMouseLeave","onClick","autoFocus","value","onBlur","onKeyDown","e","key","trim","split","isNaN","parseInt","pop","join","onChange","target","substring","round","TaskBoardContainer","TaskInputContainer","TaskInputField","input","TaskBoard","setTask","getFlipKey","flipKey","type","newTask","random","createdAt","Date","toISOString","focus","onDragEnd","result","destination","items","map","source","index","reorderedItem","direction","droppableId","provided","droppableProps","draggableId","provided2","placeholder","FocusBoardContainer","FocusBoard","Container","App","configureStore","reducer","tasksReducer","focusBoardReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8587b06.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        taskArray: [],\n        meta: {\n            globalKey: 0,\n            completedTaskStartIndex: -1,\n        },\n    },\n    reducers: {\n        create: (tasks, { payload }) => {\n            tasks.taskArray.unshift(payload);\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\n        },\n        remove: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.filter((i) => {\n                if (i.id !== payload) return true;\n                else {\n                    if (!i.isCompleted) {\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\n                    }\n                    return false;\n                }\n            });\n        },\n        update: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.content = payload.updatedTask;\n                }\n            });\n        },\n        updateOrder: (tasks, { payload }) => {\n            tasks.taskArray = payload;\n        },\n        tick: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.remainingTime = i.remainingTime - 1;\n                }\n            });\n        },\n        reset: ({taskArray}, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.remainingTime = i.time;\n                    i.isRunning = false;\n                }\n            });\n        },\n        toggleIsRunning: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.isRunning = !i.isRunning;\n                }\n            });\n        },\n        toggleIsCompleted: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.isCompleted = !i.isCompleted;\n                }\n            });\n        },\n        incrementGlobalKey: ({ meta }) => {\n            ++meta.globalKey;\n        },\n        rearrange: (tasks, { payload }) => {\n            let id = payload.id;\n\n            if (payload.markedAsComplete) {\n                if (tasks.meta.completedTaskStartIndex === -1) {\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                    let found = false;\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\n                        if(found){\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }else if(tasks.taskArray[i].id === id){\n                            found=true;\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }\n                    }\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                } else {\n                    let task, idx;\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n                    let pos = -1;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n                    \n                    if (pos === -1) {\n                        tasks.taskArray.push(task);\n                    } else {\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.meta.completedTaskStartIndex -=1;\n                }\n            } else {\n                if (tasks.meta.completedTaskStartIndex == 0) {\n\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.taskArray.unshift(task);\n                    tasks.meta.completedTaskStartIndex = 1;\n                } else {\n\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    let start = tasks.meta.completedTaskStartIndex - 1;\n                    let pos = -1;\n                    for (let i = start; i >= 0; i--) {\n                        if (tasks.taskArray[i].globalKey < task.globalKey ) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    if (pos === -1) {\n                        tasks.taskArray.unshift(task);\n                    } else {\n                        pos++;\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.meta.completedTaskStartIndex += 1;\n\n                }\n\n                if(tasks.meta.completedTaskStartIndex==tasks.taskArray.length){\n                    tasks.meta.completedTaskStartIndex=-1;\n                }\n            }\n        },\n    },\n});\n\nexport const { create, remove, update, reset, toggleIsRunning, tick, toggleIsCompleted, updateOrder, incrementGlobalKey, rearrange } = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const focusBoardSlice = createSlice({\n    name: \"focusBoard\",\n    initialState: {\n        focussedTask:null\n    },\n    reducers: {\n        focusOnTask: (state, { payload }) => {\n           state.focussedTask=payload;\n        },\n    },\n});\n\nexport const { focusOnTask} = focusBoardSlice.actions;\n\nexport default focusBoardSlice.reducer;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { remove, update, tick, reset, toggleIsRunning, toggleIsCompleted, rearrange } from \"./taskBoardSlice\";\nimport { focusOnTask } from \"../focusBoard/focusBoardSlice\";\nimport useTimer from \"../../hooks/useTimer\";\nimport styled from \"styled-components\";\nimport { AiOutlineClockCircle } from \"react-icons/ai\";\nimport { BsCheckCircle } from \"react-icons/bs\";\nimport { FiClock } from \"react-icons/fi\";\nimport { ImLoop2, ImCancelCircle } from \"react-icons/im\";\nimport { Flipped } from \"react-flip-toolkit\";\nimport { GrDrag } from \"react-icons/gr\";\n\nfunction formattedTimeString(x) {\n    let seconds = x % 60;\n    let minutes = Math.floor(x / 60);\n\n    if (seconds == 0) {\n        seconds = `00`;\n    } else if (seconds < 10) {\n        seconds = `0${seconds}`;\n    }\n    if (minutes == 0) {\n        minutes = `00`;\n    } else if (minutes < 10) {\n        minutes = `0${minutes}`;\n    }\n\n    return `${minutes}:${seconds}`;\n}\n\nconst TaskCardContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    width: 576px;\n    height: 140px;\n    margin: 25px;\n    /* background-color: #fff4e1; */\n`;\n\nconst TaskCardDragIcon = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    width: 30px;\n    height: 100%;\n    /* background-color: #ff09ac; */\n    svg {\n        cursor: url(\"https://ssl.gstatic.com/ui/v1/icons/mail/images/2/openhand.cur\"), default !important;\n        font-size: 2em;\n        opacity: 0.6;\n    }\n`;\n\nconst TaskCardDiv = styled.div`\n    display: flex;\n    justify-content: space-around;\n    flex-direction: row;\n    height: 100%;\n    width: 520px;\n    border-radius: 5px;\n    /* box-shadow: 0 4px 4px rgba(0, 0, 0, 0.2); */\n    -webkit-box-shadow: 0 0 6px rgba(0, 0, 0, 0.2) ;\n    box-shadow: 0 0 6px rgba(0, 0, 0, 0.2);\n    border: ${(props)=>props.isFocussed?\"2px solid black\":\"none\"};\n`;\n\nconst TaskDetailsDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    height: 100%;\n    width: 75%;\n    margin: 0 0 0 10px;\n    /* background-color: #fff1fc; */\n`;\n\nconst TaskContentDiv = styled.div`\n    display: flex;\n    align-items: center;\n    height: 65%;\n    margin: 0 0 0 5px;\n    border-bottom:1px solid rgba(0, 0, 0, 0.1);\n    /* background-color: #fffcec; */\n    h3:hover {\n        cursor: text;\n    }\n`;\n\nconst TaskEditInput = styled.textarea`\n    resize: none;\n    height: 90%;\n    width: 100%;\n    font-size: 1.17em;\n    font-weight: bold;\n    overflow: hidden;\n    vertical-align:center;\n    &:focus {\n        outline:none;\n        border: 2px black dashed;\n        border-radius:5px;\n    }\n`;\n\nconst TaskTimerDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 80%;\n    width: 15%;\n    /* background-color: #f8f8ff; */\n    position: relative;\n    p {\n        margin: 5px;\n        font-size: 1em;\n    }\n    svg {\n        font-size: 2.5em;\n        margin-top: 25px;\n    }\n`;\nconst TaskTimeDiv = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    height: 80%;\n    width: 110px;\n`;\nconst TaskTimeButton = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    width: 70px;\n    border-radius: 5px;\n    border: 1px solid black;\n    margin: 5px;\n    background-color: #fff;\n    color: #000;\n    p {\n        margin: 0;\n        font-size: 0.7em;\n    }\n`;\n\nconst TaskDoneButton = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 80%;\n    width: 70px;\n    border-radius: 5px;\n    border: 1px solid black;\n    margin: 5px;\n    cursor: pointer;\n    background-color: ${(props) => (props.isCompleted ? \"#000\" : \"#fff\")};\n    color: ${(props) => (props.isCompleted ? \"#fff\" : \"#000\")};\n    p {\n        margin: 0;\n        font-size: 0.7em;\n    }\n`;\n\nconst TaskDeleteButton = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    height: 80%;\n    width: 80px;\n    border-radius: 5px;\n    border: 1px solid black;\n    margin: 5px;\n    cursor: pointer;\n    background-color: #fff;\n    margin-left: auto;\n    color: #000;\n    p {\n        margin: 0;\n        font-size: 0.7em;\n    }\n    &:hover {\n        background-color: #000;\n        color: #fff;\n    }\n`;\n\nconst TaskControllerDiv = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    height: 25%;\n    /* background-color: #fffa91; */\n    svg {\n        font-size: 20px;\n        margin: 5px;\n    }\n`;\n\nfunction previewTask(str) {\n    if (str.length <= 70) return str;\n    else return str.substring(0, 70) + \"...\";\n}\n\nexport default function TaskCard({ task, forwardRBDProvided }) {\n    const delay = 1000;\n    const dispatch = useDispatch();\n    useTimer(\n        () => {\n            if (task.remainingTime > 0) {\n                dispatch(tick(task.id));\n            } else if (task.remainingTime === 0) {\n                dispatch(toggleIsRunning(task.id));\n            }\n        },\n        task.isRunning ? delay : null\n    );\n\n    const [taskUnderEdit, setTaskUnderEdit] = useState(false);\n    const [updatedTask, setUpdatedTask] = useState(task.content);\n    const [showDragIcon, setShowDragIcon] = useState(false);\n\n    const focussedTask = useSelector((state)=> state.focusBoard.focussedTask);\n\n    function submitUpdatedTask(e) {\n        if (e.key === \"Enter\" && updatedTask.trim().length >= 3) {\n            let temp = updatedTask.trim().split(\" \");\n            let time = 0;\n            if (temp.length !== 1 && !isNaN(parseInt(temp[temp.length - 1]))) {\n                time = parseInt(temp.pop());\n            }\n            temp = temp.join(\" \");\n            // manage to update time also\n            dispatch(update({ id: task.id, updatedTask }));\n            setTaskUnderEdit(false);\n        }\n    }\n\n    function isFocussed(id){\n        if(focussedTask!==null && focussedTask.id===id) return true;\n        return false;\n    }\n\n\n    return (\n        <Flipped flipId={`${task.id}`}>\n            <TaskCardContainer\n                ref={forwardRBDProvided.innerRef}\n                {...forwardRBDProvided.draggableProps}\n                {...forwardRBDProvided.dragHandleProps}\n                onMouseEnter={() => setShowDragIcon(true)}\n                onMouseLeave={() => setShowDragIcon(false)}\n            >\n                <TaskCardDragIcon>{showDragIcon && <GrDrag />}</TaskCardDragIcon>\n\n                <TaskCardDiv onClick={() => dispatch(focusOnTask(task))} isFocussed={isFocussed(task.id)}>\n                    <TaskTimerDiv>\n                        <FiClock onClick={() => dispatch(toggleIsRunning(task.id))} />\n                        <p>{formattedTimeString(task.remainingTime)}</p>\n                    </TaskTimerDiv>\n\n                    <TaskDetailsDiv>\n                        <TaskContentDiv>\n                            {taskUnderEdit ? (\n                                <TaskEditInput\n                                    autoFocus\n                                    value={updatedTask}\n                                    onBlur={() => {\n                                        dispatch(update({ id: task.id, updatedTask }));\n                                        setTaskUnderEdit(false);\n                                    }}\n                                    onKeyDown={submitUpdatedTask}\n                                    onChange={(e) => setUpdatedTask(e.target.value)}\n                                />\n                            ) : (\n                                <h3 onClick={() => setTaskUnderEdit(true)}>{previewTask(task.content)}</h3>\n                            )}\n                        </TaskContentDiv>\n\n                        <TaskControllerDiv>\n                            <TaskDoneButton\n                                isCompleted={task.isCompleted}\n                                onClick={\n                                    task.isCompleted\n                                        ? () => {\n                                              dispatch(toggleIsCompleted(task.id));\n                                              dispatch(rearrange({ id: task.id, markedAsComplete: false }));\n                                          }\n                                        : () => {\n                                              dispatch(toggleIsCompleted(task.id));\n                                              dispatch(rearrange({ id: task.id, markedAsComplete: true }));\n                                          }\n                                }\n                            >\n                                <BsCheckCircle />\n                                <p>Done</p>\n                            </TaskDoneButton>\n                            <TaskTimeDiv>\n                                <TaskTimeButton>\n                                    <AiOutlineClockCircle />\n                                    <p>{Math.round(task.time / 60) + \"m\"}</p>\n                                </TaskTimeButton>\n                                <ImLoop2 onClick={() => dispatch(reset(task.id))} />\n                            </TaskTimeDiv>\n\n                            <TaskDeleteButton onClick={() => dispatch(remove(task.id))}>\n                                <ImCancelCircle />\n                                <p>Delete</p>\n                            </TaskDeleteButton>\n                        </TaskControllerDiv>\n                    </TaskDetailsDiv>\n                </TaskCardDiv>\n            </TaskCardContainer>\n        </Flipped>\n    );\n}\n","import { useEffect, useRef } from \"react\";\n\nexport default function useTimer(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { create, updateOrder, incrementGlobalKey } from \"./taskBoardSlice\";\nimport TaskCard from \"./TaskCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Flipper } from \"react-flip-toolkit\";\nimport styled from \"styled-components\";\n\nconst TaskBoardContainer = styled.div`\n    display: flex;\n    flex-direction:column;\n    align-items: center;\n    flex: 3 1 0;\n`;\n\nconst TaskInputContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: 20px;\n    width: 576px;\n    background-color: #f8f8ff;\n    border-radius: 5px;\n    height: 75px;\n`;\n\nconst TaskInputField = styled.input`\n    height: 70%;\n    width: 90%;\n    font-size: 1em;\n    font-weight: bold;\n    border: 0;\n    outline: none;\n    background-color: #f8f8ff;\n`;\n\nexport function TaskBoard() {\n    const tasks = useSelector((state) => state.tasks.taskArray);\n    const meta = useSelector((state) => state.tasks.meta);\n    const dispatch = useDispatch();\n\n    const [task, setTask] = useState(\"\");\n\n    function submitTask(e) {\n        if (e.key === \"Enter\" && task.trim().length >= 3) {\n            let temp = task.trim().split(\" \");\n            let time = 0;\n            if (temp.length !== 1 && !isNaN(parseInt(temp[temp.length - 1]))) {\n                time = parseInt(temp.pop());\n            } else {\n                time = 20;\n            }\n            temp = temp.join(\" \");\n\n            let newTask = {\n                id: Math.floor(Math.random() * 10000),\n                globalKey: meta.globalKey,\n                content: temp,\n                time: time * 60,\n                remainingTime: time * 60,\n                isRunning: false,\n                isCompleted: false,\n                createdAt: new Date().toISOString(),\n            };\n            dispatch(create(newTask));\n            dispatch(incrementGlobalKey());\n            setTask(\"\");\n            e.target.value = \"\";\n            e.target.focus();\n        }\n    }\n\n    function handleOnDragEnd(result) {\n        if (!result.destination) return;\n\n        let items = [...tasks.map((i) => ({ ...i }))];\n        //let items = [...tasks]\n        // let x = JSON.stringify(items);\n        // items = JSON.parse(x);\n\n        const [reorderedItem] = items.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorderedItem);\n\n        let i = result.source.index;\n        let direction = result.destination.index > result.source.index; // direction true means moving right & swapping\n        while (i != result.destination.index) {\n            if (direction) {\n                items[i].globalKey = tasks[i].globalKey;\n                i++;\n            } else {\n                items[i].globalKey = tasks[i].globalKey;\n                i--;\n            }\n            if (i == result.destination.index) {\n                items[i].globalKey = tasks[i].globalKey;\n            }\n        }\n\n        dispatch(updateOrder(items));\n    }\n\n    function getFlipKey() {\n        let flipKey = \"\";\n        tasks.forEach((i) => {\n            flipKey += `${i.globalKey}`;\n        });\n        return flipKey;\n    }\n\n    // input has both onChange and onKeyDown - can be optimised by using one and combining\n\n    return (\n        <TaskBoardContainer>\n            <TaskInputContainer>\n                <TaskInputField type=\"text\" onChange={(e) => setTask(e.target.value)} onKeyDown={submitTask} />\n            </TaskInputContainer>\n            <DragDropContext onDragEnd={handleOnDragEnd}>\n                <Droppable droppableId=\"dropArea\">\n                    {(provided) => (\n                        <div {...provided.droppableProps} ref={provided.innerRef}>\n                            <Flipper flipKey={getFlipKey()}>\n                                {tasks.map((i, index) => (\n                                    <Draggable key={i.id} draggableId={`${i.id}`} index={index}>\n                                        {(provided2) => <TaskCard forwardRBDProvided={provided2} task={i} />}\n                                    </Draggable>\n                                ))}\n                                {provided.placeholder}\n                            </Flipper>\n                        </div>\n                    )}\n                </Droppable>\n            </DragDropContext>\n        </TaskBoardContainer>\n    );\n}\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\n\nconst FocusBoardContainer = styled.div`\n    flex: 2 1 0;\n    box-shadow: 0 4px 4px rgba(0, 0, 0, 0.2);\n    background-color: #f8f8ff;\n`;\n\nexport function FocusBoard() {\n    const focusBoard = useSelector((state) => state.focusBoard);\n    const dispatch = useDispatch();\n\n    const [isFocusON, setIsFocusON] = useState(false);\n\n    return (\n        <FocusBoardContainer>\n            {focusBoard.focussedTask != null && (\n                <div>\n                    <h1>{focusBoard.focussedTask.content}</h1>\n                    <br />\n                    <h1>{focusBoard.focussedTask.remainingTime}</h1>\n                    <br />\n                    <h1>{focusBoard.focussedTask.globalKey}</h1>\n                    <br />\n                    <input type=\"button\" value=\"PP\"/>\n                    <br />\n                </div>\n            )}\n        </FocusBoardContainer>\n    );\n}\n","import React from \"react\";\r\nimport { TaskBoard } from \"./taskBoard\";\r\nimport { FocusBoard } from \"./focusBoard\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    height:100%;\r\n`;\r\n\r\nfunction App() {\r\n    return (\r\n        <Container>\r\n            <FocusBoard/>\r\n            <TaskBoard />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"../containers/taskBoard/taskBoardSlice\";\r\nimport focusBoardReducer from \"../containers/focusBoard/focusBoardSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n        focusBoard:focusBoardReducer\r\n    },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}