{"version":3,"sources":["containers/taskBoard/taskBoardSlice.js","helpers/index.js","images/bulb.svg","images/glowBulb.svg","images/tickmark.svg","components/TaskBoard/TaskCard.js","components/TaskBoard/TaskInput.js","components/TaskBoard/Divider.js","containers/taskBoard/TaskBoard.js","sounds/ding.mp3","images/tasks.svg","containers/focusBoard/FocusBoard.js","hooks/useTimer.js","containers/App.js","store/index.js","serviceWorker.js","index.js"],"names":["tasksSlice","createSlice","name","initialState","taskArray","meta","globalKey","completedTaskStartIndex","focussedTaskIndex","showCompletedTasks","completedTasksCount","reducers","create","tasks","payload","unshift","remove","filter","i","id","isCompleted","length","updateTask","map","updateTaskContent","forEach","content","updatedTaskContent","updateTaskTime","remainingTime","updatedTime","time","updateTaskTimeByVal","val","updateOrder","focusOnTask","resetFocussedTask","tick","resetTaskTimer","isRunning","toggleIsRunning","toggleShowCompletedTasks","toggleIsCompleted","clearCompletedTasks","incrementGlobalKey","rearrange","markedAsComplete","found","temp","task","idx","pos","push","splice","actions","formattedTimeString","x","secs","mins","Math","floor","formattedTimeStringv2","TaskCardContainer","styled","div","TaskCardDragIcon","TaskCardDiv","p","isFocussed","TaskDetailsDiv","TaskContentDiv","TaskEditInput","textarea","TimeEditInput","input","TaskStatusDiv","TaskActionButton","TaskDeleteButton","TaskControllerDiv","TaskCard","str","taskIndex","forwardRBDProvided","dispatch","useDispatch","useState","taskUnderEdit","setTaskUnderEdit","setUpdatedTaskContent","timeUnderEdit","setTimeUnderEdit","setUpdatedTime","showDragIcon","setShowDragIcon","flipId","ref","innerRef","draggableProps","dragHandleProps","onMouseEnter","onMouseLeave","src","tickmark","alt","glowBulb","bulb","autoFocus","value","onBlur","onKeyDown","e","key","onChange","target","onDoubleClick","trim","split","substring","isDoneBtn","onClick","stopPropagation","TaskInputContainer","TaskContentInputDiv","TaskContentInputField","TaskTimeInputDiv","TaskTimeInputField","TaskInput","taskContentInputRef","taskTimeInputRef","setTask","setTime","useSelector","state","submitTask","taskTime","isNaN","parseInt","pop","join","newTask","random","createdAt","Date","toISOString","focus","type","placeholder","el","DoneTasksDivider","DividerLine","DividerIcon","DividerActionDiv","Divider","showActionBtn","setShowActionBtn","s","TaskBoardContainer","TaskBoard","focussedTask","flipKey","getFlipKey","onDragEnd","result","destination","items","source","index","reorderedItem","direction","greaterIndex","max","smallerIndex","min","droppableId","provided","droppableProps","isDragDisabled","draggableId","provided2","dingSoundElement","Audio","dingSound","FocusBoardContainer","FocussedTaskContainer","FocussedTaskDiv","FocussedTaskTimer","CountdownTimerDiv","PlayButtonDiv","UpdateTimeButtonDiv","ResetButtonDiv","FocussedTaskContent","FocussedTaskController","EmptyFocusBox","FocusBoard","updateTaskTimeHandler","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useTimer","play","style","width","height","styles","buildStyles","strokeLinecap","pathColor","trailColor","strokeWidth","Container","App","configureStore","reducer","tasksReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.708c0643.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        taskArray: [],\n        meta: {\n            globalKey: 0,\n            completedTaskStartIndex: -1,\n            focussedTaskIndex: -1,\n            showCompletedTasks: true,\n            completedTasksCount: 0,\n        },\n    },\n    reducers: {\n        create: (tasks, { payload }) => {\n            tasks.taskArray.unshift(payload);\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\n        },\n        remove: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.filter((i) => {\n                if (i.id !== payload) return true;\n                else {\n                    if (!i.isCompleted) {\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\n                    } else if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length - 1) {\n                        tasks.meta.completedTasksCount--;\n                        tasks.meta.completedTaskStartIndex = -1;\n                    }\n                    return false;\n                }\n            });\n        },\n        updateTask: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.map((i) => (i.id === payload.id ? payload : i));\n        },\n        updateTaskContent: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.content = payload.updatedTaskContent;\n                }\n            });\n        },\n        updateTaskTime: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.remainingTime = payload.updatedTime * 60;\n                    i.time = payload.updatedTime * 60;\n                }\n            });\n        },\n        updateTaskTimeByVal: (tasks, { payload }) => {\n            tasks.taskArray[payload.focussedTaskIndex].remainingTime += payload.val * 60;\n            tasks.taskArray[payload.focussedTaskIndex].time += payload.val * 60;\n            if (tasks.taskArray[payload.focussedTaskIndex].remainingTime < 0) {\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\n            }\n            if (tasks.taskArray[payload.focussedTaskIndex].time < 0) {\n                tasks.taskArray[payload.focussedTaskIndex].time = 0;\n            }\n        },\n        updateOrder: (tasks, { payload }) => {\n            tasks.taskArray = payload;\n        },\n\n        focusOnTask: (tasks, { payload }) => {\n            tasks.meta.focussedTaskIndex = payload;\n        },\n        resetFocussedTask: (tasks) => {\n            tasks.meta.focussedTaskIndex = -1;\n        },\n        tick: (tasks, { payload }) => {\n            --tasks.taskArray[payload].remainingTime;\n        },\n        resetTaskTimer: (tasks, { payload }) => {\n            tasks.taskArray[payload].isRunning = false;\n            tasks.taskArray[payload].remainingTime = tasks.taskArray[payload].time;\n        },\n        toggleIsRunning: (tasks, { payload }) => {\n            tasks.taskArray[payload].isRunning = !tasks.taskArray[payload].isRunning;\n        },\n        toggleShowCompletedTasks: (tasks) => {\n            tasks.meta.showCompletedTasks = !tasks.meta.showCompletedTasks;\n        },\n        toggleIsCompleted: (tasks, { payload }) => {\n            tasks.taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    i.isCompleted ? --tasks.meta.completedTasksCount : ++tasks.meta.completedTasksCount;\n                    i.isCompleted = !i.isCompleted;\n                }\n            });\n        },\n        clearCompletedTasks: (tasks) => {\n            if (tasks.meta.completedTaskStartIndex !== -1) {\n                tasks.taskArray.length = tasks.meta.completedTaskStartIndex;\n                tasks.meta.completedTaskStartIndex = -1;\n                tasks.meta.completedTasksCount=0;\n            }\n        },\n        incrementGlobalKey: ({ meta }) => {\n            ++meta.globalKey;\n        },\n        rearrange: (tasks, { payload }) => {\n            let id = payload.id;\n\n            if (payload.markedAsComplete) {\n                if (tasks.meta.completedTaskStartIndex === -1) {\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                    let found = false;\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\n                        if (found) {\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        } else if (tasks.taskArray[i].id === id) {\n                            found = true;\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }\n                    }\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                } else {\n                    let task, idx;\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n                    let pos = -1;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    if (pos === -1) {\n                        tasks.taskArray.push(task);\n                    } else {\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.meta.completedTaskStartIndex -= 1;\n                }\n            } else {\n                if (tasks.meta.completedTaskStartIndex == 0) {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.taskArray.unshift(task);\n                    tasks.meta.completedTaskStartIndex = 1;\n                } else {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    let start = tasks.meta.completedTaskStartIndex - 1;\n                    let pos = -1;\n                    for (let i = start; i >= 0; i--) {\n                        if (tasks.taskArray[i].globalKey < task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    if (pos === -1) {\n                        tasks.taskArray.unshift(task);\n                    } else {\n                        pos++;\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.meta.completedTaskStartIndex += 1;\n                }\n\n                if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length) {\n                    tasks.meta.completedTaskStartIndex = -1;\n                }\n            }\n        },\n    },\n});\n\nexport const {\n    create,\n    remove,\n    updateTask,\n    updateTaskContent,\n    updateTaskTime,\n    updateTaskTimeByVal,\n    focusOnTask,\n    resetFocussedTask,\n    tick,\n    resetTaskTimer,\n    toggleIsRunning,\n    toggleShowCompletedTasks,\n    toggleIsCompleted,\n    clearCompletedTasks,\n    updateOrder,\n    incrementGlobalKey,\n    rearrange,\n} = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n","export function formattedTimeString(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}:${secs}`;\n}\n\nexport function formattedTimeStringv2(x) {\n    let secs = x % 60;\n    let mins = Math.floor(x / 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}m ${secs}s`;\n}\n\n","export default __webpack_public_path__ + \"static/media/bulb.e094b07b.svg\";","export default __webpack_public_path__ + \"static/media/glowBulb.61c0b2ec.svg\";","export default __webpack_public_path__ + \"static/media/tickmark.f4fc5933.svg\";","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { remove, updateTaskContent, toggleIsCompleted, rearrange, updateTaskTime } from \"../../containers/taskBoard/taskBoardSlice\";\nimport { focusOnTask, resetFocussedTask, toggleIsRunning } from \"../../containers/taskBoard/taskBoardSlice\";\nimport styled from \"styled-components\";\nimport { BsTrash } from \"react-icons/bs\";\nimport { Flipped } from \"react-flip-toolkit\";\nimport { GrDrag } from \"react-icons/gr\";\nimport { formattedTimeString } from \"../../helpers\";\nimport bulb from \"./../../images/bulb.svg\";\nimport glowBulb from \"./../../images/glowBulb.svg\";\nimport tickmark from \"./../../images/tickmark.svg\";\n\nconst TaskCardContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    width: 420px;\n    height: 100px;\n    margin-top: 15px;\n    /* background-color: #fff4e1; */\n`;\n\nconst TaskCardDragIcon = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    width: 25px;\n    height: 100%;\n    /* background-color: #ff09ac; */\n    svg {\n        cursor: url(\"https://ssl.gstatic.com/ui/v1/icons/mail/images/2/openhand.cur\"), default !important;\n        opacity: 0.7;\n    }\n`;\n\nconst TaskCardDiv = styled.div`\n    display: flex;\n    justify-content: space-around;\n    flex-direction: row;\n    height: 100%;\n    width: 376px;\n    border-radius: 10px;\n    background-color: #fff;\n    -webkit-box-shadow: ${(p) => (p.isFocussed ? \"0 1px 8px rgb(248,185,23,0.8)\" : \"0 5px 10px rgba(166,173,201,0.2)\")};\n    box-shadow: ${(p) => (p.isFocussed ? \"0 1px 8px rgb(248,185,23,0.8)\" : \"0 5px 10px rgba(166,173,201,0.2)\")};\n`;\n\nconst TaskDetailsDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    height: 100%;\n    width: 75%;\n    margin: 0 0 0 10px;\n    /* background-color: #fff1fc; */\n`;\n\nconst TaskContentDiv = styled.div`\n    display: flex;\n    align-items: center;\n    height: 65%;\n    margin: 0 0 0 5px;\n    word-wrap: break-word;\n    /* background-color: #fffcec; */\n    p {\n        font-size: 0.9em;\n        font-weight: bold;\n        min-width: 0;\n        &:hover {\n            cursor: text;\n        }\n    }\n`;\n\nconst TaskEditInput = styled.textarea`\n    resize: none;\n    height: 90%;\n    width: 100%;\n    font-size: 0.9em;\n    overflow: hidden;\n    vertical-align: center;\n    font-weight: bold;\n    &:focus {\n        outline: none;\n        border: 2px #0000cd dashed;\n        border-radius: 5px;\n    }\n`;\n\nconst TimeEditInput = styled.input`\n    height: 15px;\n    width: 30px;\n    margin-top: 5px;\n    text-align: center;\n    font-weight: bold;\n    &:focus {\n        outline: none;\n        border: 2px #0000cd dashed;\n        border-radius: 2px;\n    }\n`;\n\nconst TaskStatusDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    width: 15%;\n    /* background-color: #f8f8ff; */\n    position: relative;\n    p {\n        margin: 5px;\n        font-weight: bold;\n        font-size: 0.7em;\n    }\n    img {\n        width: ${(p) => (p.isCompleted ? \"35px\" : \"60px\")};\n    }\n`;\n\nconst TaskActionButton = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 80%;\n    border-radius: 5px;\n    margin: 5px;\n    cursor: pointer;\n    &:hover {\n        background-color: #0000cd;\n        p {\n            color: #fff;\n        }\n    }\n    p {\n        margin: 5px;\n        font-weight: bold;\n        font-size: 0.6em;\n    }\n`;\n\nconst TaskDeleteButton = styled.div`\n    height: 80%;\n    cursor: pointer;\n    margin-left: auto;\n    color: #0000cd;\n    &:hover {\n        color: red;\n    }\n`;\n\nconst TaskControllerDiv = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    height: 25%;\n    /* background-color: #fffa91; */\n    svg {\n        font-size: 0.8em;\n        margin: 5px;\n    }\n`;\n\nfunction previewTask(str) {\n    if (str.length <= 60) return str;\n    else return str.substring(0, 60) + \"...\";\n}\n\nexport default function TaskCard({ task, taskIndex, forwardRBDProvided, isFocussed, focussedTaskIndex }) {\n    const dispatch = useDispatch();\n\n    const [taskUnderEdit, setTaskUnderEdit] = useState(false);\n    const [updatedTaskContent, setUpdatedTaskContent] = useState(task.content);\n    const [timeUnderEdit, setTimeUnderEdit] = useState(false);\n    const [updatedTime, setUpdatedTime] = useState(Math.floor(task.time / 60));\n    const [showDragIcon, setShowDragIcon] = useState(false);\n\n    function submitUpdatedTaskContent(e) {\n        if (e.key === \"Enter\" && updatedTaskContent.trim().length >= 3) {\n            let temp = updatedTaskContent.trim().split(\" \");\n            // let time = 0;\n            // if (temp.length !== 1 && !isNaN(parseInt(temp[temp.length - 1]))) {\n            //     time = parseInt(temp.pop());\n            // }\n            // temp = temp.join(\" \");\n            // wont be managing to update time here also\n            dispatch(updateTaskContent({ id: task.id, updatedTaskContent }));\n            setTaskUnderEdit(false);\n        }\n    }\n    function submitUpdatedTime(e) {\n        if (e.key === \"Enter\") {\n            dispatch(updateTaskTime({ id: task.id, updatedTime }));\n            setTimeUnderEdit(false);\n        }\n    }\n\n    return (\n        <Flipped flipId={`${task.id}`}>\n            <TaskCardContainer\n                ref={forwardRBDProvided.innerRef}\n                {...forwardRBDProvided.draggableProps}\n                {...forwardRBDProvided.dragHandleProps}\n                onMouseEnter={() => setShowDragIcon(!task.isCompleted && true)}\n                onMouseLeave={() => setShowDragIcon(!task.isCompleted && false)}\n            >\n                <TaskCardDragIcon>{showDragIcon && <GrDrag />}</TaskCardDragIcon>\n\n                <TaskCardDiv isFocussed={isFocussed}>\n                    <TaskStatusDiv isFocussed={isFocussed} isCompleted={task.isCompleted}>\n                        {task.isCompleted ? (\n                            <img src={tickmark} alt=\"Done\" />\n                        ) : isFocussed ? (\n                            <img src={glowBulb} alt=\"Focussed\" />\n                        ) : (\n                            <img src={bulb} alt=\"Unfocussed\" />\n                        )}\n                        {!task.isCompleted &&\n                            (timeUnderEdit ? (\n                                <TimeEditInput\n                                    autoFocus\n                                    value={updatedTime}\n                                    onBlur={() => {\n                                        dispatch(updateTaskTime({ id: task.id, updatedTime }));\n                                        setTimeUnderEdit(false);\n                                    }}\n                                    onKeyDown={submitUpdatedTime}\n                                    onChange={(e) => setUpdatedTime(e.target.value)}\n                                />\n                            ) : (\n                                <p onDoubleClick={() => setTimeUnderEdit(true)}>{formattedTimeString(task.remainingTime)}</p>\n                            ))}\n                    </TaskStatusDiv>\n\n                    <TaskDetailsDiv>\n                        <TaskContentDiv>\n                            {taskUnderEdit ? (\n                                <TaskEditInput\n                                    autoFocus\n                                    value={updatedTaskContent}\n                                    onBlur={() => {\n                                        dispatch(updateTaskContent({ id: task.id, updatedTaskContent }));\n                                        setTaskUnderEdit(false);\n                                    }}\n                                    onKeyDown={submitUpdatedTaskContent}\n                                    onChange={(e) => setUpdatedTaskContent(e.target.value)}\n                                />\n                            ) : (\n                                <p onDoubleClick={() => setTaskUnderEdit(true)}>{previewTask(task.content)}</p>\n                            )}\n                        </TaskContentDiv>\n\n                        <TaskControllerDiv>\n                            {!task.isCompleted && (\n                                <TaskActionButton\n                                    isDoneBtn={false}\n                                    onClick={\n                                        isFocussed\n                                            ? () => {\n                                                  if (task.isRunning) dispatch(toggleIsRunning(taskIndex));\n                                                  dispatch(resetFocussedTask());\n                                              }\n                                            : () => {\n                                                  dispatch(focusOnTask(taskIndex));\n                                              }\n                                    }\n                                >\n                                    <p>{isFocussed ? \"Unfocus\" : \"Focus\"}</p>\n                                </TaskActionButton>\n                            )}\n\n                            <TaskActionButton\n                                isDoneBtn={true}\n                                onClick={\n                                    task.isCompleted\n                                        ? (e) => {\n                                              dispatch(toggleIsCompleted(task.id));\n                                              dispatch(rearrange({ id: task.id, markedAsComplete: false }));\n                                              e.stopPropagation();\n                                          }\n                                        : (e) => {\n                                              if (taskIndex < focussedTaskIndex) dispatch(focusOnTask(focussedTaskIndex - 1));\n                                              if (task.isRunning) dispatch(toggleIsRunning(taskIndex));\n                                              if (isFocussed) dispatch(resetFocussedTask());\n                                              dispatch(toggleIsCompleted(task.id));\n                                              dispatch(rearrange({ id: task.id, markedAsComplete: true }));\n                                              e.stopPropagation();\n                                          }\n                                }\n                            >\n                                <p>{task.isCompleted ? \"Undone\" : \"Done\"}</p>\n                            </TaskActionButton>\n\n                            {!isFocussed && (\n                                <TaskDeleteButton\n                                    onClick={(e) => {\n                                        if (taskIndex < focussedTaskIndex) dispatch(focusOnTask(focussedTaskIndex - 1));\n                                        dispatch(remove(task.id));\n                                        e.stopPropagation();\n                                    }}\n                                >\n                                    <BsTrash />\n                                </TaskDeleteButton>\n                            )}\n                        </TaskControllerDiv>\n                    </TaskDetailsDiv>\n                </TaskCardDiv>\n            </TaskCardContainer>\n        </Flipped>\n    );\n}\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { create, incrementGlobalKey, focusOnTask } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport styled from \"styled-components\";\nimport { AiFillPlusCircle, AiFillClockCircle } from \"react-icons/ai\";\n\nconst TaskInputContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin: 20px;\n    width: 420px;\n    border-radius: 10px;\n    background-color: #fff;\n    height: 50px;\n    -webkit-box-shadow: 0 5px 10px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 5px 10px rgba(166, 173, 201, 0.2);\n`;\n\nconst TaskContentInputDiv = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    height: 90%;\n    width: 70%;\n    margin-left: 10px;\n    svg {\n        font-size: 1.3em;\n        margin-right: 5px;\n        color: #85BCFF;\n    }\n`;\n\nconst TaskContentInputField = styled.input`\n    height: 100%;\n    width: 90%;\n    font-size: 0.9em;\n    background-color: #fff;\n    border: 0;\n    outline: none;\n    font-weight: bold;\n    &::placeholder {\n        color: #c1c1d7;\n    }\n`;\n\nconst TaskTimeInputDiv = styled.div`\n    display: flex;\n    align-items: center;\n    height: 90%;\n    width: 25%;\n    color: #c1c1d7;\n    span {\n        font-size: 0.8em;\n        font-weight: bold;\n    }\n    svg {\n        font-size: 1.2em;\n        color: #85BCFF;\n    }\n`;\n\nconst TaskTimeInputField = styled.input`\n    height: 100%;\n    width: 30%;\n    font-size: 0.9em;\n    text-align: center;\n    background-color: #fff;\n    border: 0;\n    outline: none;\n    font-weight: bold;\n    &::placeholder {\n        color: #c1c1d7;\n    }\n    &::-webkit-inner-spin-button,\n    &::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        appearance: none;\n        margin: 0;\n    }\n`;\n\nexport default function TaskInput() {\n    const [task, setTask] = useState(\"\");\n    const [time, setTime] = useState(20);\n    let taskContentInputRef, taskTimeInputRef;\n    const meta = useSelector((state) => state.tasks.meta);\n    const dispatch = useDispatch();\n\n    function submitTask(e) {\n        if (e.key === \"Enter\" && task.trim().length >= 1) {\n            let temp = task.trim().split(\" \");\n            // add a max time limit\n            let taskTime = time;\n            if (temp.length !== 1 && !isNaN(parseInt(temp[temp.length - 1]))) {\n                taskTime = parseInt(temp.pop());\n            }\n            temp = temp.join(\" \");\n\n            let newTask = {\n                id: Math.floor(Math.random() * 10000),\n                globalKey: meta.globalKey,\n                content: temp,\n                time: taskTime * 60,\n                remainingTime: taskTime * 60,\n                isRunning: false,\n                isCompleted: false,\n                createdAt: new Date().toISOString(),\n            };\n            if (meta.focussedTaskIndex !== -1) dispatch(focusOnTask(meta.focussedTaskIndex + 1));\n            dispatch(create(newTask));\n            dispatch(incrementGlobalKey());\n            setTask(\"\");\n            setTime(20);\n            taskContentInputRef.value = \"\";\n            taskTimeInputRef.value = \"\";\n            taskContentInputRef.focus();\n        }\n    }\n\n    return (\n        <TaskInputContainer>\n            <TaskContentInputDiv>\n                <AiFillPlusCircle onClick={() => taskContentInputRef.focus()} />\n                <TaskContentInputField\n                    type=\"text\"\n                    placeholder=\"i have to focus on ...\"\n                    ref={(el) => (taskContentInputRef = el)}\n                    onChange={(e) => setTask(e.target.value)}\n                    onKeyDown={submitTask}\n                />\n            </TaskContentInputDiv>\n            <TaskTimeInputDiv>\n                <AiFillClockCircle onClick={() => taskTimeInputRef.focus()} />\n                <TaskTimeInputField\n                    type=\"number\"\n                    placeholder=\"20\"\n                    ref={(el) => (taskTimeInputRef = el)}\n                    onChange={(e) => setTime(e.target.value)}\n                    onKeyDown={submitTask}\n                />\n                <span>mins</span>\n            </TaskTimeInputDiv>\n        </TaskInputContainer>\n    );\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { BiShow, BiHide } from \"react-icons/bi\";\nimport { AiOutlineClear } from \"react-icons/ai\";\nimport { Flipped } from \"react-flip-toolkit\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { clearCompletedTasks, toggleShowCompletedTasks } from \"./../../containers/taskBoard/taskBoardSlice\";\nconst DoneTasksDivider = styled.div`\n    display: flex;\n    margin: 15px 0 15px 25px;\n`;\nconst DividerLine = styled.div`\n    width: 100%;\n    position: relative;\n    margin: 15px;\n    border-bottom: 3px solid #0000cd;\n`;\n\nconst DividerIcon = styled.div`\n    width: 90px;\n    position: relative;\n    top: 3px;\n    color: #0000cd;\n    p {\n        margin: 0;\n        font-weight: bold;\n        letter-spacing:${(p)=>p.showCompletedTasks?\"3px\":\"1px\"};\n    }\n`;\n\nconst DividerActionDiv = styled.div`\n    display: flex;\n    width: 70px;\n    height: 30px;\n    justify-content: space-around;\n    align-items: center;\n    border-radius: 5px;\n    background-color: #fff;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    svg {\n        color: #0000cd;\n        cursor:pointer;\n    }\n`;\n\nexport default function Divider() {\n    const [showActionBtn, setShowActionBtn] = useState(false);\n    const showCompletedTasks = useSelector((s) => s.tasks.meta.showCompletedTasks);\n    const completedTasksCount = useSelector((s)=>s.tasks.meta.completedTasksCount);\n    const dispatch = useDispatch();\n    return (\n        <Flipped flipId={`-1`}>\n            <DoneTasksDivider>\n                <DividerLine />\n                <DividerIcon showCompletedTasks={showCompletedTasks} onMouseEnter={() => setShowActionBtn(true)} onMouseLeave={() => setShowActionBtn(false)}>\n                    {showActionBtn ? (\n                        <DividerActionDiv>\n                            {showCompletedTasks ? (\n                                <BiHide onClick={() => dispatch(toggleShowCompletedTasks())} />\n                            ) : (\n                                <BiShow onClick={() => dispatch(toggleShowCompletedTasks())} />\n                            )}\n                            <AiOutlineClear onClick={() => dispatch(clearCompletedTasks())} />\n                        </DividerActionDiv>\n                    ) : (\n                        <p>{showCompletedTasks?\"DONE\":`DONE(${completedTasksCount})`}</p>\n                        \n                    )}\n                </DividerIcon>\n                <DividerLine />\n            </DoneTasksDivider>\n        </Flipped>\n    );\n}\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateOrder } from \"./taskBoardSlice\";\nimport TaskCard from \"./../../components/TaskBoard/TaskCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Flipper } from \"react-flip-toolkit\";\nimport { focusOnTask } from \"./taskBoardSlice\";\nimport styled from \"styled-components\";\nimport TaskInput from \"./../../components/TaskBoard/TaskInput\";\nimport Divider from \"./../../components/TaskBoard/Divider\";\n\nconst TaskBoardContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-color:#F7F7FA;\n    flex: 2 1 0;\n`;\n\nexport function TaskBoard() {\n    const tasks = useSelector((state) => state.tasks.taskArray);\n    const meta = useSelector((state) => state.tasks.meta);\n    let focussedTask = meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex] : null;\n    const dispatch = useDispatch();\n\n    function handleOnDragEnd(result) {\n        if (!result.destination) return;\n\n        let items = [...tasks.map((i) => ({ ...i }))];\n        const [reorderedItem] = items.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorderedItem);\n\n        let i = result.source.index;\n        let direction = result.destination.index > result.source.index; // direction true means moving right & swapping\n        // below is logic to reset globalKeys to maintain correct sort order.\n        while (i != result.destination.index) {\n            if (direction) {\n                items[i].globalKey = tasks[i].globalKey;\n                i++;\n            } else {\n                items[i].globalKey = tasks[i].globalKey;\n                i--;\n            }\n            if (i == result.destination.index) {\n                items[i].globalKey = tasks[i].globalKey;\n            }\n        }\n\n        if (meta.focussedTaskIndex !== -1) {\n            let greaterIndex = Math.max(result.destination.index, result.source.index);\n            let smallerIndex = Math.min(result.destination.index, result.source.index);\n\n            if (result.source.index === meta.focussedTaskIndex) {\n                dispatch(focusOnTask(result.destination.index));\n            } else if (meta.focussedTaskIndex >= smallerIndex && meta.focussedTaskIndex <= greaterIndex) {\n                if (result.destination.index > result.source.index) {\n                    dispatch(focusOnTask(meta.focussedTaskIndex - 1)); // -1\n                } else {\n                    dispatch(focusOnTask(meta.focussedTaskIndex + 1)); // +1\n                }\n            }\n        }\n\n        dispatch(updateOrder(items)); // order is imp. focus then updateOrder\n    }\n\n    function getFlipKey() {\n        let flipKey = \"\";\n        tasks.forEach((i) => {\n            flipKey += `${i.globalKey}`;\n        });\n        flipKey += `${meta.completedTaskStartIndex}`;\n        return flipKey;\n    }\n\n    function isFocussed(id) {\n        if (focussedTask !== null && focussedTask.id === id) return true;\n        return false;\n    }\n\n    // input has both onChange and onKeyDown - can be optimised by using one and combining\n\n    return (\n        <TaskBoardContainer>\n            <TaskInput focussedTaskIndex={meta.focussedTaskIndex}/>\n\n            <Flipper flipKey={getFlipKey()}>\n                <DragDropContext onDragEnd={handleOnDragEnd}>\n                    <Droppable droppableId=\"dropArea\">\n                        {(provided) => (\n                            <div {...provided.droppableProps} ref={provided.innerRef}>\n                                {tasks.map((i, index) =>\n                                    !i.isCompleted ? (\n                                        <Draggable isDragDisabled={i.isCompleted} key={i.id} draggableId={`${i.id}`} index={index}>\n                                            {(provided2) => (\n                                                <TaskCard focussedTaskIndex={meta.focussedTaskIndex} taskIndex={index} forwardRBDProvided={provided2} task={i} isFocussed={isFocussed(i.id)} />\n                                            )}\n                                        </Draggable>\n                                    ) : (\n                                        \"\"\n                                    )\n                                )}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n\n                {meta.completedTaskStartIndex !== -1 && meta.completedTaskStartIndex !== 0 && <Divider />}\n\n                {meta.showCompletedTasks && tasks.map((i, index) =>\n                    i.isCompleted ? (\n                        <TaskCard focussedTaskIndex={meta.focussedTaskIndex} taskIndex={index} key={i.id} forwardRBDProvided={{ innerRef: null }} task={i} isFocussed={isFocussed(i.id)} />\n                    ) : (\n                        \"\"\n                    )\n                )}\n            </Flipper>\n        </TaskBoardContainer>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/ding.86b39a2c.mp3\";","export default __webpack_public_path__ + \"static/media/tasks.27d4608d.svg\";","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { toggleIsRunning, resetTaskTimer, tick, updateTaskTimeByVal } from \"../taskBoard/taskBoardSlice\";\nimport useTimer from \"../../hooks/useTimer\";\nimport { formattedTimeStringv2 } from \"../../helpers\";\nimport { CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { BsFillPlayFill, BsFillPauseFill } from \"react-icons/bs\";\nimport { ImLoop2 } from \"react-icons/im\";\nimport dingSound from \"./../../sounds/ding.mp3\";\nimport tasks from \"./../../images/tasks.svg\";\nimport glowBulb from \"./../../images/glowBulb.svg\";\n\nlet dingSoundElement = new Audio(dingSound);\n\nconst FocusBoardContainer = styled.div`\n    flex: 3 1 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border-right: 2px black solid;\n`;\n\nconst FocussedTaskContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    position: relative;\n    width: 276px;\n    height: 346px;\n    margin: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.5);\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.5);\n    background-color: #f7f7fa;\n`;\n\nconst FocussedTaskDiv = styled.div`\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n`;\n\nconst FocussedTaskTimer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 50%;\n`;\n\nconst CountdownTimerDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 90px;\n    height: 90px;\n    background-color: #fff;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    border-radius: 50%;\n    p {\n        font-size: 0.9em;\n        font-weight: bold;\n    }\n`;\n\nconst PlayButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 55px;\n    height: 55px;\n    background-color: #0000cd;\n    border-radius: 50%;\n    margin: 10px 20px;\n    box-shadow: 0 1px 7px rgba(0, 0, 0, 0.4);\n    -webkit-box-shadow: 0 1px 7px rgba(0, 0, 0, 0.4);\n    svg {\n        color: #fff;\n        font-size: 1.8em;\n    }\n    cursor: pointer;\n`;\n\nconst UpdateTimeButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 30px;\n    height: 30px;\n    cursor: pointer;\n`;\n\nconst ResetButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    background-color: #0000cd;\n    border-radius: 50%;\n    width: 30px;\n    height: 30px;\n    top: 7px;\n    right: 7px;\n    cursor: pointer;\n    svg {\n        color: #fff;\n        font-size: 0.6em;\n    }\n`;\n\nconst FocussedTaskContent = styled.div`\n    display: flex;\n    justify-content: center;\n    text-align: center;\n    margin: 5px;\n    height: 30%;\n    width: 90%;\n    word-wrap: break-word;\n    p {\n        min-width: 0;\n        font-weight: bold;\n        margin: 3px;\n    }\n`;\n\nconst FocussedTaskController = styled.div`\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n    height: 20%;\n    margin-bottom: 10px;\n`;\n\nconst EmptyFocusBox = styled.div`\n    display: flex;\n    justify-content: center;\n    width:90%;\n    align-items: center;\n    p{\n        margin-bottom:10px;\n        display:inline-block;\n        font-weight:bold;\n        font-size:1.3em;\n        color: #c1c1d7;\n    }\n    img {\n        display:inline-block;\n        width: 35px;\n        margin:3px;\n    }\n`;\n\nexport function FocusBoard() {\n    const focussedTaskIndex = useSelector((state) => state.tasks.meta.focussedTaskIndex);\n    let focussedTask = useSelector((state) => (focussedTaskIndex !== -1 ? state.tasks.taskArray[focussedTaskIndex] : null));\n    const dispatch = useDispatch();\n    const delay = 1000;\n    useTimer(\n        () => {\n            if (focussedTask === null) return;\n            else if (focussedTask.remainingTime > 0) {\n                dispatch(tick(focussedTaskIndex));\n            } else if (focussedTask.remainingTime === 0) {\n                dispatch(toggleIsRunning(focussedTaskIndex));\n                dingSoundElement.play();\n            }\n        },\n        focussedTask !== null && focussedTask.isRunning ? delay : null\n    );\n\n    function updateTaskTimeHandler(val) {\n        if (focussedTask.isCompleted) return;\n        if (focussedTask.isRunning) dispatch(toggleIsRunning(focussedTaskIndex));\n        dispatch(updateTaskTimeByVal({ focussedTaskIndex, val }));\n    }\n\n    return (\n        <FocusBoardContainer>\n            <FocussedTaskContainer>\n                {focussedTask != null && (\n                    <FocussedTaskDiv>\n                        <FocussedTaskTimer>\n                            <div style={{ width: 120, height: 120 }}>\n                                <CircularProgressbarWithChildren\n                                    value={focussedTask.time !== 0 ? Math.floor((focussedTask.remainingTime / focussedTask.time) * 100) : 0}\n                                    styles={buildStyles({\n                                        strokeLinecap: \"butt\",\n\n                                        pathColor: \"#0000cd\",\n                                        trailColor: \"#EFF7FF\",\n                                    })}\n                                    strokeWidth={6}\n                                >\n                                    <CountdownTimerDiv>\n                                        <p>{formattedTimeStringv2(focussedTask.remainingTime)}</p>\n                                    </CountdownTimerDiv>\n                                </CircularProgressbarWithChildren>\n                            </div>\n                        </FocussedTaskTimer>\n                        <FocussedTaskContent>\n                            <p>{focussedTask.content}</p>\n                        </FocussedTaskContent>\n                        <FocussedTaskController>\n                            <UpdateTimeButtonDiv onClick={() => updateTaskTimeHandler(-5)}>\n                                <h4>-5</h4>\n                            </UpdateTimeButtonDiv>\n                            <PlayButtonDiv onClick={() => dispatch(toggleIsRunning(focussedTaskIndex))}>\n                                {focussedTask.isRunning ? <BsFillPauseFill /> : <BsFillPlayFill />}\n                            </PlayButtonDiv>\n\n                            <UpdateTimeButtonDiv onClick={() => updateTaskTimeHandler(5)}>\n                                <h4>+5</h4>\n                            </UpdateTimeButtonDiv>\n                        </FocussedTaskController>\n                        <ResetButtonDiv onClick={() => dispatch(resetTaskTimer(focussedTaskIndex))}>\n                            <ImLoop2 />\n                        </ResetButtonDiv>\n                    </FocussedTaskDiv>\n                )}\n                {focussedTask === null && (\n                    <EmptyFocusBox>\n                        <div>\n                            <p>pick a </p>\n                            <img src={tasks} alt=\"task\" />\n                            <p>and</p>\n                            <img src={glowBulb} alt=\"focus\" />\n                        </div>\n                    </EmptyFocusBox>\n                )}\n            </FocussedTaskContainer>\n        </FocusBoardContainer>\n    );\n}\n","import { useEffect, useRef } from \"react\";\n\nexport default function useTimer(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n","import React from \"react\";\r\nimport { TaskBoard } from \"./taskBoard/TaskBoard\";\r\nimport { FocusBoard } from \"./focusBoard/FocusBoard\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    height:100%;\r\n`;\r\n\r\nfunction App() {\r\n    return (\r\n        <Container>\r\n            <FocusBoard/>\r\n            <TaskBoard />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"../containers/taskBoard/taskBoardSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}