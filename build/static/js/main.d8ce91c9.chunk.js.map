{"version":3,"sources":["containers/menu/Menu.js","containers/dashboard/DashboardHero.js","helpers/constants.js","containers/taskBoard/taskBoardSlice.js","hooks/useTimer.js","components/customIcons/index.js","sounds/ding.mp3","helpers/index.js","components/FocusBoard/FocussedTask.js","components/FocusBoard/EmptyFocusBox.js","sounds/bell.mp3","sounds/piano.mp3","sounds/river.mp3","sounds/forest.mp3","sounds/alphaWave.mp3","images/bell.svg","images/piano.svg","images/alphaWave.svg","images/river.svg","components/MusicBox/musicUtils.js","images/forest.svg","components/MusicBox/MusicVolumeControl.js","components/MusicBox/Soundscapes.js","components/FocusBoard/DayDate.js","containers/focusBoard/FocusBoard.js","components/MiscBoard/EmptyLabelPie.js","components/MiscBoard/LabelPie.js","components/MiscBoard/ProgressRings.js","components/MiscBoard/TimeProgressCard.js","components/MiscBoard/TaskProgressCard.js","containers/miscBoard/MiscBoard.js","containers/dashboard/DashboardMain.js","containers/dashboard/index.js","images/bulb.svg","images/glowBulb.svg","images/tickmark.svg","components/TaskBoard/TaskLabelSelect.js","components/TaskBoard/TaskCard.js","components/TaskBoard/TaskInput.js","components/TaskBoard/Divider.js","images/noTasks.svg","components/TaskBoard/NoTasks.js","containers/taskBoard/TaskBoard.js","containers/mobileView/index.js","containers/settings/index.js","containers/App.js","store/index.js","serviceWorker.js","index.js"],"names":["MenuContainer","styled","div","activeClassName","MenuOptions","NavLink","attrs","Menu","exact","to","data-tip","data-for","id","getContent","DashboardHeroContainer","DashboardHeroDiv","DashboardHero","MIN_TO_MS","tasksSlice","createSlice","name","initialState","taskArray","labels","work","color","count","personal","fitness","metime","explore","soundscape","track","isPlaying","volume","meta","globalKey","completedTaskStartIndex","focussedTaskIndex","showCompletedTasks","completedTasksCount","totalTaskListTime","remainingTaskListTime","reducers","create","tasks","payload","time","remainingTime","unshift","remove","filter","i","isCompleted","length","updateTaskContent","forEach","content","updatedTaskContent","updateTaskLabel","label","updateTaskTime","updatedTime","updateTaskTimeByVal","val","updateOrder","focusOnTask","resetFocussedTask","tick","deltaMS","resetTaskTimer","isRunning","toggleIsRunning","undefined","idx","toggleShowCompletedTasks","toggleIsCompleted","clearCompletedTasks","updateLabelCount","oldLabel","newLabel","incrementGlobalKey","rearrange","markedAsComplete","found","temp","task","pos","push","splice","changeSoundscapeTrack","toggleSoundscapeState","updateSoundscapeVolume","actions","absoluteSetInterval","handler","delay","baseTime","Date","now","setInterval","timePassedSinceLastCall","console","log","ResetIcon","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","SummaryCardTick","fillRule","clipRule","SummaryCardClock","formattedTimeString","x","secs","Math","floor","mins","getFormattedListTimeSummary","hours","dingSoundElement","Audio","dingSound","FocussedTaskDiv","FocussedTaskPlayer","FocussedTaskContent","FocussedTaskTimer","CountdownTimerDiv","p","isDisabled","FocussedTaskController","PlayPauseButtonDiv","isPlayBtn","UpdateTimeButtonDiv","ResetButtonDiv","FocussedTask","useSelector","state","focussedTask","dispatch","useDispatch","updateTaskTimeHandler","callback","savedCallback","useRef","useEffect","current","clearInterval","useTimer2","play","countdownObj","formattedTimeStringv2","countdownMins","countdownSecs","style","width","height","value","styles","buildStyles","pathColor","trailColor","onClick","wasTaskRunning","playPauseHandler","EmptyFocusBox","soundOptions","alphaWave","src","img","ImgAlphaWave","piano","ImgPiano","bell","ImgBell","Forest","forest","river","ImgRiver","MusicVolumeControl","ssVolume","s","useState","setVolume","debouncedUpdateSoundscapeVolume","fn","wait","t","clearTimeout","setTimeout","apply","arguments","debounce","vol","axis","disabled","xstep","xmin","xmax","onChange","backgroundColor","active","thumb","opacity","SoundscapesContainer","SoundscapesDiv","SoundOptionsDiv","SoundOptionsInput","isSelectedSound","SoundVolumeControl","Soundscapes","trackname","audioElement","loop","generateAudioElement","soundscapeAudioElement","addEventListener","pause","Object","keys","map","alt","FocusBoardContainer","FocussedTaskContainer","MusicBoxContainer","FocusBoard","EmptyLabelPieDiv","EmptyLabelPie","LabelPie","totalTasksCount","selected","setSelected","hovered","setHovered","labelledTasksCount","labelData","reduce","filtered","tooltip","fontSize","fontWeight","data","radius","PieChart","defaultProps","lineWidth","segmentsStyle","transition","cursor","segmentsShift","animate","dataEntry","labelPosition","labelStyle","pointerEvents","_","index","onMouseOver","onMouseOut","ProgressRingBox","ProgressRingDiv","ProgressRingLegendDiv","LegendDataDiv","TextDiv","PercentTextDiv","LegendColorDot","ProgressRings","taskCompletionPercent","timeCompletionPercent","ProgressCard","ProgressCardText","FormattedTimeDiv","absoluteIconStyles","css","ClockIconDiv","noTasks","TimeProgressCard","rTLTObj","rTLTHours","rTLTMins","tTLTObj","tTLTHours","tTLTMins","TickIconDiv","TaskProgressCard","MiscBoardContainer","MainSummaryContainer","ProgressRingContainer","ProgressCardContainer","LabelPieContainer","MiscBoard","DashboardMainContainer","DashboardMain","DashboardContainer","Dashboard","TaskSelectInput","select","TaskLabel","taskLabel","updatedLabel","setUpdatedLabel","autoFocus","onBlur","taskId","defaultValue","e","target","onKeyDown","key","TaskCardContainer","TaskCardDragIcon","TaskCardDiv","labelColor","isFocussed","TaskStatusDiv","TaskDetailsDiv","TaskContentDiv","TaskEditInput","textarea","TimeEditInput","input","TaskActionButton","TaskLabelContainer","TaskDeleteButton","TaskControllerDiv","TaskCard","str","taskIndex","focussedTaskGlobalKey","forwardRBDProvided","taskUnderEdit","setTaskUnderEdit","setUpdatedTaskContent","timeUnderEdit","setTimeUnderEdit","setUpdatedTime","labelUnderEdit","setLabelUnderEdit","showDragIcon","setShowDragIcon","flipId","ref","innerRef","draggableProps","dragHandleProps","onMouseEnter","onMouseLeave","tickmark","glowBulb","bulb","onDoubleClick","trim","substring","isDoneBtn","stopPropagation","TaskInputContainer","TaskContentInputDiv","TaskContentInputField","TaskTimeInputDiv","TaskTimeInputField","TaskInput","taskContentInputRef","taskTimeInputRef","setTask","setTime","submitTask","split","taskTime","isNaN","parseInt","includes","userLabel","toLowerCase","validLabel","pop","join","newTask","random","createdAt","toISOString","focus","type","placeholder","el","DoneTasksDivider","DividerLine","DividerIcon","DividerActionDiv","Divider","showActionBtn","setShowActionBtn","NoTasksDiv","allCompleted","NoTasksIcon","NoTasks","TaskBoardContainer","TaskBoard","flipKey","getFlipKey","onDragEnd","result","destination","items","source","reorderedItem","direction","greaterIndex","max","smallerIndex","min","droppableId","provided","droppableProps","isDragDisabled","draggableId","provided2","MobileView","SettingsContainer","Settings","AppContainer","App","isMobile","path","configureStore","reducer","tasksReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8ce91c9.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { MdDashboard, MdSettings } from \"react-icons/md\";\nimport { IoMdAnalytics } from \"react-icons/io\";\nimport { BiExclude } from \"react-icons/bi\";\n\nimport { NavLink } from \"react-router-dom\";\n\nimport ReactTooltip from \"react-tooltip\";\n\nconst MenuContainer = styled.div`\n    width: 10%;\n    max-width: 128px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    background-color: #020202;\n    border-radius: 0 15px 15px 0;\n    border-left: 15px solid #fabb18;\n`;\n\nconst activeClassName = \"nav-item-active\";\n\nconst MenuOptions = styled(NavLink).attrs({ activeClassName })`\n    display: flex;\n    justify-content: center;\n    margin: 10px 0;\n    border-radius: 0 5px 5px 0;\n    background-color: #020202;\n    svg {\n        font-size: 1.8em;\n        color: #fff;\n        margin: 5px 0;\n    }\n    &.${activeClassName} {\n        svg{\n            color:#fabb18;\n        }\n    }\n    width:80%;\n    transition:width 0.2s;\n    &:hover{\n        width:90%;\n        background-color: #fabb18;\n    }\n`;\n\nexport function Menu() {\n    return (\n        <MenuContainer>\n            <MenuOptions exact to=\"/\">\n                <MdDashboard data-tip=\"\" data-for=\"dashboard\" />\n\n                <ReactTooltip id=\"dashboard\" getContent={() => \"Dashboard\"} />\n            </MenuOptions>\n\n            <MenuOptions exact to=\"/analytics\" >\n                <IoMdAnalytics data-tip=\"\" data-for=\"analytics\" />\n                <ReactTooltip id=\"analytics\" getContent={() => \"Coming Soon\"} />\n            </MenuOptions>\n\n            <MenuOptions exact to=\"/notes\" >\n                <BiExclude data-tip=\"\" data-for=\"notes\" />\n                <ReactTooltip id=\"notes\" getContent={() => \"Coming Soon\"} />\n            </MenuOptions>\n\n            <MenuOptions exact to=\"/settings\">\n                <MdSettings data-tip=\"\" data-for=\"settings\" />\n                <ReactTooltip id=\"settings\" getContent={() => \"Settings\"} />\n            </MenuOptions>\n        </MenuContainer>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst DashboardHeroContainer = styled.div`\n    flex: 1 1 0;\n    display: flex;\n    align-items:center;\n    justify-content:center;\n    /* background-color: purple; */\n`;\n\nconst DashboardHeroDiv = styled.div`\n    display: flex;\n    width: 85%;\n    max-width:776px;\n    height: 85%;\n    background-color: #fff;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\n    border-radius: 20px;\n`;\n\nexport function DashboardHero() {\n    return (\n        <DashboardHeroContainer>\n            <DashboardHeroDiv />\n        </DashboardHeroContainer>\n    );\n}\n","export const MIN_TO_MS = 60 * 1000;","import { createSlice } from \"@reduxjs/toolkit\";\nimport { MIN_TO_MS } from \"./../../helpers/constants\";\n\nconst labelOptions = {\n    work: {\n        color: \"#de1738\",\n        count: 0,\n    },\n    personal: {\n        color: \"#89CFF0\",\n        count: 0,\n    },\n    fitness: {\n        color: \"#76ff7a\",\n        count: 0,\n    },\n    metime: {\n        color: \"#7442c8\",\n        count: 0,\n    },\n    explore: {\n        color: \"#efc0fe\",\n        count: 0,\n    },\n};\n\nexport const tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        taskArray: [],\n        labels: labelOptions,\n        soundscape: {\n            track: \"bell\",\n            isPlaying: false,\n            volume: 0.7,\n        },\n        meta: {\n            globalKey: 0,\n            completedTaskStartIndex: -1,\n            focussedTaskIndex: -1,\n            showCompletedTasks: true,\n            completedTasksCount: 0,\n            totalTaskListTime: 0,\n            remainingTaskListTime: 0,\n        },\n    },\n    reducers: {\n        create: (tasks, { payload }) => {\n            payload.time = payload.time * MIN_TO_MS;\n            payload.remainingTime = payload.remainingTime * MIN_TO_MS;\n            tasks.taskArray.unshift(payload);\n            tasks.meta.totalTaskListTime += payload.time;\n            tasks.meta.remainingTaskListTime += payload.time;\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\n        },\n        remove: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.filter((i) => {\n                if (i.id !== payload) return true;\n                else {\n                    if (!i.isCompleted) {\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\n                    } else {\n                        tasks.meta.completedTasksCount--;\n                        if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length - 1) {\n                            tasks.meta.completedTaskStartIndex = -1;\n                        }\n                    }\n\n                    if (!i.isCompleted) {\n                        tasks.meta.remainingTaskListTime -= i.remainingTime;\n                    }\n                    tasks.meta.totalTaskListTime -= i.time;\n\n                    return false;\n                }\n            });\n        },\n        updateTaskContent: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.content = payload.updatedTaskContent;\n                }\n            });\n        },\n        updateTaskLabel: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.label = payload.label;\n                }\n            });\n        },\n        updateTaskTime: (tasks, { payload }) => {\n            tasks.taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    tasks.meta.totalTaskListTime -= i.time;\n                    tasks.meta.remainingTaskListTime -= i.remainingTime;\n                    tasks.meta.totalTaskListTime += payload.updatedTime * MIN_TO_MS;\n                    tasks.meta.remainingTaskListTime += payload.updatedTime * MIN_TO_MS;\n                    i.remainingTime = payload.updatedTime * MIN_TO_MS;\n                    i.time = payload.updatedTime * MIN_TO_MS;\n                }\n            });\n        },\n        updateTaskTimeByVal: (tasks, { payload }) => {\n            if (tasks.taskArray[payload.focussedTaskIndex].remainingTime + payload.val * MIN_TO_MS < 0) {\n                tasks.meta.remainingTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\n            } else {\n                tasks.meta.remainingTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime += payload.val * MIN_TO_MS;\n                tasks.meta.remainingTaskListTime += tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n            }\n\n            if (tasks.taskArray[payload.focussedTaskIndex].time + payload.val * MIN_TO_MS < 0) {\n                tasks.meta.totalTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].time;\n                tasks.taskArray[payload.focussedTaskIndex].time = 0;\n            } else {\n                tasks.meta.totalTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].time;\n                tasks.taskArray[payload.focussedTaskIndex].time += payload.val * MIN_TO_MS;\n                tasks.meta.totalTaskListTime += tasks.taskArray[payload.focussedTaskIndex].time;\n            }\n        },\n        updateOrder: (tasks, { payload }) => {\n            tasks.taskArray = payload;\n        },\n\n        focusOnTask: (tasks, { payload }) => {\n            tasks.meta.focussedTaskIndex = payload;\n        },\n        resetFocussedTask: (tasks) => {\n            tasks.meta.focussedTaskIndex = -1;\n        },\n        tick: (tasks, { payload }) => {\n            tasks.taskArray[payload.focussedTaskIndex].remainingTime -= payload.deltaMS;\n            tasks.meta.remainingTaskListTime -= payload.deltaMS;\n\n            if (tasks.taskArray[payload.focussedTaskIndex].remainingTime < 0) {\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\n            }\n            if (tasks.meta.remainingTaskListTime < 0) {\n                tasks.meta.remainingTaskListTime = 0;\n            }\n        },\n        resetTaskTimer: (tasks, { payload }) => {\n            tasks.taskArray[payload].isRunning = false;\n\n            tasks.meta.remainingTaskListTime -= tasks.taskArray[payload].remainingTime;\n            tasks.meta.remainingTaskListTime += tasks.taskArray[payload].time;\n\n            tasks.taskArray[payload].remainingTime = tasks.taskArray[payload].time;\n        },\n        toggleIsRunning: (tasks, { payload }) => {\n            if (payload.val !== undefined) tasks.taskArray[payload.idx].isRunning = payload.val;\n            else tasks.taskArray[payload.idx].isRunning = !tasks.taskArray[payload.idx].isRunning;\n        },\n        toggleShowCompletedTasks: (tasks) => {\n            tasks.meta.showCompletedTasks = !tasks.meta.showCompletedTasks;\n        },\n        toggleIsCompleted: (tasks, { payload }) => {\n            tasks.taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    if (i.isCompleted) {\n                        tasks.meta.remainingTaskListTime += i.remainingTime;\n                        --tasks.meta.completedTasksCount;\n                    } else {\n                        tasks.meta.remainingTaskListTime -= i.remainingTime;\n                        ++tasks.meta.completedTasksCount;\n                    }\n\n                    i.isCompleted = !i.isCompleted;\n                }\n            });\n        },\n        clearCompletedTasks: (tasks) => {\n            if (tasks.meta.completedTaskStartIndex !== -1) {\n                for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                    if (tasks.taskArray[i].label !== null) tasks.labels[tasks.taskArray[i].label].count--;\n\n                    tasks.meta.totalTaskListTime -= tasks.taskArray[i].time;\n                }\n\n                tasks.taskArray.length = tasks.meta.completedTaskStartIndex;\n                tasks.meta.completedTaskStartIndex = -1;\n                tasks.meta.completedTasksCount = 0;\n            }\n        },\n        updateLabelCount: (tasks, { payload }) => {\n            if (payload.oldLabel !== null) tasks.labels[payload.oldLabel].count--;\n            if (payload.newLabel !== null) tasks.labels[payload.newLabel].count++;\n        },\n        incrementGlobalKey: ({ meta }) => {\n            ++meta.globalKey;\n        },\n        rearrange: (tasks, { payload }) => {\n            let id = payload.id;\n\n            if (payload.markedAsComplete) {\n                if (tasks.meta.completedTaskStartIndex === -1) {\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                    let found = false;\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\n                        if (found) {\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        } else if (tasks.taskArray[i].id === id) {\n                            found = true;\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }\n                    }\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                } else {\n                    let task, idx;\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n                    let pos = -1;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    if (pos === -1) {\n                        tasks.taskArray.push(task);\n                    } else {\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.meta.completedTaskStartIndex -= 1;\n                }\n            } else {\n                if (tasks.meta.completedTaskStartIndex == 0) {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.taskArray.unshift(task);\n                    tasks.meta.completedTaskStartIndex = 1;\n                } else {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    let start = tasks.meta.completedTaskStartIndex - 1;\n                    let pos = -1;\n                    for (let i = start; i >= 0; i--) {\n                        if (tasks.taskArray[i].globalKey < task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    if (pos === -1) {\n                        tasks.taskArray.unshift(task);\n                    } else {\n                        pos++;\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.meta.completedTaskStartIndex += 1;\n                }\n\n                if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length) {\n                    tasks.meta.completedTaskStartIndex = -1;\n                }\n            }\n        },\n        changeSoundscapeTrack: ({ soundscape }, { payload }) => {\n            soundscape.track = payload;\n        },\n        toggleSoundscapeState: ({ soundscape }, { payload }) => {\n            soundscape.isPlaying = payload;\n        },\n        updateSoundscapeVolume: ({ soundscape }, { payload }) => {\n            soundscape.volume = payload;\n        },\n    },\n});\n\nexport const {\n    create,\n    remove,\n    updateTaskContent,\n    updateTaskLabel,\n    updateTaskTime,\n    updateTaskTimeByVal,\n    focusOnTask,\n    resetFocussedTask,\n    tick,\n    resetTaskTimer,\n    toggleIsRunning,\n    toggleShowCompletedTasks,\n    toggleIsCompleted,\n    clearCompletedTasks,\n    updateOrder,\n    updateLabelCount,\n    incrementGlobalKey,\n    rearrange,\n    changeSoundscapeTrack,\n    toggleSoundscapeState,\n    updateSoundscapeVolume,\n} = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n","import { useEffect, useRef } from \"react\";\n\nexport default function useTimer(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n\nexport function useTimer2(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick(deltaMS) {\n            savedCallback.current(deltaMS);\n        }\n        if (delay !== null) {\n            let id = absoluteSetInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n\nconst absoluteSetInterval = (handler, delay) => {\n    let baseTime = Date.now();\n    const callHandler = () => {\n        let timePassedSinceLastCall = Date.now() - baseTime;\n        console.log('timePassedSinceLastCall: ',timePassedSinceLastCall)\n        if (timePassedSinceLastCall > 1000) {\n            baseTime = Date.now(); // must be set before calling handler to avoid time delay in executing it\n            handler(timePassedSinceLastCall);\n        }\n    };\n    return setInterval(callHandler, delay);\n};\n","import React from \"react\";\n\nexport const GlobeIcon = () => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n                stroke-width=\"2\"\n                d=\"M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n            />\n        </svg>\n    );\n};\n\nexport const ResetIcon = () => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\n            />\n        </svg>\n    );\n};\n\nexport const SummaryCardTick = () => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path\n                fillRule=\"evenodd\"\n                d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\"\n                clipRule=\"evenodd\"\n            />\n        </svg>\n    );\n};\n\nexport const SummaryCardClock = () => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path\n                fillRule=\"evenodd\"\n                d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\"\n                clipRule=\"evenodd\"\n            />\n        </svg>\n    );\n};\n","export default __webpack_public_path__ + \"static/media/ding.48474537.mp3\";","export function formattedTimeString(x) {\n    x = Math.floor(x/1000);\n    let secs = x % 60;\n    let mins = Math.floor(x/ 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return `${mins}:${secs}`;\n}\n\nexport function formattedTimeStringv2(x) {\n    x = Math.floor(x/1000);\n    let secs = x % 60;\n    let mins = Math.floor(x/ 60);\n\n    if (secs == 0) {\n        secs = `00`;\n    } else if (secs < 10) {\n        secs = `0${secs}`;\n    }\n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n\n    return { mins, secs };\n}\n\nexport function getFormattedDate() {\n    let d = new Date();\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    return {\n        day: days[d.getDay()],\n        month: months[d.getMonth()],\n        date: d.getDate(),\n        year: d.getFullYear(),\n    };\n}\n\nexport function getFormattedListTimeSummary(x) {\n    x = Math.floor(x/1000);\n    let mins = Math.floor((x % 3600) / 60);\n    let hours = Math.floor(x / 3600);\n    \n    if (mins == 0) {\n        mins = `00`;\n    } else if (mins < 10) {\n        mins = `0${mins}`;\n    }\n    if (hours == 0) {\n        hours = `0`;\n    } else if (hours < 10) {\n        hours = `${hours}`;\n    }\n\n    return { hours, mins };\n}\n\nexport function debounce(fn, wait) {\n    let t;\n    return function () {\n        clearTimeout(t);\n        t = setTimeout(() => fn.apply(this, arguments), wait);\n    };\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { toggleIsRunning, tick, updateTaskTimeByVal, resetTaskTimer, toggleSoundscapeState } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport useTimer , {useTimer2}from \"../../hooks/useTimer\";\nimport { CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { ResetIcon } from \"./../../components/customIcons\";\nimport dingSound from \"./../../sounds/ding.mp3\";\nimport { BsFillPauseFill, BsFillPlayFill } from \"react-icons/bs\";\nimport { formattedTimeStringv2} from \"./../../helpers\";\n\nlet dingSoundElement = new Audio(dingSound);\n\nconst FocussedTaskDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    background-color:#FABB18;\n    width: 100%;\n    height:100%;\n    border-radius:20px;\n`;\n\nconst FocussedTaskPlayer = styled.div`\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    position: relative;\n    width: 100%;\n    height: 55%;\n    /* background-color: red; */\n`;\n\nconst FocussedTaskContent = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    text-align: center;\n    padding: 5px;\n    height: 30%;\n    width: 90%;\n    max-width: 376px;\n    border-radius: 10px;\n    border:3px solid black;\n    word-wrap: break-word;\n    text-shadow:0 0 4px rgb(248,185,23,0.4);\n    p {\n        min-width: 0;\n        font-weight: bold;\n        margin: 3px;\n    }\n    /* -webkit-box-shadow: 0 1px 8px rgb(248, 185, 23, 0.8);\n    box-shadow: 0 1px 8px rgb(248, 185, 23, 0.8); */\n    background-color: #fff;\n`;\n\n\nconst FocussedTaskTimer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 80%;\n    width: 50%;\n    /* background-color: #df1aa1; */\n`;\n\nconst CountdownTimerDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 85%;\n    height: 85%;\n    background-color: #fff;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    border-radius: 50%;\n    p {\n        margin: 0;\n        font-weight: bold;\n        color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#000\")};\n    }\n    span {\n        margin: 0 2px;\n        color: #4a4b46;\n        font-size: 0.8em;\n        font-weight: bold;\n    }\n`;\n\nconst FocussedTaskController = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n    height: 90%;\n    width: 30%;\n    /* background-color: #f1f7dd; */\n`;\n\nconst PlayPauseButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 45px;\n    height: 45px;\n    background-color: #000;\n    border-radius: 50%;\n    margin: 10px 20px;\n    svg {\n        color: #FABB18;\n        font-size: 1.6em;\n        margin-left: ${(p) => (p.isPlayBtn ? \"3px\" : \"0\")};\n    }\n    cursor: pointer;\n`;\n\nconst UpdateTimeButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 30px;\n    height: 30px;\n    cursor: pointer;\n`;\n\nconst ResetButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    background-color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#0000cd\")};\n    border-radius: 50%;\n    width: 30px;\n    height: 30px;\n    top: 5px;\n    left: 7px;\n    background-color: #000;\n    cursor: ${(p) => (p.isDisabled ? \"default\" : \"pointer\")};\n    svg {\n        color: #FABB18;\n        width: 20px;\n    }\n`;\n\nexport function FocussedTask() {\n    const focussedTaskIndex = useSelector((state) => state.tasks.meta.focussedTaskIndex);\n    let focussedTask = useSelector((state) => (focussedTaskIndex !== -1 ? state.tasks.taskArray[focussedTaskIndex] : null));\n    const dispatch = useDispatch();\n    const delay = 1010; // to account for the delay in executing code.\n    // useTimer(\n    //     () => {\n    //         if (focussedTask === null) return;\n    //         else if (focussedTask.remainingTime > 0) {\n    //             dispatch(tick(focussedTaskIndex));\n    //         } else if (focussedTask.remainingTime === 0) {\n    //             dispatch(toggleSoundscapeState(false));\n    //             dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n    //             dingSoundElement.play();\n    //         }\n    //     },\n    //     focussedTask !== null && focussedTask.isRunning ? delay : null\n    // );\n    useTimer2(\n        (deltaMS) => {\n            if (focussedTask === null) return;\n            else if (focussedTask.remainingTime > 0) {\n                dispatch(tick({focussedTaskIndex,deltaMS}));\n            } else if (focussedTask.remainingTime === 0) {\n                dispatch(toggleSoundscapeState(false));\n                dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n                dingSoundElement.play();\n            }\n        },\n        focussedTask !== null && focussedTask.isRunning ? delay : null\n    );\n\n    function updateTaskTimeHandler(val) {\n        if (focussedTask.isCompleted) return;\n        if (focussedTask.isRunning) dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n        dispatch(updateTaskTimeByVal({ focussedTaskIndex, val }));\n        dispatch(toggleSoundscapeState(false));\n    }\n\n    function playPauseHandler(focussedTaskIndex, wasTaskRunning) {\n        dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n        if (wasTaskRunning) {\n            dispatch(toggleSoundscapeState(false));\n        } else {\n            dispatch(toggleSoundscapeState(true));\n        }\n    }\n\n    const countdownObj = formattedTimeStringv2(focussedTask.remainingTime);\n    let countdownMins = countdownObj.mins;\n    let countdownSecs = countdownObj.secs;\n\n    return (\n        <FocussedTaskDiv>\n\n            <FocussedTaskPlayer>\n                <FocussedTaskTimer>\n                    <div style={{ width: 110, height: 110 }}>\n                        <CircularProgressbarWithChildren\n                            value={focussedTask.time !== 0 ? Math.floor((focussedTask.remainingTime / focussedTask.time) * 100) : 0}\n                            styles={buildStyles({\n                                strokeLinecap: \"butt\",\n                                pathColor: \"#020202\",\n                                trailColor: \"#F0F8FF\",\n                            })}\n                            strokeWidth={8}\n                        >\n                            <CountdownTimerDiv>\n                                <p>{countdownMins}</p>\n                                <span>m</span>\n                                <p>{countdownSecs}</p>\n                                <span>s</span>\n                            </CountdownTimerDiv>\n                        </CircularProgressbarWithChildren>\n                    </div>\n                </FocussedTaskTimer>\n\n                <FocussedTaskController>\n                    <UpdateTimeButtonDiv onClick={() => updateTaskTimeHandler(5)}>\n                        <h4>+5</h4>\n                    </UpdateTimeButtonDiv>\n                    <PlayPauseButtonDiv isPlayBtn={!focussedTask.isRunning} onClick={() => playPauseHandler(focussedTaskIndex, focussedTask.isRunning)}>\n                        {focussedTask.isRunning ? <BsFillPauseFill /> : <BsFillPlayFill />}\n                    </PlayPauseButtonDiv>\n\n                    <UpdateTimeButtonDiv onClick={() => updateTaskTimeHandler(-5)}>\n                        <h4>-5</h4>\n                    </UpdateTimeButtonDiv>\n                </FocussedTaskController>\n\n                <ResetButtonDiv\n                    onClick={() => {\n                        dispatch(toggleSoundscapeState(false));\n                        dispatch(resetTaskTimer(focussedTaskIndex));\n                    }}\n                >\n                    <ResetIcon />\n                </ResetButtonDiv>\n            </FocussedTaskPlayer>\n            <FocussedTaskContent>\n                <p>{focussedTask.content}</p>\n            </FocussedTaskContent>\n        </FocussedTaskDiv>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { ResetIcon } from \"./../../components/customIcons\";\nimport { FaPen } from \"react-icons/fa\";\nimport { CgNotes } from \"react-icons/cg\";\nimport ReactTooltip from \"react-tooltip\";\n\nconst FocussedTaskDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    background-color: #fabb18;\n    width: 100%;\n    height: 100%;\n    border-radius: 20px;\n`;\n\nconst FocussedTaskPlayer = styled.div`\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    position: relative;\n    width: 100%;\n    height: 55%;\n    border-radius: 10px;\n    /* background-color: #FABB18; */\n    /* box-shadow: 0 2px 10px rgba(166, 173, 201, 0.5);\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.5); */\n`;\n\nconst FocussedTaskContent = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 5px;\n    height: 30%;\n    width: 90%;\n    max-width: 376px;\n    border-radius: 10px;\n    border:3px solid black;\n    word-wrap: break-word;\n    svg {\n        font-size: 3em;\n    }\n    background-color: #fff;\n`;\n\nconst FocussedTaskTimer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 80%;\n    width: 50%;\n    /* background-color: #df1aa1; */\n`;\n\nconst CountdownTimerDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 85%;\n    height: 85%;\n    background-color: #fff;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    border-radius: 50%;\n    p {\n        margin: 0;\n        font-weight: bold;\n        color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#000\")};\n    }\n    span {\n        margin: 0 2px;\n        color: #4a4b46;\n        font-size: 0.8em;\n        font-weight: bold;\n    }\n`;\n\nconst FocussedTaskController = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n    height: 90%;\n    width: 30%;\n    /* background-color: #f1f7dd; */\n`;\n\nconst PlayPauseButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 45px;\n    height: 45px;\n    background-color: #000;\n    border-radius: 50%;\n    margin: 10px 20px;\n    svg {\n        color: #fabb18;\n        font-size: 1em;\n    }\n`;\n\nconst UpdateTimeButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 30px;\n    height: 30px;\n`;\n\nconst ResetButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    background-color: ${(p) => (p.isDisabled ? \"#c1c1d7\" : \"#0000cd\")};\n    border-radius: 50%;\n    width: 30px;\n    height: 30px;\n    top: 5px;\n    left: 7px;\n    background-color: #000;\n    svg {\n        color: #fabb18;\n        width: 20px;\n    }\n`;\n\nexport function EmptyFocusBox() {\n\n    return (\n        <FocussedTaskDiv>\n            <FocussedTaskPlayer>\n                <FocussedTaskTimer>\n                    <div style={{ width: 110, height: 110 }}>\n                        <CircularProgressbarWithChildren\n                            value={100}\n                            styles={buildStyles({\n                                pathColor: \"#020202\",\n                                trailColor: \"#F0F8FF\",\n                            })}\n                            strokeWidth={8}\n                        >\n                            <CountdownTimerDiv>\n                                <p>00</p>\n                                <span>m</span>\n                                <p>00</p>\n                                <span>s</span>\n                            </CountdownTimerDiv>\n                        </CircularProgressbarWithChildren>\n                    </div>\n                </FocussedTaskTimer>\n\n                <FocussedTaskController>\n                    <PlayPauseButtonDiv data-tip=\"\" data-for=\"Create\">\n                        <FaPen />\n                        <ReactTooltip id=\"Create\" getContent={()=>\"Focus on task\"} />\n                    </PlayPauseButtonDiv>\n                </FocussedTaskController>\n\n            </FocussedTaskPlayer>\n            <FocussedTaskContent>\n                <CgNotes />\n            </FocussedTaskContent>\n        </FocussedTaskDiv>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/bell.91678370.mp3\";","export default __webpack_public_path__ + \"static/media/piano.78d7546a.mp3\";","export default __webpack_public_path__ + \"static/media/river.fcc5ffa7.mp3\";","export default __webpack_public_path__ + \"static/media/forest.3adc2705.mp3\";","export default __webpack_public_path__ + \"static/media/alphaWave.8e5f0b7f.mp3\";","export default __webpack_public_path__ + \"static/media/bell.08f34c07.svg\";","export default __webpack_public_path__ + \"static/media/piano.4d0c5909.svg\";","export default __webpack_public_path__ + \"static/media/alphaWave.d69179ba.svg\";","export default __webpack_public_path__ + \"static/media/river.2ba3e3d5.svg\";","import bell from \"./../../sounds/bell.mp3\";\nimport piano from \"./../../sounds/piano.mp3\";\nimport river from \"./../../sounds/river.mp3\";\nimport forest from \"./../../sounds/forest.mp3\";\nimport alphaWave from \"./../../sounds/alphaWave.mp3\";\nimport ImgBell from \"./../../images/bell.svg\";\nimport ImgPiano from \"./../../images/piano.svg\";\nimport ImgAlphaWave from \"./../../images/alphaWave.svg\";\nimport ImgRiver from \"./../../images/river.svg\";\nimport ImgForest from \"./../../images/forest.svg\";\n\nexport const soundOptions = {\n    alphaWave: {\n        src: alphaWave,\n        img: ImgAlphaWave,\n        label: \"Waves\",\n    },\n    piano: {\n        src: piano,\n        img: ImgPiano,\n        label: \"Piano\",\n    },\n    bell: {\n        src: bell,\n        img: ImgBell,\n        label: \"Bell\",\n    },\n    Forest: {\n        src: forest,\n        img: ImgForest,\n        label: \"Forest\",\n    },\n    river: {\n        src: river,\n        img: ImgRiver,\n        label: \"River\",\n    },\n};\n\nexport function generateAudioElement(trackname) {\n    let audioElement = new Audio(soundOptions[trackname].src);\n    audioElement.loop = true;\n    return audioElement;\n}\n","export default __webpack_public_path__ + \"static/media/forest.b8f0f4d7.svg\";","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Slider from \"react-input-slider\";\nimport { updateSoundscapeVolume } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport { debounce } from \"./../../helpers\";\nimport styled from \"styled-components\";\n\nconst VolumeFeedbackText = styled.div`\n    span{\n        font-weight:bold;\n        font-size:0.7em;\n    }\n`;\n\nexport function MusicVolumeControl({ isDisabled }) {\n    const ssVolume = useSelector((s) => s.tasks.soundscape.volume);\n    const dispatch = useDispatch();\n    const [volume, setVolume] = useState(ssVolume * 100);\n\n    const debouncedUpdateSoundscapeVolume = debounce((vol) => {\n        dispatch(updateSoundscapeVolume(vol / 100));\n    }, 200);\n\n    function onVolumeChangeHandler(vol) {\n        setVolume(vol);\n        debouncedUpdateSoundscapeVolume(vol);\n    }\n\n    return (\n        <>\n            <Slider\n                axis=\"x\"\n                disabled={isDisabled}\n                xstep={5}\n                xmin={0}\n                xmax={100}\n                x={volume}\n                onChange={({ x }) => onVolumeChangeHandler(x)}\n                styles={{\n                    track: {\n                        backgroundColor: \"#c1c1d7\",\n                        width: \"100%\",\n                    },\n                    active: {\n                        backgroundColor: \"#FABB18\",\n                    },\n                    thumb: {\n                        backgroundColor:\"#020202\"\n                      },\n                    disabled: {\n                        opacity: 0.2,\n                    },\n                }}\n            />\n            {/* <VolumeFeedbackText>\n                <span>{volume}</span>\n            </VolumeFeedbackText> */}\n        </>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { soundOptions, generateAudioElement } from \"./musicUtils\";\nimport { changeSoundscapeTrack } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport { MusicVolumeControl } from \"./MusicVolumeControl\";\n\nconst SoundscapesContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n    border-radius: 20px;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    /* transition: box-shadow 0.2s ease-in-out,transform 0.2s ease-in-out ;\n    &:hover {\n        transform: scale(1.02);\n        -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.8);\n        box-shadow: 0 2px 10px rgba(166, 173, 201, 0.8);\n    } */\n`;\n\nconst SoundscapesDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    width: 100%;\n    height: 70%;\n    /* background-color: orange; */\n    color: #fabb18;\n    p {\n        margin: 0;\n        font-weight: bold;\n    }\n`;\n\nconst SoundOptionsDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 85%;\n    /* background-color: #f8faaa; */\n`;\n\nconst SoundOptionsInput = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    flex-direction: column;\n    /* background-color: #b16afa; */\n    height: 80%;\n    margin: 0 5px;\n    img {\n        width: 50px;\n        cursor: pointer;\n        transition: transform 0.2s;\n        &:hover {\n            transform: scale(1.2);\n        }\n    }\n    span {\n        margin: 0;\n        font-size: 0.8em;\n        font-weight: bold;\n        color: ${(p) => (p.isSelectedSound ? \"#FABB18\" : \"#4a4b46\")};\n        cursor: pointer;\n    }\n`;\n\nconst SoundVolumeControl = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    /* background-color: #cad1ff; */\n    width: 90%;\n    height: 15%;\n`;\n\nexport function Soundscapes() {\n    const soundscape = useSelector((s) => s.tasks.soundscape);\n    const dispatch = useDispatch();\n\n    const [soundscapeAudioElement, setSoundscapeAudioElement] = useState(() => generateAudioElement(soundscape.track, soundscape.volume));\n\n    // ---- danger zone: don't change without full surety , this code is prone to issues ---///\n\n    useEffect(() => {\n        soundscapeAudioElement.src = soundOptions[soundscape.track].src;\n    }, [soundscape.track, soundscapeAudioElement, soundscape.isPlaying]);\n\n    soundscapeAudioElement.volume = soundscape.volume;\n    soundscapeAudioElement.addEventListener(\"canplay\", () => {\n        if (soundscape.isPlaying) {\n            soundscapeAudioElement.play();\n        } else {\n            soundscapeAudioElement.pause();\n        }\n    });\n\n    // ---- danger zone: this might be due to my lack of knowledge of useEffect or weird Audio element behaviour ---///\n\n    function isSelectedSound(track) {\n        return soundscape.track === track;\n    }\n\n    return (\n        <SoundscapesContainer>\n            <SoundscapesDiv>\n                <p>Soundscapes</p>\n                <SoundOptionsDiv>\n                    {Object.keys(soundOptions).map((i) => (\n                        <SoundOptionsInput key={i} onClick={() => dispatch(changeSoundscapeTrack(i))} isSelectedSound={isSelectedSound(i)}>\n                            <img src={soundOptions[i].img} alt={i} />\n                            <span>{soundOptions[i].label}</span>\n                        </SoundOptionsInput>\n                    ))}\n                </SoundOptionsDiv>\n            </SoundscapesDiv>\n            <SoundVolumeControl>\n                <MusicVolumeControl />\n            </SoundVolumeControl>\n        </SoundscapesContainer>\n    );\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { BsCalendarFill } from \"react-icons/bs\";\nimport { getFormattedDate } from \"./../../helpers\";\n\nconst DayDateDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    width: 100%;\n    height: 15%;\n    background-color: #000;\n    border-radius: 10px;\n`;\n\nconst CalendarIconDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 20%;\n    svg {\n        color: #fff;\n        font-size: 1.7em;\n    }\n`;\n\nconst DayDateText = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    width: 65%;\n    font-weight: bold;\n    font-size: 0.9em;\n    color:#fff;\n    span {\n    }\n    p {\n        margin: 0;\n    }\n`;\n\nexport function DayDate() {\n    const DateObj = getFormattedDate();\n    return (\n        <DayDateDiv>\n            <DayDateText>\n                <span>\n                    {DateObj.day} {DateObj.date}\n                </span>\n                <p>\n                    {DateObj.month} {DateObj.year}\n                </p>\n            </DayDateText>\n            <CalendarIconDiv>\n                <BsCalendarFill />\n            </CalendarIconDiv>\n        </DayDateDiv>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { FocussedTask } from \"./../../components/FocusBoard/FocussedTask\";\nimport { EmptyFocusBox } from \"./../../components/FocusBoard/EmptyFocusBox\";\nimport { Soundscapes } from \"./../../components/MusicBox/Soundscapes\";\nimport { DayDate } from \"../../components/FocusBoard/DayDate\";\n\nconst FocusBoardContainer = styled.div`\n    flex: 1 1 0;\n    min-width: 346px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin:0 0 0 20px;\n    height:100%;\n    /* background-color:silver; */\n`;\n\nconst FocussedTaskContainer = styled.div`\n    display: flex;\n    align-items:center;\n    justify-content: space-between;\n    flex-direction: column;\n    width: 90%;\n    max-width: 376px;\n    height: 276px;\n    margin: 10px 0;\n    /* background-color: green; */\n`;\n\nconst MusicBoxContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    width: 90%;\n    max-width: 376px;\n    height: 200px;\n    margin: 10px 0;\n    /* border-radius: 10px;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    background-color: #f7f7fa; */\n`;\n\nexport function FocusBoard() {\n    const focussedTaskIndex = useSelector((state) => state.tasks.meta.focussedTaskIndex);\n    const totalTasksCount = useSelector((s) => s.tasks.taskArray.length);\n    return (\n        <FocusBoardContainer>\n            <FocussedTaskContainer>\n                {/* <DayDate /> */}\n                {focussedTaskIndex !== -1 ? <FocussedTask /> : <EmptyFocusBox />}\n            </FocussedTaskContainer>\n            <MusicBoxContainer>\n                <Soundscapes />\n            </MusicBoxContainer>\n        </FocusBoardContainer>\n    );\n}\n","import React, { useState } from \"react\";\nimport ReactTooltip from \"react-tooltip\";\nimport { ImPieChart } from \"react-icons/im\";\nimport styled from \"styled-components\";\n\nconst EmptyLabelPieDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 180px;\n    svg {\n        color: #fff;\n        font-size: 8em;\n    }\n`;\n\nexport function EmptyLabelPie() {\n    return (\n        <EmptyLabelPieDiv data-tip=\"\" data-for=\"EmptyLabelPie\">\n            <ImPieChart />\n            <ReactTooltip id=\"EmptyLabelPie\" getContent={() => \"Tasks/Labels Pie\"} />\n        </EmptyLabelPieDiv>\n    );\n}\n","import React, { useState } from \"react\";\nimport { PieChart } from \"react-minimal-pie-chart\";\nimport { useSelector } from \"react-redux\";\nimport ReactTooltip from \"react-tooltip\";\nimport { EmptyLabelPie } from \"./EmptyLabelPie\";\n\nexport function LabelPie() {\n    const labels = useSelector((s) => s.tasks.labels);\n    const totalTasksCount = useSelector((s) => s.tasks.taskArray.length);\n\n    const [selected, setSelected] = useState(0);\n    const [hovered, setHovered] = useState(undefined);\n\n    let labelledTasksCount = 0;\n\n    let labelData = Object.keys(labels).reduce((filtered, i) => {\n        if (labels[i].count > 0) {\n            labelledTasksCount += labels[i].count;\n            filtered.push({\n                tooltip: `#${i} - ${labels[i].count} tasks`,\n                value: labels[i].count,\n                color: labels[i].color,\n            });\n        }\n        return filtered;\n    }, []);\n\n    if (totalTasksCount - labelledTasksCount > 0) {\n        labelData.push({\n            tooltip: `No Label - ${totalTasksCount - labelledTasksCount} tasks`,\n            value: totalTasksCount - labelledTasksCount,\n            color: \"#fff\",\n        });\n    }\n\n    labelData = labelData.map((i, idx) => {\n        if (hovered === idx) {\n            i.color = \"#FABB18\";\n            return i;\n        } else return i;\n    });\n\n    const lineWidth = 60;\n\n    return (\n        <div style={{ width: 180 }} data-tip=\"\" data-for=\"LabelPieChart\">\n            {labelledTasksCount !== 0 ? (\n                <PieChart\n                    style={{\n                        fontSize: \"12px\",\n                        fontWeight: \"bold\",\n                    }}\n                    data={labelData}\n                    radius={PieChart.defaultProps.radius - 6}\n                    lineWidth={lineWidth}\n                    segmentsStyle={{ transition: \"stroke .3s\", cursor: \"pointer\" }}\n                    segmentsShift={2}\n                    animate\n                    label={({ dataEntry }) => dataEntry.value}\n                    labelPosition={100 - lineWidth / 2}\n                    labelStyle={{\n                        fill: \"#fff\",\n                        pointerEvents: \"none\",\n                    }}\n                    onClick={(_, index) => {\n                        setSelected(index === selected ? undefined : index);\n                    }}\n                    onMouseOver={(_, index) => {\n                        setHovered(index);\n                    }}\n                    onMouseOut={() => {\n                        setHovered(undefined);\n                    }}\n                />\n            ) : (\n                <EmptyLabelPie />\n            )}\n            <ReactTooltip id=\"LabelPieChart\" getContent={() => (typeof hovered === \"number\" ? labelData[hovered].tooltip : null)} />\n        </div>\n    );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { buildStyles, CircularProgressbarWithChildren, CircularProgressbar } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport styled from \"styled-components\";\n\nconst ProgressRingBox = styled.div`\n    display: flex;\n    flex-direction:column;\n    justify-content: space-around;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n`;\n\nconst ProgressRingDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 90%;\n    height: 55%;\n    /* background-color:#afa1d1; */\n`;\n\nconst ProgressRingLegendDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    width: 80%;\n    height: 30%;\n    /* background-color: #1fadef; */\n    color: #FABB18;\n    font-weight: bold;\n    p {\n        margin: 3px 0;\n        font-size: 0.9em;\n        letter-spacing: 2;\n    }\n`;\n\nconst LegendDataDiv = styled.div`\n    display: flex;\n    align-items: center;\n    width: 95%;\n    /* background-color: #fdadef; */\n    margin: 4px 0;\n    color: #000;\n`;\n\nconst TextDiv = styled.div`\n    font-weight: bold;\n    font-size: 0.8em;\n    p {\n        margin: 0 5px;\n    }\n`;\n\nconst PercentTextDiv = styled.div`\n    font-weight: bold;\n    font-size: 0.8em;\n    margin-left: auto;\n    color: #000;\n`;\n\nconst LegendColorDot = styled.div`\n    width: 12px;\n    height: 12px;\n    background-color: ${(p) => p.color};\n    border-radius: 50%;\n`;\n\nexport function ProgressRings() {\n    const completedTasksCount = useSelector((s) => s.tasks.meta.completedTasksCount);\n    const totalTasksCount = useSelector((s) => s.tasks.taskArray.length);\n    let taskCompletionPercent = totalTasksCount !== 0 ? Math.floor((completedTasksCount / totalTasksCount) * 100) : 100;\n\n    const remainingTaskListTime = useSelector((s) => s.tasks.meta.remainingTaskListTime);\n    const totalTaskListTime = useSelector((s) => s.tasks.meta.totalTaskListTime);\n    let timeCompletionPercent = totalTaskListTime !== 0 ? Math.floor(((totalTaskListTime - remainingTaskListTime) / totalTaskListTime) * 100) : 100;\n\n    return (\n        <ProgressRingBox>\n            <ProgressRingDiv>\n                <div style={{ width: 130, height: 130 }}>\n                    <CircularProgressbarWithChildren\n                        value={taskCompletionPercent}\n                        styles={buildStyles({\n                            pathColor: \"#77dd77\",\n                            trailColor: \"#FFE39E\",\n                        })}\n                        strokeWidth={10}\n                    >\n                        <div style={{ width: 90, height: 90 }}>\n                            <CircularProgressbar\n                                value={timeCompletionPercent}\n                                styles={buildStyles({\n                                    pathColor: \"#0000cd\",\n                                    trailColor: \"#FFE39E\",\n                                })}\n                                strokeWidth={14}\n                            />\n                        </div>\n                    </CircularProgressbarWithChildren>\n                </div>\n            </ProgressRingDiv>\n            <ProgressRingLegendDiv>\n                <p>Progress</p>\n                <LegendDataDiv>\n                    <LegendColorDot color=\"#77dd77\" />\n                    <TextDiv>\n                        <p>\n                            tasks\n                        </p>\n                    </TextDiv>\n\n                    <PercentTextDiv>\n                        <span>{totalTasksCount===0? \"--\":`${taskCompletionPercent}%`}</span>\n                    </PercentTextDiv>\n                </LegendDataDiv>\n                <LegendDataDiv>\n                    <LegendColorDot color=\"#0000cd\" />\n                    <TextDiv>\n                        <p>time</p>\n                    </TextDiv>\n                    <PercentTextDiv>\n                    <span>{totalTasksCount===0? \"--\":`${timeCompletionPercent}%`}</span>\n                    </PercentTextDiv>\n                </LegendDataDiv>\n            </ProgressRingLegendDiv>\n        </ProgressRingBox>\n    );\n}\n","import React from \"react\";\nimport styled , {css} from \"styled-components\";\nimport { useSelector } from \"react-redux\";\nimport { getFormattedListTimeSummary } from \"../../helpers\";\nimport { SummaryCardClock } from \"./../customIcons\";\n\nconst ProgressCard = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    position: relative;\n    width: 95%;\n    height: 45%;\n    border-radius: 10px;\n    border-left: 8px solid #0000cd;\n    /* -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4); */\n    background-color: #f0f8ff;\n`;\n\nconst ProgressCardText = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    width: 85%;\n    height: 45%;\n    /* background-color: #d1effa; */\n    span {\n        color: #4a4b46;\n        font-weight: bold;\n        font-size: 0.6em;\n    }\n`;\n\nconst FormattedTimeDiv = styled.div`\n    display: flex;\n    align-items: center;\n    p {\n        margin: 0;\n        font-weight: bold;\n        font-size: 1.2em;\n    }\n    span {\n        margin: 0 3px;\n        font-size: 0.6em;\n    }\n`;\n\nconst absoluteIconStyles = css`\n    position: absolute;\n    top: 5px;\n    right: 5px;\n`;\n\nconst ClockIconDiv = styled.div`\n    width:${(p) => (p.noTasks ? \"45%\" : \"25px\")};\n    ${(p) => (p.noTasks ? \"\" : absoluteIconStyles)}\n    svg {\n        color: #0000cd;\n        opacity: ${(p) => (p.noTasks ? \"0.7\" : 1)};\n    }\n`;\n\nexport function TimeProgressCard() {\n    const totalTaskListTime = useSelector((state) => state.tasks.meta.totalTaskListTime);\n    const remainingTaskListTime = useSelector((state) => state.tasks.meta.remainingTaskListTime);\n\n    const rTLTObj = getFormattedListTimeSummary(remainingTaskListTime);\n    let rTLTHours = rTLTObj.hours;\n    let rTLTMins = rTLTObj.mins;\n\n    const tTLTObj = getFormattedListTimeSummary(totalTaskListTime);\n    let tTLTHours = tTLTObj.hours;\n    let tTLTMins = tTLTObj.mins;\n    return (\n        <ProgressCard>\n            {totalTaskListTime !== 0 && (\n                <>\n                    <ProgressCardText>\n                        <FormattedTimeDiv>\n                            <p>{rTLTHours}</p>\n                            <span>h</span>\n                            <p>{rTLTMins}</p>\n                            <span>m</span>\n                        </FormattedTimeDiv>\n\n                        <span>remaining time</span>\n                    </ProgressCardText>\n                    <ProgressCardText>\n                        <FormattedTimeDiv>\n                            <p>{tTLTHours}</p>\n                            <span>h</span>\n                            <p>{tTLTMins}</p>\n                            <span>m</span>\n                        </FormattedTimeDiv>\n                        <span>total time</span>\n                    </ProgressCardText>\n                </>\n            )}\n            <ClockIconDiv noTasks={totalTaskListTime === 0}>\n                <SummaryCardClock />\n            </ClockIconDiv>\n        </ProgressCard>\n    );\n}\n","import React from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { useSelector } from \"react-redux\";\nimport { SummaryCardTick } from \"./../customIcons\";\n\nconst ProgressCard = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    position: relative;\n    width: 95%;\n    height: 45%;\n    border-radius: 10px;\n    border-left: 8px solid #77dd77;\n    /* -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4); */\n    background-color: #f0fff0;\n`;\n\nconst ProgressCardText = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    width: 85%;\n    height: 45%;\n    /* background-color: #d1effa; */\n    font-weight: bold;\n    p {\n        font-size: 1.4em;\n        margin: 0;\n    }\n    span {\n        color: #4a4b46;\n        font-size: 0.6em;\n    }\n`;\n\nconst absoluteIconStyles = css`\n    position: absolute;\n    top: 5px;\n    right: 5px;\n`;\n\nconst TickIconDiv = styled.div`\n    width: ${(p) => (p.noTasks ? \"45%\" : \"25px\")};\n    ${(p) => (p.noTasks ? \"\" : absoluteIconStyles)}\n    svg {\n        color: #77dd77;\n        opacity: ${(p) => (p.noTasks ? \"0.7\" : 1)};\n    }\n`;\n\nexport function TaskProgressCard() {\n    const completedTasksCount = useSelector((s) => s.tasks.meta.completedTasksCount);\n    const totalTasksCount = useSelector((s) => s.tasks.taskArray.length);\n\n    return (\n        <ProgressCard>\n            {totalTasksCount !== 0 && (\n                <>\n                    <ProgressCardText>\n                        <p>{completedTasksCount}</p>\n                        <span>done tasks</span>\n                    </ProgressCardText>\n                    <ProgressCardText>\n                        <p>{totalTasksCount}</p>\n                        <span>total tasks</span>\n                    </ProgressCardText>\n                </>\n            )}\n\n            <TickIconDiv noTasks={totalTasksCount === 0}>\n                <SummaryCardTick />\n            </TickIconDiv>\n        </ProgressCard>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { LabelPie } from \"./../../components/MiscBoard/LabelPie\";\nimport { ProgressRings } from \"./../../components/MiscBoard/ProgressRings\";\nimport {TimeProgressCard} from \"./../../components/MiscBoard/TimeProgressCard\";\nimport {TaskProgressCard} from \"./../../components/MiscBoard/TaskProgressCard\";\n\nconst MiscBoardContainer = styled.div`\n    flex: 1 1 0;\n    min-width: 346px;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    justify-content: center;\n    height:100%;\n    /* background-color:orange; */\n`;\n\n\nconst MainSummaryContainer = styled.div`\n    display: flex;\n    align-items:center;\n    justify-content:space-around;\n    width: 90%;\n    max-width: 376px;\n    height: 276px;\n    margin: 10px 0;\n    border-radius:20px;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    /* backface-visibility: hidden;\n    transform: translateZ(0);\n    transition: box-shadow 0.2s ease-in-out,transform 0.2s ease-in-out ;\n    &:hover {\n        transform: scale(1.02);\n        -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.8);\n        box-shadow: 0 2px 10px rgba(166, 173, 201, 0.8);\n    } */\n`;\n\nconst ProgressRingContainer = styled.div`\n    display: flex;\n    width: 45%;\n    height: 85%;\n    border-radius: 10px;\n    /* -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    background-color: #f7f7fa; */\n`;\n\nconst ProgressCardContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n    width: 35%;\n    height: 85%;\n    border-radius: 10px;\n    /* -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4); */\n    /* background-color: #f7adfa; */\n`;\n\nconst LabelPieContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 50%;\n    max-width:220px;\n    height: 200px;\n    margin: 10px 0;\n    border-radius: 10px;\n    background-color: #020202;\n    /* transition:transform 0.2s ease-in-out ;\n    &:hover {\n        transform: scale(1.02);\n    } */\n`;\n\n\nexport function MiscBoard() {\n    return (\n        <MiscBoardContainer>\n            <MainSummaryContainer>\n                <ProgressRingContainer>\n                    <ProgressRings />\n                </ProgressRingContainer>\n                <ProgressCardContainer>\n                    <TaskProgressCard/>\n                    <TimeProgressCard/>\n                </ProgressCardContainer>\n            </MainSummaryContainer>\n\n            <LabelPieContainer>\n                <LabelPie />\n            </LabelPieContainer>\n        </MiscBoardContainer>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { FocusBoard } from \"../focusBoard/FocusBoard\";\nimport { MiscBoard } from \"../miscBoard/MiscBoard\";\n\nconst DashboardMainContainer = styled.div`\n    flex: 4 1 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    /* background-color: red; */\n`;\n\nexport function DashboardMain() {\n    return (\n        <DashboardMainContainer>\n            <MiscBoard />\n            <FocusBoard />\n        </DashboardMainContainer>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {DashboardHero} from \"./DashboardHero\";\nimport {DashboardMain} from \"./DashboardMain\";\n\nconst DashboardContainer = styled.div`\n    flex: 2 1 0;\n    display: flex;\n    flex-direction: column;\n    border-radius: 0 20px 20px 0;\n    background-color:#fff;\n    -webkit-box-shadow:2px 0 5px -2px rgba(166, 173, 201,0.8);\n    box-shadow: 2px 0 5px -2px rgba(166, 173, 201,0.8);\n`;\n\nexport default function Dashboard() {\n    return (\n        <DashboardContainer>\n            <DashboardHero />\n            <DashboardMain />\n        </DashboardContainer>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/bulb.b245cbae.svg\";","export default __webpack_public_path__ + \"static/media/glowBulb.b782ade4.svg\";","export default __webpack_public_path__ + \"static/media/tickmark.efd5763f.svg\";","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\n\nconst TaskSelectInput = styled.select`\n    font-weight: bold;\n    text-align: center;\n    border:0;\n    background-color:#fff;\n    option{\n        font-weight:bold;\n    }\n`;\n\nexport default function TaskLabel(p) {\n    const labels = useSelector((s) => s.tasks.labels);\n    const [updatedLabel, setUpdatedLabel] = useState(p.taskLabel);\n\n    return (\n        // <div style={{ height: \"100%\", width: 80 }}>\n        <TaskSelectInput\n        autoFocus\n            name=\"labels\"\n            onBlur={() => p.onBlur(p.taskId,p.taskLabel, updatedLabel)}\n            defaultValue={updatedLabel}\n            onChange={(e) => setUpdatedLabel(e.target.value)}\n            onKeyDown={(e) => (e.key === \"Enter\" ? p.onBlur(p.taskId,p.taskLabel, updatedLabel) : null)}\n        >\n            <option value=\"none\">none</option> \n            {/* keeping option:none at top makes it show up if taskLabel is null which is desired */}\n            {Object.keys(labels).map((e, idx) => (\n                <option style={{color:`${labels[e].color}`}} key={idx} value={e}>\n                    {e}\n                </option>\n            ))}\n        </TaskSelectInput>\n        // </div>\n    );\n}\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { remove, updateTaskContent, toggleIsCompleted, rearrange, updateTaskTime } from \"../../containers/taskBoard/taskBoardSlice\";\nimport { focusOnTask, resetFocussedTask, toggleIsRunning, updateTaskLabel, updateLabelCount , toggleSoundscapeState} from \"../../containers/taskBoard/taskBoardSlice\";\nimport styled from \"styled-components\";\nimport { BsTrash } from \"react-icons/bs\";\nimport { Flipped } from \"react-flip-toolkit\";\nimport { GrDrag } from \"react-icons/gr\";\nimport { formattedTimeString } from \"../../helpers\";\nimport bulb from \"./../../images/bulb.svg\";\nimport glowBulb from \"./../../images/glowBulb.svg\";\nimport tickmark from \"./../../images/tickmark.svg\";\nimport TaskLabelSelect from \"./../../components/TaskBoard/TaskLabelSelect\";\n\nconst TaskCardContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    width: 376px; // % not working here (maybe due to animation library wrappers)\n    height: 110px;\n    margin-top: 15px;\n    cursor:default !important;\n    /* background-color: #fff4e1; */\n`;\n\nconst TaskCardDragIcon = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    width: 5%;\n    height: 100%;\n    /* background-color: #ff09ac; */\n    svg {\n        cursor: url(\"https://ssl.gstatic.com/ui/v1/icons/mail/images/2/openhand.cur\"), default !important;\n        opacity: 0.7;\n    }\n`;\n\nconst getTaskCardDivBorderLabelColor = (labelColor) => (labelColor !== null ? `7px solid ${labelColor}` : \"none\");\n\nconst TaskCardDiv = styled.div`\n    display: flex;\n    justify-content: space-around;\n    flex-direction: row;\n    height: 100%;\n    width: 90%;\n    border-radius: 10px;\n    border-right: ${(p) => getTaskCardDivBorderLabelColor(p.labelColor)};\n    background-color: #fff;\n    -webkit-box-shadow: ${(p) => (p.isFocussed ? \"0 0 14px rgb(248,185,23,0.8)\" : \"0 2px 10px rgba(166,173,201,0.4)\")};\n    box-shadow: ${(p) => (p.isFocussed ? \"0 0 14px rgb(248,185,23,0.8)\" : \"0 2px 10px rgba(166,173,201,0.4)\")};\n`;\n\nconst TaskStatusDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    width: 15%;\n    /* background-color: #f8f8ff; */\n    position: relative;\n    p {\n        margin: 5px;\n        font-weight: bold;\n        font-size: 0.7em;\n        cursor: text;\n    }\n    img {\n        width: ${(p) => (p.isCompleted ? \"35px\" : \"60px\")};\n    }\n`;\n\nconst TaskDetailsDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    height: 100%;\n    width: 75%;\n    /* margin: 0 0 0 10px; */\n    /* background-color: #fff1fc; */\n`;\n\nconst TaskContentDiv = styled.div`\n    display: flex;\n    align-items: center;\n    height: 65%;\n    margin: 0 0 0 5px;\n    word-wrap: break-word;\n    /* background-color: #fffcec; */\n    p {\n        font-size: 0.9em;\n        font-weight: bold;\n        min-width: 0;\n        cursor: text;\n    }\n`;\n\nconst TaskEditInput = styled.textarea`\n    resize: none;\n    height: 90%;\n    width: 100%;\n    font-size: 0.9em;\n    overflow: hidden;\n    vertical-align: center;\n    font-weight: bold;\n    &:focus {\n        outline: none;\n        border: 2px #4a4b46 dashed;\n        border-radius: 5px;\n    }\n`;\n\nconst TimeEditInput = styled.input`\n    height: 15px;\n    width: 30px;\n    margin-top: 5px;\n    text-align: center;\n    font-weight: bold;\n    &:focus {\n        outline: none;\n        border: 2px #4a4b46 dashed;\n        border-radius: 2px;\n    }\n`;\n\nconst TaskActionButton = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    border-radius: 5px;\n    margin: 4px;\n    cursor: pointer;\n    &:hover {\n        background-color: #FABB18;\n        p {\n            color: #fff;\n        }\n    }\n    p {\n        margin: 5px;\n        font-weight: bold;\n        font-size: 0.65em;\n    }\n`;\n\nconst TaskLabelContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    border-radius: 5px;\n    margin: 4px;\n    cursor: pointer;\n    &:hover {\n        background-color: #f7f7fa;\n    }\n    p {\n        margin: 5px;\n        color: ${(p) => (p.labelColor !== null ? p.labelColor : \"#c1c1d7\")};\n        font-weight: bold;\n        font-size: 0.65em;\n    }\n`;\n\nconst TaskDeleteButton = styled.div`\n    height: 80%;\n    cursor: pointer;\n    margin-left: auto;\n    color: #FABB18;\n    &:hover {\n        color: red;\n    }\n`;\n\nconst TaskControllerDiv = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    height: 25%;\n    /* background-color: #fffa91; */\n    svg {\n        font-size: 0.8em;\n        margin: 5px;\n    }\n`;\n\nfunction previewTask(str) {\n    if (str.length <= 60) return str;\n    else return str.substring(0, 60) + \"...\";\n}\n\nexport default function TaskCard({ task, taskIndex, focussedTaskGlobalKey, forwardRBDProvided, isFocussed, focussedTaskIndex }) {\n    const dispatch = useDispatch();\n\n    const [taskUnderEdit, setTaskUnderEdit] = useState(false);\n    const [updatedTaskContent, setUpdatedTaskContent] = useState(task.content);\n    const [timeUnderEdit, setTimeUnderEdit] = useState(false);\n    const [updatedTime, setUpdatedTime] = useState(Math.floor(task.time / 1000/60));\n    const [labelUnderEdit, setLabelUnderEdit] = useState(false);\n    const [showDragIcon, setShowDragIcon] = useState(false);\n\n    const labels = useSelector((s) => s.tasks.labels);\n\n    function submitUpdatedTaskContent(e) {\n        if (e.key === \"Enter\" && updatedTaskContent.trim().length >= 3) {\n            dispatch(updateTaskContent({ id: task.id, updatedTaskContent }));\n            setTaskUnderEdit(false);\n        }\n    }\n    function submitUpdatedTime(e) {\n        if (e.key === \"Enter\") {\n            dispatch(updateTaskTime({ id: task.id, updatedTime }));\n            setTimeUnderEdit(false);\n        }\n    }\n\n    function labelSelectOnBlurHandler(taskId, taskLabel, updatedLabel) {\n        setLabelUnderEdit(false);\n        updatedLabel = updatedLabel === \"none\" ? null : updatedLabel;\n        dispatch(updateTaskLabel({ id: taskId, label: updatedLabel }));\n        if (taskLabel !== updatedLabel) dispatch(updateLabelCount({ oldLabel: taskLabel, newLabel: updatedLabel }));\n    }\n\n    return (\n        <Flipped flipId={`${task.id}`}>\n            <TaskCardContainer\n                ref={forwardRBDProvided.innerRef}\n                {...forwardRBDProvided.draggableProps}\n                {...forwardRBDProvided.dragHandleProps}\n                onMouseEnter={() => setShowDragIcon(!task.isCompleted && true)}\n                onMouseLeave={() => setShowDragIcon(!task.isCompleted && false)}\n            >\n                <TaskCardDragIcon>{showDragIcon && <GrDrag />}</TaskCardDragIcon>\n\n                <TaskCardDiv isFocussed={isFocussed} labelColor={task.label !== null ? labels[task.label].color : null}>\n                    <TaskStatusDiv isFocussed={isFocussed} isCompleted={task.isCompleted}>\n                        {task.isCompleted ? (\n                            <img src={tickmark} alt=\"Done\" />\n                        ) : isFocussed ? (\n                            <img src={glowBulb} alt=\"Focussed\" />\n                        ) : (\n                            <img src={bulb} alt=\"Unfocussed\" />\n                        )}\n                        {!task.isCompleted &&\n                            (timeUnderEdit ? (\n                                <TimeEditInput\n                                    autoFocus\n                                    value={updatedTime}\n                                    onBlur={() => {\n                                        dispatch(updateTaskTime({ id: task.id, updatedTime }));\n                                        setTimeUnderEdit(false);\n                                    }}\n                                    onKeyDown={submitUpdatedTime}\n                                    onChange={(e) => setUpdatedTime(e.target.value)}\n                                />\n                            ) : (\n                                <p onDoubleClick={() => setTimeUnderEdit(true)}>{formattedTimeString(task.remainingTime)}</p>\n                            ))}\n                    </TaskStatusDiv>\n\n                    <TaskDetailsDiv>\n                        <TaskContentDiv>\n                            {taskUnderEdit ? (\n                                <TaskEditInput\n                                    autoFocus\n                                    value={updatedTaskContent}\n                                    onBlur={() => {\n                                        dispatch(updateTaskContent({ id: task.id, updatedTaskContent }));\n                                        setTaskUnderEdit(false);\n                                    }}\n                                    onKeyDown={submitUpdatedTaskContent}\n                                    onChange={(e) => setUpdatedTaskContent(e.target.value)}\n                                />\n                            ) : (\n                                <p onDoubleClick={() => setTaskUnderEdit(true)}>{previewTask(task.content)}</p>\n                            )}\n                        </TaskContentDiv>\n\n                        <TaskControllerDiv>\n                            {!task.isCompleted && (\n                                <TaskActionButton\n                                    isDoneBtn={false}\n                                    onClick={\n                                        isFocussed\n                                            ? () => {\n                                                  if (task.isRunning) dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n                                                  dispatch(resetFocussedTask());\n                                                  dispatch(toggleSoundscapeState(false));\n                                              }\n                                            : () => {\n                                                  if (focussedTaskIndex !== -1) dispatch(toggleIsRunning({ idx: focussedTaskIndex, val: false }));\n                                                  dispatch(toggleSoundscapeState(false));\n                                                  dispatch(focusOnTask(taskIndex));\n                                              }\n                                    }\n                                >\n                                    <p>{isFocussed ? \"Unfocus\" : \"Focus\"}</p>\n                                </TaskActionButton>\n                            )}\n\n                            <TaskActionButton\n                                isDoneBtn={true}\n                                onClick={\n                                    task.isCompleted\n                                        ? (e) => {\n                                              if (focussedTaskIndex !== -1 && focussedTaskGlobalKey < task.globalKey) {\n                                                  dispatch(focusOnTask(focussedTaskIndex + 1));\n                                              }\n                                              dispatch(toggleIsCompleted(task.id));\n                                              dispatch(rearrange({ id: task.id, markedAsComplete: false }));\n                                              e.stopPropagation();\n                                          }\n                                        : (e) => {\n                                              if (taskIndex < focussedTaskIndex) dispatch(focusOnTask(focussedTaskIndex - 1));\n                                              if (task.isRunning) dispatch(toggleIsRunning({ idx: taskIndex }));\n                                              if (isFocussed) dispatch(resetFocussedTask());\n                                              dispatch(toggleIsCompleted(task.id));\n                                              dispatch(rearrange({ id: task.id, markedAsComplete: true }));\n                                              if(taskIndex===focussedTaskIndex)dispatch(toggleSoundscapeState(false));\n                                              e.stopPropagation();\n                                          }\n                                }\n                            >\n                                <p>{task.isCompleted ? \"Undone\" : \"Done\"}</p>\n                            </TaskActionButton>\n\n                            <TaskLabelContainer onClick={() => setLabelUnderEdit(true)} labelColor={task.label !== null ? labels[task.label].color : null}>\n                                {labelUnderEdit ? (\n                                    <TaskLabelSelect onBlur={labelSelectOnBlurHandler} taskId={task.id} taskLabel={task.label} />\n                                ) : task.label !== null ? (\n                                    <p>#{task.label}</p>\n                                ) : (\n                                    <p>Add label</p>\n                                )}\n                            </TaskLabelContainer>\n\n                            {!isFocussed && (\n                                <TaskDeleteButton\n                                    onClick={(e) => {\n                                        if (taskIndex < focussedTaskIndex) dispatch(focusOnTask(focussedTaskIndex - 1));\n                                        dispatch(remove(task.id));\n                                        if (task.label !== null) dispatch(updateLabelCount({ oldLabel: task.label, newLabel: null }));\n                                        e.stopPropagation();\n                                    }}\n                                >\n                                    <BsTrash />\n                                </TaskDeleteButton>\n                            )}\n                        </TaskControllerDiv>\n                    </TaskDetailsDiv>\n                </TaskCardDiv>\n            </TaskCardContainer>\n        </Flipped>\n    );\n}\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { create, incrementGlobalKey, focusOnTask, updateLabelCount } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport styled from \"styled-components\";\nimport { AiFillPlusCircle, AiFillClockCircle } from \"react-icons/ai\";\n\n\nconst TaskInputContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin: 20px 0;\n    width: 90%;\n    max-width:396px;\n    border-radius: 10px;\n    background-color: #fff;\n    height: 50px;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\n`;\n\nconst TaskContentInputDiv = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    height: 90%;\n    width: 70%;\n    margin-left: 10px;\n    svg {\n        font-size: 1.3em;\n        margin-right: 5px;\n        color: #FABB18;\n    }\n`;\n\nconst TaskContentInputField = styled.input`\n    height: 100%;\n    width: 90%;\n    font-size: 0.9em;\n    background-color: #fff;\n    border: 0;\n    outline: none;\n    font-weight: bold;\n    &::placeholder {\n        color: #c1c1d7;\n    }\n`;\n\nconst TaskTimeInputDiv = styled.div`\n    display: flex;\n    align-items: center;\n    height: 90%;\n    width: 25%;\n    color: #c1c1d7;\n    span {\n        font-size: 0.7em;\n        font-weight: bold;\n    }\n    svg {\n        font-size: 1.2em;\n        color: #FABB18;\n    }\n`;\n\nconst TaskTimeInputField = styled.input`\n    height: 100%;\n    width: 30%;\n    font-size: 0.9em;\n    text-align: center;\n    background-color: #fff;\n    border: 0;\n    outline: none;\n    font-weight: bold;\n    &::placeholder {\n        color: #c1c1d7;\n    }\n    &::-webkit-inner-spin-button,\n    &::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        appearance: none;\n        margin: 0;\n    }\n`;\n\nexport default function TaskInput() {\n    const [task, setTask] = useState(\"\");\n    const [time, setTime] = useState(20);\n    let taskContentInputRef, taskTimeInputRef;\n    const meta = useSelector((s) => s.tasks.meta);\n    const labels = useSelector((s) => s.tasks.labels);\n    const dispatch = useDispatch();\n\n    function submitTask(e) {\n        if (e.key === \"Enter\" && task.trim().length >= 1) {\n            let temp = task.trim().split(\" \");\n            // add a max time limit\n            let taskTime = time;\n            let label = null;\n            if (temp.length !== 1) {\n                if (!isNaN(parseInt(temp[temp.length - 1]))) {\n                    taskTime = parseInt(temp.pop());\n                } else if (temp[temp.length - 1][0] === \"#\" && temp[temp.length - 1].length > 1 && \"wpfmeWPFME\".includes(temp[temp.length - 1][1])) {\n                    let userLabel = temp[temp.length - 1].substring(1).toLowerCase();\n                    let found = false;\n                    for (let validLabel in labels) {\n                        found = validLabel.includes(userLabel);\n                        console.log(userLabel,validLabel)\n                        if (found) {\n                            label = validLabel;\n                            temp.pop();\n                            break;\n                        }\n                    }\n                }\n            }\n\n            temp = temp.join(\" \");\n            let newTask = {\n                id: Math.floor(Math.random() * 10000),\n                globalKey: meta.globalKey,\n                content: temp,\n                time: taskTime,\n                remainingTime: taskTime,\n                isRunning: false,\n                isCompleted: false,\n                createdAt: new Date().toISOString(),\n                label: label,\n            };\n            if (meta.focussedTaskIndex !== -1) dispatch(focusOnTask(meta.focussedTaskIndex + 1));\n            dispatch(create(newTask));\n            dispatch(incrementGlobalKey());\n            if (label !== null) dispatch(updateLabelCount({ oldLabel: null, newLabel: label }));\n            setTask(\"\");\n            setTime(20);\n            taskContentInputRef.value = \"\";\n            taskTimeInputRef.value = \"\";\n            taskContentInputRef.focus();\n        }\n    }\n\n    return (\n        <TaskInputContainer>\n            <TaskContentInputDiv>\n                <AiFillPlusCircle onClick={() => taskContentInputRef.focus()} />\n                <TaskContentInputField\n                    type=\"text\"\n                    placeholder=\"i have to focus on ...\"\n                    ref={(el) => (taskContentInputRef = el)}\n                    onChange={(e) => setTask(e.target.value)}\n                    onKeyDown={submitTask}\n                />\n            </TaskContentInputDiv>\n            <TaskTimeInputDiv>\n                <AiFillClockCircle onClick={() => taskTimeInputRef.focus()} />\n                <TaskTimeInputField\n                    type=\"number\"\n                    placeholder=\"20\"\n                    ref={(el) => (taskTimeInputRef = el)}\n                    onChange={(e) => setTime(e.target.value)}\n                    onKeyDown={submitTask}\n                />\n                <span>mins</span>\n            </TaskTimeInputDiv>\n        </TaskInputContainer>\n    );\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { BiShow, BiHide } from \"react-icons/bi\";\nimport { AiOutlineClear } from \"react-icons/ai\";\nimport { Flipped } from \"react-flip-toolkit\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { clearCompletedTasks, toggleShowCompletedTasks } from \"./../../containers/taskBoard/taskBoardSlice\";\n\nconst DoneTasksDivider = styled.div`\n    display: flex;\n    margin: 15px 0 15px 25px;\n`;\nconst DividerLine = styled.div`\n    width: 100%;\n    position: relative;\n    margin: 15px;\n    border-bottom: 3px solid #FABB18;\n`;\n\nconst DividerIcon = styled.div`\n    width: 90px;\n    position: relative;\n    top: 3px;\n    color: #FABB18;\n    p {\n        margin: 0;\n        font-weight: bold;\n        letter-spacing:${(p)=>p.showCompletedTasks?\"3px\":\"1px\"};\n    }\n`;\n\nconst DividerActionDiv = styled.div`\n    display: flex;\n    width: 70px;\n    height: 30px;\n    justify-content: space-around;\n    align-items: center;\n    border-radius: 5px;\n    background-color: #fff;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    svg {\n        color: #FABB18;\n        cursor:pointer;\n    }\n`;\n\nexport default function Divider() {\n    const [showActionBtn, setShowActionBtn] = useState(false);\n    const showCompletedTasks = useSelector((s) => s.tasks.meta.showCompletedTasks);\n    const completedTasksCount = useSelector((s)=>s.tasks.meta.completedTasksCount);\n    const dispatch = useDispatch();\n    return (\n        <Flipped flipId={`-1`}>\n            <DoneTasksDivider>\n                <DividerLine />\n                <DividerIcon showCompletedTasks={showCompletedTasks} onMouseEnter={() => setShowActionBtn(true)} onMouseLeave={() => setShowActionBtn(false)}>\n                    {showActionBtn ? (\n                        <DividerActionDiv>\n                            {showCompletedTasks ? (\n                                <BiHide onClick={() => dispatch(toggleShowCompletedTasks())} />\n                            ) : (\n                                <BiShow onClick={() => dispatch(toggleShowCompletedTasks())} />\n                            )}\n                            <AiOutlineClear onClick={() => dispatch(clearCompletedTasks())} />\n                        </DividerActionDiv>\n                    ) : (\n                        <p>{showCompletedTasks?\"DONE\":`DONE(${completedTasksCount})`}</p>\n                        \n                    )}\n                </DividerIcon>\n                <DividerLine />\n            </DoneTasksDivider>\n        </Flipped>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/noTasks.6827a406.svg\";","import React from \"react\";\nimport styled from \"styled-components\";\nimport noTasks from \"./../../images/noTasks.svg\";\nimport ReactTooltip from \"react-tooltip\";\n\nconst NoTasksDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-evenly;\n    width: ${(p)=>p.allCompleted?\"40%\":\"70%\"};\n    margin: 30px 10px;\n`;\n\nconst NoTasksIcon = styled.div`\n    img {\n        width: 90%;\n    }\n`;\n\nconst NoTasksText = styled.div`\n    p {\n        font-weight: bold;\n        margin: 0;\n        color: #c1c1d7;\n    }\n`;\n\nexport default function NoTasks({ allCompleted }) {\n    return (\n        <NoTasksDiv allCompleted={allCompleted}>\n            <NoTasksIcon data-tip=\"\" data-for=\"taskIcon\">\n                <img src={noTasks} alt={\"No Tasks\"} />\n                <ReactTooltip id=\"taskIcon\" getContent={()=>allCompleted ? \"create more tasks\" : \"create task to begin\"} />\n            </NoTasksIcon>\n        </NoTasksDiv>\n    );\n}\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateOrder } from \"./taskBoardSlice\";\nimport TaskCard from \"./../../components/TaskBoard/TaskCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Flipper } from \"react-flip-toolkit\";\nimport { focusOnTask } from \"./taskBoardSlice\";\nimport styled from \"styled-components\";\nimport TaskInput from \"./../../components/TaskBoard/TaskInput\";\nimport Divider from \"./../../components/TaskBoard/Divider\";\nimport NoTasks from \"../../components/TaskBoard/NoTasks\";\n\nconst TaskBoardContainer = styled.div`\n    flex: 1 1 0;\n    display: flex;\n    min-width:396px;\n    flex-direction: column;\n    align-items: center;\n    overflow-y:scroll; // to enable scrolling by default for this flex-container only\n`;\n\nexport function TaskBoard() {\n    const tasks = useSelector((state) => state.tasks.taskArray);\n    const meta = useSelector((state) => state.tasks.meta);\n    let focussedTask = meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex] : null;\n    const dispatch = useDispatch();\n\n    function handleOnDragEnd(result) {\n        if (!result.destination) return;\n\n        let items = [...tasks.map((i) => ({ ...i }))];\n        const [reorderedItem] = items.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorderedItem);\n\n        let i = result.source.index;\n        let direction = result.destination.index > result.source.index; // direction true means moving right & swapping\n        // below is logic to reset globalKeys to maintain correct sort order.\n        while (i != result.destination.index) {\n            if (direction) {\n                items[i].globalKey = tasks[i].globalKey;\n                i++;\n            } else {\n                items[i].globalKey = tasks[i].globalKey;\n                i--;\n            }\n            if (i == result.destination.index) {\n                items[i].globalKey = tasks[i].globalKey;\n            }\n        }\n\n        if (meta.focussedTaskIndex !== -1) {\n            let greaterIndex = Math.max(result.destination.index, result.source.index);\n            let smallerIndex = Math.min(result.destination.index, result.source.index);\n\n            if (result.source.index === meta.focussedTaskIndex) {\n                dispatch(focusOnTask(result.destination.index));\n            } else if (meta.focussedTaskIndex >= smallerIndex && meta.focussedTaskIndex <= greaterIndex) {\n                if (result.destination.index > result.source.index) {\n                    dispatch(focusOnTask(meta.focussedTaskIndex - 1)); // -1\n                } else {\n                    dispatch(focusOnTask(meta.focussedTaskIndex + 1)); // +1\n                }\n            }\n        }\n\n        dispatch(updateOrder(items)); // order is imp. focus then updateOrder\n    }\n\n    function getFlipKey() {\n        let flipKey = \"\";\n        tasks.forEach((i) => {\n            flipKey += `${i.globalKey}`;\n        });\n        flipKey += `${meta.completedTaskStartIndex}`;\n        return flipKey;\n    }\n\n    function isFocussed(id) {\n        if (focussedTask !== null && focussedTask.id === id) return true;\n        return false;\n    }\n\n    // input has both onChange and onKeyDown - can be optimised by using one and combining\n\n    return (\n        <TaskBoardContainer>\n            <TaskInput focussedTaskIndex={meta.focussedTaskIndex} />\n            {tasks.length === 0 ? <NoTasks /> : tasks.length === meta.completedTasksCount && <NoTasks allCompleted={true} />}\n            <Flipper flipKey={getFlipKey()}>\n                <DragDropContext onDragEnd={handleOnDragEnd}>\n                    <Droppable droppableId=\"dropArea\">\n                        {(provided) => (\n                            <div {...provided.droppableProps} ref={provided.innerRef}>\n                                {tasks.map((i, index) =>\n                                    !i.isCompleted ? (\n                                        <Draggable isDragDisabled={i.isCompleted} key={i.id} draggableId={`${i.id}`} index={index}>\n                                            {(provided2) => (\n                                                <TaskCard\n                                                    focussedTaskIndex={meta.focussedTaskIndex}\n                                                    focussedTaskGlobalKey={meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1}\n                                                    taskIndex={index}\n                                                    forwardRBDProvided={provided2}\n                                                    task={i}\n                                                    isFocussed={isFocussed(i.id)}\n                                                />\n                                            )}\n                                        </Draggable>\n                                    ) : (\n                                        \"\"\n                                    )\n                                )}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n\n                {meta.completedTaskStartIndex !== -1 && <Divider />}\n\n                {meta.showCompletedTasks &&\n                    tasks.map((i, index) =>\n                        i.isCompleted ? (\n                            <TaskCard\n                                focussedTaskIndex={meta.focussedTaskIndex}\n                                focussedTaskGlobalKey={meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1}\n                                taskIndex={index}\n                                key={i.id}\n                                forwardRBDProvided={{ innerRef: null }}\n                                task={i}\n                                isFocussed={isFocussed(i.id)}\n                            />\n                        ) : (\n                            \"\"\n                        )\n                    )}\n            </Flipper>\n        </TaskBoardContainer>\n    );\n}\n","import React from \"react\";\n\nexport function MobileView() {\n    return <div style={{ backgroundColor: \"#FABB18\", width: \"100%\", height: \"100%\", color: \"#000\" }}>Not Supported on mobile</div>;\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst SettingsContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n`;\n\nexport default function Settings() {\n    return <SettingsContainer>settings</SettingsContainer>;\n}\n","import React from \"react\";\r\nimport { Menu } from \"./menu/Menu\";\r\nimport Dashboard from \"./dashboard\";\r\nimport { TaskBoard } from \"./taskBoard/TaskBoard\";\r\nimport styled from \"styled-components\";\r\nimport { isMobile } from \"react-device-detect\";\r\nimport { MobileView } from \"./mobileView\";\r\nimport Settings from \"./settings\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nconst AppContainer = styled.div`\r\n    display: flex;\r\n    height: 100%;\r\n`;\r\n\r\nfunction App() {\r\n    if (!isMobile)\r\n        return (\r\n            <AppContainer>\r\n                \r\n                <Router>\r\n                <Menu />\r\n                    <Switch>\r\n                        <Route path=\"/settings\">\r\n                            <Settings />\r\n                        </Route>\r\n                        <Route path=\"/\">\r\n                            <>\r\n                                <Dashboard />\r\n                                <TaskBoard />\r\n                            </>\r\n                        </Route>\r\n                    </Switch>\r\n                </Router>\r\n            </AppContainer>\r\n        );\r\n    else {\r\n        return (\r\n            <AppContainer>\r\n                <MobileView />\r\n            </AppContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"../containers/taskBoard/taskBoardSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}